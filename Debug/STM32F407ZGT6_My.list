
STM32F407ZGT6_My.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005f1c  08005f1c  00006f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f9c  08005f9c  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  08005f9c  08005f9c  00006f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fa4  08005fa4  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa4  08005fa4  00006fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fa8  08005fa8  00006fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08005fac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007078  2**0
                  CONTENTS
 10 .bss          0000047c  20000078  20000078  00007078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004f4  200004f4  00007078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff53  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b6f  00000000  00000000  00016ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00019b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aca  00000000  00000000  0001a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000233ed  00000000  00000000  0001b442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001505c  00000000  00000000  0003e82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c93a1  00000000  00000000  0005388b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011cc2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004024  00000000  00000000  0011cc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00120c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f04 	.word	0x08005f04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005f04 	.word	0x08005f04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b10      	ldr	r3, [pc, #64]	@ (80005ac <MX_DMA_Init+0x4c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <MX_DMA_Init+0x4c>)
 8000570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <MX_DMA_Init+0x4c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	2044      	movs	r0, #68	@ 0x44
 8000588:	f001 fa37 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800058c:	2044      	movs	r0, #68	@ 0x44
 800058e:	f001 fa50 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2046      	movs	r0, #70	@ 0x46
 8000598:	f001 fa2f 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800059c:	2046      	movs	r0, #70	@ 0x46
 800059e:	f001 fa48 	bl	8001a32 <HAL_NVIC_EnableIRQ>

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000684 <MX_GPIO_Init+0xd4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a2d      	ldr	r2, [pc, #180]	@ (8000684 <MX_GPIO_Init+0xd4>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000684 <MX_GPIO_Init+0xd4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <MX_GPIO_Init+0xd4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a26      	ldr	r2, [pc, #152]	@ (8000684 <MX_GPIO_Init+0xd4>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <MX_GPIO_Init+0xd4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <MX_GPIO_Init+0xd4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a1f      	ldr	r2, [pc, #124]	@ (8000684 <MX_GPIO_Init+0xd4>)
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <MX_GPIO_Init+0xd4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0308 	and.w	r3, r3, #8
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <MX_GPIO_Init+0xd4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a18      	ldr	r2, [pc, #96]	@ (8000684 <MX_GPIO_Init+0xd4>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <MX_GPIO_Init+0xd4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <MX_GPIO_Init+0xd4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a11      	ldr	r2, [pc, #68]	@ (8000684 <MX_GPIO_Init+0xd4>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_GPIO_Init+0xd4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SEL1_GPIO_Port, SPI2_SEL1_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000658:	480b      	ldr	r0, [pc, #44]	@ (8000688 <MX_GPIO_Init+0xd8>)
 800065a:	f001 ffa3 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_SEL1_Pin */
  GPIO_InitStruct.Pin = SPI2_SEL1_Pin;
 800065e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000668:	2302      	movs	r3, #2
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_SEL1_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	@ (8000688 <MX_GPIO_Init+0xd8>)
 8000678:	f001 fdf8 	bl	800226c <HAL_GPIO_Init>

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	@ 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40020c00 	.word	0x40020c00

0800068c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_I2C1_Init+0x50>)
 8000692:	4a13      	ldr	r2, [pc, #76]	@ (80006e0 <MX_I2C1_Init+0x54>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_I2C1_Init+0x50>)
 8000698:	4a12      	ldr	r2, [pc, #72]	@ (80006e4 <MX_I2C1_Init+0x58>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_I2C1_Init+0x50>)
 80006aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	@ (80006dc <MX_I2C1_Init+0x50>)
 80006ca:	f001 ff9f 	bl	800260c <HAL_I2C_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d4:	f000 f962 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000094 	.word	0x20000094
 80006e0:	40005400 	.word	0x40005400
 80006e4:	000186a0 	.word	0x000186a0

080006e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	@ 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a19      	ldr	r2, [pc, #100]	@ (800076c <HAL_I2C_MspInit+0x84>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d12b      	bne.n	8000762 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <HAL_I2C_MspInit+0x88>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a17      	ldr	r2, [pc, #92]	@ (8000770 <HAL_I2C_MspInit+0x88>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <HAL_I2C_MspInit+0x88>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000726:	23c0      	movs	r3, #192	@ 0xc0
 8000728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072a:	2312      	movs	r3, #18
 800072c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000736:	2304      	movs	r3, #4
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	480c      	ldr	r0, [pc, #48]	@ (8000774 <HAL_I2C_MspInit+0x8c>)
 8000742:	f001 fd93 	bl	800226c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <HAL_I2C_MspInit+0x88>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <HAL_I2C_MspInit+0x88>)
 8000750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000754:	6413      	str	r3, [r2, #64]	@ 0x40
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <HAL_I2C_MspInit+0x88>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	@ 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40005400 	.word	0x40005400
 8000770:	40023800 	.word	0x40023800
 8000774:	40020400 	.word	0x40020400

08000778 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8000780:	1d39      	adds	r1, r7, #4
 8000782:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000786:	2201      	movs	r2, #1
 8000788:	4803      	ldr	r0, [pc, #12]	@ (8000798 <__io_putchar+0x20>)
 800078a:	f003 fabc 	bl	8003d06 <HAL_UART_Transmit>
	return ch;
 800078e:	687b      	ldr	r3, [r7, #4]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000148 	.word	0x20000148

0800079c <HAL_UARTEx_RxEventCallback>:
	}
}


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a0f      	ldr	r2, [pc, #60]	@ (80007e8 <HAL_UARTEx_RxEventCallback+0x4c>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d117      	bne.n	80007e0 <HAL_UARTEx_RxEventCallback+0x44>
    {
    	rx_num = Size;
 80007b0:	887b      	ldrh	r3, [r7, #2]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <HAL_UARTEx_RxEventCallback+0x50>)
 80007b6:	701a      	strb	r2, [r3, #0]
    	uart_flag = 1;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <HAL_UARTEx_RxEventCallback+0x54>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 80007be:	2104      	movs	r1, #4
 80007c0:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <HAL_UARTEx_RxEventCallback+0x58>)
 80007c2:	f001 ff08 	bl	80025d6 <HAL_GPIO_TogglePin>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer,BUF_SIZE);
 80007c6:	2280      	movs	r2, #128	@ 0x80
 80007c8:	490b      	ldr	r1, [pc, #44]	@ (80007f8 <HAL_UARTEx_RxEventCallback+0x5c>)
 80007ca:	4807      	ldr	r0, [pc, #28]	@ (80007e8 <HAL_UARTEx_RxEventCallback+0x4c>)
 80007cc:	f003 fb26 	bl	8003e1c <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <HAL_UARTEx_RxEventCallback+0x60>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <HAL_UARTEx_RxEventCallback+0x60>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f022 0208 	bic.w	r2, r2, #8
 80007de:	601a      	str	r2, [r3, #0]
    }
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000148 	.word	0x20000148
 80007ec:	20000398 	.word	0x20000398
 80007f0:	200000e9 	.word	0x200000e9
 80007f4:	40020000 	.word	0x40020000
 80007f8:	20000298 	.word	0x20000298
 80007fc:	20000238 	.word	0x20000238

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 ff88 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f86a 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f7ff fed0 	bl	80005b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000810:	f7ff fea6 	bl	8000560 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000814:	f000 fa72 	bl	8000cfc <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000818:	f000 f8c6 	bl	80009a8 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800081c:	f000 fa98 	bl	8000d50 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000820:	f7ff ff34 	bl	800068c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800082a:	4828      	ldr	r0, [pc, #160]	@ (80008cc <main+0xcc>)
 800082c:	f001 feba 	bl	80025a4 <HAL_GPIO_WritePin>
  DDSend(1,2000000,6,150);
 8000830:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80008d0 <main+0xd0>
 8000834:	2206      	movs	r2, #6
 8000836:	4927      	ldr	r1, [pc, #156]	@ (80008d4 <main+0xd4>)
 8000838:	2001      	movs	r0, #1
 800083a:	f000 fe01 	bl	8001440 <DDSend>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000844:	4821      	ldr	r0, [pc, #132]	@ (80008cc <main+0xcc>)
 8000846:	f001 fead 	bl	80025a4 <HAL_GPIO_WritePin>
  DDSend(0,2000000,6,150);
 800084a:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80008d0 <main+0xd0>
 800084e:	2206      	movs	r2, #6
 8000850:	4920      	ldr	r1, [pc, #128]	@ (80008d4 <main+0xd4>)
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fdf4 	bl	8001440 <DDSend>
//	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1);
//	  HAL_Delay(200);
//	  printf("dds test\r\n");


	  DACAI_SEND(SwitchScreen,0);
 8000858:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800085c:	2100      	movs	r1, #0
 800085e:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8000862:	f000 fcc7 	bl	80011f4 <Dacai_Send>
	  HAL_Delay(1000);
 8000866:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800086a:	f000 ffc7 	bl	80017fc <HAL_Delay>
	  DACAI_SEND(SwitchScreen,1);
 800086e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000872:	2101      	movs	r1, #1
 8000874:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8000878:	f000 fcbc 	bl	80011f4 <Dacai_Send>
	  HAL_Delay(1000);
 800087c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000880:	f000 ffbc 	bl	80017fc <HAL_Delay>
	  DACAI_SEND(SwitchScreen,2);
 8000884:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000888:	2102      	movs	r1, #2
 800088a:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 800088e:	f000 fcb1 	bl	80011f4 <Dacai_Send>
	  HAL_Delay(1000);
 8000892:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000896:	f000 ffb1 	bl	80017fc <HAL_Delay>
	  DACAI_SEND(SwitchScreen,3);
 800089a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089e:	2103      	movs	r1, #3
 80008a0:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 80008a4:	f000 fca6 	bl	80011f4 <Dacai_Send>
//	  CMD_SEND(SwitchScreen,2);
//	  HAL_Delay(1000);
//	  CMD_SEND(SwitchScreen,3);


	  if(uart_flag == 1)
 80008a8:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <main+0xd8>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d104      	bne.n	80008ba <main+0xba>
	  {
		  uart_flag = 0;
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <main+0xd8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
		  PConectProcess();
 80008b6:	f000 fdb1 	bl	800141c <PConectProcess>
	  }



	  if(key_flag == 1)
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <main+0xdc>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d1ca      	bne.n	8000858 <main+0x58>
	  {
		  key_flag = 0;
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <main+0xdc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
  {
 80008c8:	e7c6      	b.n	8000858 <main+0x58>
 80008ca:	bf00      	nop
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	43160000 	.word	0x43160000
 80008d4:	001e8480 	.word	0x001e8480
 80008d8:	200000e9 	.word	0x200000e9
 80008dc:	200000e8 	.word	0x200000e8

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	@ 0x50
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	2230      	movs	r2, #48	@ 0x30
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 fd84 	bl	80053fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <SystemClock_Config+0xb4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090c:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <SystemClock_Config+0xb4>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000912:	6413      	str	r3, [r2, #64]	@ 0x40
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <SystemClock_Config+0xb4>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <SystemClock_Config+0xb8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a1b      	ldr	r2, [pc, #108]	@ (8000998 <SystemClock_Config+0xb8>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <SystemClock_Config+0xb8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	2310      	movs	r3, #16
 8000946:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000948:	2300      	movs	r3, #0
 800094a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0320 	add.w	r3, r7, #32
 8000950:	4618      	mov	r0, r3
 8000952:	f002 fca7 	bl	80032a4 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800095c:	f000 f81e 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f002 ff0a 	bl	8003794 <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000986:	f000 f809 	bl	800099c <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3750      	adds	r7, #80	@ 0x50
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009ae:	4a18      	ldr	r2, [pc, #96]	@ (8000a10 <MX_SPI2_Init+0x68>)
 80009b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009f4:	220a      	movs	r2, #10
 80009f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_SPI2_Init+0x64>)
 80009fa:	f003 f8ab 	bl	8003b54 <HAL_SPI_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a04:	f7ff ffca 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200000ec 	.word	0x200000ec
 8000a10:	40003800 	.word	0x40003800

08000a14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a19      	ldr	r2, [pc, #100]	@ (8000a98 <HAL_SPI_MspInit+0x84>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12c      	bne.n	8000a90 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <HAL_SPI_MspInit+0x88>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a17      	ldr	r2, [pc, #92]	@ (8000a9c <HAL_SPI_MspInit+0x88>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <HAL_SPI_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <HAL_SPI_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a10      	ldr	r2, [pc, #64]	@ (8000a9c <HAL_SPI_MspInit+0x88>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_SPI_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a6e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a80:	2305      	movs	r3, #5
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <HAL_SPI_MspInit+0x8c>)
 8000a8c:	f001 fbee 	bl	800226c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	@ 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40003800 	.word	0x40003800
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <NMI_Handler+0x4>

08000afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4a:	f000 fe37 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <USART1_IRQHandler+0x10>)
 8000b5a:	f003 f9bd 	bl	8003ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000148 	.word	0x20000148

08000b68 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <DMA2_Stream5_IRQHandler+0x10>)
 8000b6e:	f001 f913 	bl	8001d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000238 	.word	0x20000238

08000b7c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <DMA2_Stream7_IRQHandler+0x10>)
 8000b82:	f001 f909 	bl	8001d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001d8 	.word	0x200001d8

08000b90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	e00a      	b.n	8000bb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba2:	f3af 8000 	nop.w
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	b2ca      	uxtb	r2, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	dbf0      	blt.n	8000ba2 <_read+0x12>
  }

  return len;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e009      	b.n	8000bf0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fdc7 	bl	8000778 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf1      	blt.n	8000bdc <_write+0x12>
  }
  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_close>:

int _close(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_isatty>:

int _isatty(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f004 fbfc 	bl	8005498 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20020000 	.word	0x20020000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000144 	.word	0x20000144
 8000cd4:	200004f8 	.word	0x200004f8

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <MX_USART1_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d34:	f002 ff97 	bl	8003c66 <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d3e:	f7ff fe2d 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000148 	.word	0x20000148
 8000d4c:	40011000 	.word	0x40011000

08000d50 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <MX_USART6_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d88:	f002 ff6d 	bl	8003c66 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d92:	f7ff fe03 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000190 	.word	0x20000190
 8000da0:	40011400 	.word	0x40011400

08000da4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	@ 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a65      	ldr	r2, [pc, #404]	@ (8000f58 <HAL_UART_MspInit+0x1b4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	f040 8092 	bne.w	8000eec <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	4b63      	ldr	r3, [pc, #396]	@ (8000f5c <HAL_UART_MspInit+0x1b8>)
 8000dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd0:	4a62      	ldr	r2, [pc, #392]	@ (8000f5c <HAL_UART_MspInit+0x1b8>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd8:	4b60      	ldr	r3, [pc, #384]	@ (8000f5c <HAL_UART_MspInit+0x1b8>)
 8000dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	4b5c      	ldr	r3, [pc, #368]	@ (8000f5c <HAL_UART_MspInit+0x1b8>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dec:	4a5b      	ldr	r2, [pc, #364]	@ (8000f5c <HAL_UART_MspInit+0x1b8>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df4:	4b59      	ldr	r3, [pc, #356]	@ (8000f5c <HAL_UART_MspInit+0x1b8>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e00:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e12:	2307      	movs	r3, #7
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4850      	ldr	r0, [pc, #320]	@ (8000f60 <HAL_UART_MspInit+0x1bc>)
 8000e1e:	f001 fa25 	bl	800226c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000e22:	4b50      	ldr	r3, [pc, #320]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e24:	4a50      	ldr	r2, [pc, #320]	@ (8000f68 <HAL_UART_MspInit+0x1c4>)
 8000e26:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000e28:	4b4e      	ldr	r3, [pc, #312]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e30:	4b4c      	ldr	r3, [pc, #304]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e32:	2240      	movs	r2, #64	@ 0x40
 8000e34:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e36:	4b4b      	ldr	r3, [pc, #300]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e3c:	4b49      	ldr	r3, [pc, #292]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e42:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e44:	4b47      	ldr	r3, [pc, #284]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e4a:	4b46      	ldr	r3, [pc, #280]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000e50:	4b44      	ldr	r3, [pc, #272]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e56:	4b43      	ldr	r3, [pc, #268]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e5c:	4b41      	ldr	r3, [pc, #260]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000e62:	4840      	ldr	r0, [pc, #256]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e64:	f000 fe00 	bl	8001a68 <HAL_DMA_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000e6e:	f7ff fd95 	bl	800099c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a3b      	ldr	r2, [pc, #236]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e76:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e78:	4a3a      	ldr	r2, [pc, #232]	@ (8000f64 <HAL_UART_MspInit+0x1c0>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8000e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000e80:	4a3b      	ldr	r2, [pc, #236]	@ (8000f70 <HAL_UART_MspInit+0x1cc>)
 8000e82:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000e84:	4b39      	ldr	r3, [pc, #228]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000e86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e8c:	4b37      	ldr	r3, [pc, #220]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e92:	4b36      	ldr	r3, [pc, #216]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e98:	4b34      	ldr	r3, [pc, #208]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000e9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea0:	4b32      	ldr	r3, [pc, #200]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea6:	4b31      	ldr	r3, [pc, #196]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ebe:	482b      	ldr	r0, [pc, #172]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000ec0:	f000 fdd2 	bl	8001a68 <HAL_DMA_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000eca:	f7ff fd67 	bl	800099c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a26      	ldr	r2, [pc, #152]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000ed2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ed4:	4a25      	ldr	r2, [pc, #148]	@ (8000f6c <HAL_UART_MspInit+0x1c8>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2025      	movs	r0, #37	@ 0x25
 8000ee0:	f000 fd8b 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ee4:	2025      	movs	r0, #37	@ 0x25
 8000ee6:	f000 fda4 	bl	8001a32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000eea:	e030      	b.n	8000f4e <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART6)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a20      	ldr	r2, [pc, #128]	@ (8000f74 <HAL_UART_MspInit+0x1d0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12b      	bne.n	8000f4e <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_UART_MspInit+0x1b8>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a17      	ldr	r2, [pc, #92]	@ (8000f5c <HAL_UART_MspInit+0x1b8>)
 8000f00:	f043 0320 	orr.w	r3, r3, #32
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_UART_MspInit+0x1b8>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f003 0320 	and.w	r3, r3, #32
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <HAL_UART_MspInit+0x1b8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a10      	ldr	r2, [pc, #64]	@ (8000f5c <HAL_UART_MspInit+0x1b8>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_UART_MspInit+0x1b8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f2e:	23c0      	movs	r3, #192	@ 0xc0
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	480b      	ldr	r0, [pc, #44]	@ (8000f78 <HAL_UART_MspInit+0x1d4>)
 8000f4a:	f001 f98f 	bl	800226c <HAL_GPIO_Init>
}
 8000f4e:	bf00      	nop
 8000f50:	3730      	adds	r7, #48	@ 0x30
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40011000 	.word	0x40011000
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	200001d8 	.word	0x200001d8
 8000f68:	400264b8 	.word	0x400264b8
 8000f6c:	20000238 	.word	0x20000238
 8000f70:	40026488 	.word	0x40026488
 8000f74:	40011400 	.word	0x40011400
 8000f78:	40020800 	.word	0x40020800

08000f7c <Reset_Handler>:
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb4 <LoopFillZerobss+0xe>
 8000f80:	f7ff feaa 	bl	8000cd8 <SystemInit>
 8000f84:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <LoopFillZerobss+0x12>)
 8000f86:	490d      	ldr	r1, [pc, #52]	@ (8000fbc <LoopFillZerobss+0x16>)
 8000f88:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc0 <LoopFillZerobss+0x1a>)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:
 8000f8e:	58d4      	ldr	r4, [r2, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:
 8000f94:	18c4      	adds	r4, r0, r3
 8000f96:	428c      	cmp	r4, r1
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <LoopFillZerobss+0x1e>)
 8000f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc8 <LoopFillZerobss+0x22>)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:
 8000fa6:	42a2      	cmp	r2, r4
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>
 8000faa:	f004 fa7b 	bl	80054a4 <__libc_init_array>
 8000fae:	f7ff fc27 	bl	8000800 <main>
 8000fb2:	4770      	bx	lr
 8000fb4:	20020000 	.word	0x20020000
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000078 	.word	0x20000078
 8000fc0:	08005fac 	.word	0x08005fac
 8000fc4:	20000078 	.word	0x20000078
 8000fc8:	200004f4 	.word	0x200004f4

08000fcc <ADC_IRQHandler>:
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>
	...

08000fd0 <AT24Read>:
	HAL_Delay(10);
}


void AT24Read(int position,void* pstruct,int index)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, AT24CXX_Read_ADDR,position,I2C_MEMADD_SIZE_8BIT, (uint8_t*)pstruct+index,1,1000);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	b299      	uxth	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fea:	9202      	str	r2, [sp, #8]
 8000fec:	2201      	movs	r2, #1
 8000fee:	9201      	str	r2, [sp, #4]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	21a1      	movs	r1, #161	@ 0xa1
 8000ff8:	4803      	ldr	r0, [pc, #12]	@ (8001008 <AT24Read+0x38>)
 8000ffa:	f001 fc4b 	bl	8002894 <HAL_I2C_Mem_Read>
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000094 	.word	0x20000094

0800100c <frame_send>:
  * @param	Frame head and end of frame
  * @retval	Null
  */
#define FRAME_SEND(SendSlect,head,tail) frame_send(SendSlect,head,tail,sizeof(head),sizeof(tail))
void frame_send(SendSlectTypeDef SendSlect,uint8_t* head,uint8_t* tail,uint8_t head_size,uint8_t tail_size)
{
 800100c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001010:	b089      	sub	sp, #36	@ 0x24
 8001012:	af00      	add	r7, sp, #0
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	461a      	mov	r2, r3
 800101a:	4603      	mov	r3, r0
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	4613      	mov	r3, r2
 8001020:	73bb      	strb	r3, [r7, #14]
 8001022:	466b      	mov	r3, sp
 8001024:	461e      	mov	r6, r3
	uint8_t frame_size = head_size + tail_size + tx_num;
 8001026:	7bba      	ldrb	r2, [r7, #14]
 8001028:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800102c:	4413      	add	r3, r2
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b43      	ldr	r3, [pc, #268]	@ (8001140 <frame_send+0x134>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4413      	add	r3, r2
 8001036:	777b      	strb	r3, [r7, #29]
	uint8_t frame[frame_size];
 8001038:	7f79      	ldrb	r1, [r7, #29]
 800103a:	460b      	mov	r3, r1
 800103c:	3b01      	subs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	b2cb      	uxtb	r3, r1
 8001042:	2200      	movs	r2, #0
 8001044:	4698      	mov	r8, r3
 8001046:	4691      	mov	r9, r2
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001054:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001058:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800105c:	b2cb      	uxtb	r3, r1
 800105e:	2200      	movs	r2, #0
 8001060:	461c      	mov	r4, r3
 8001062:	4615      	mov	r5, r2
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	00eb      	lsls	r3, r5, #3
 800106e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001072:	00e2      	lsls	r2, r4, #3
 8001074:	460b      	mov	r3, r1
 8001076:	3307      	adds	r3, #7
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	ebad 0d03 	sub.w	sp, sp, r3
 8001080:	466b      	mov	r3, sp
 8001082:	3300      	adds	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
	uint8_t i,j = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	77bb      	strb	r3, [r7, #30]
	for(i = 0;i < head_size;i++,j++)
 800108a:	2300      	movs	r3, #0
 800108c:	77fb      	strb	r3, [r7, #31]
 800108e:	e00c      	b.n	80010aa <frame_send+0x9e>
	{
		frame[j] = head[i];
 8001090:	7ffb      	ldrb	r3, [r7, #31]
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	441a      	add	r2, r3
 8001096:	7fbb      	ldrb	r3, [r7, #30]
 8001098:	7811      	ldrb	r1, [r2, #0]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < head_size;i++,j++)
 800109e:	7ffb      	ldrb	r3, [r7, #31]
 80010a0:	3301      	adds	r3, #1
 80010a2:	77fb      	strb	r3, [r7, #31]
 80010a4:	7fbb      	ldrb	r3, [r7, #30]
 80010a6:	3301      	adds	r3, #1
 80010a8:	77bb      	strb	r3, [r7, #30]
 80010aa:	7ffa      	ldrb	r2, [r7, #31]
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3ee      	bcc.n	8001090 <frame_send+0x84>
	}
	for(i = 0;i < tx_num;i++,j++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	77fb      	strb	r3, [r7, #31]
 80010b6:	e00b      	b.n	80010d0 <frame_send+0xc4>
	{
		frame[j] = tx_buffer[i];
 80010b8:	7ffa      	ldrb	r2, [r7, #31]
 80010ba:	7fbb      	ldrb	r3, [r7, #30]
 80010bc:	4921      	ldr	r1, [pc, #132]	@ (8001144 <frame_send+0x138>)
 80010be:	5c89      	ldrb	r1, [r1, r2]
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < tx_num;i++,j++)
 80010c4:	7ffb      	ldrb	r3, [r7, #31]
 80010c6:	3301      	adds	r3, #1
 80010c8:	77fb      	strb	r3, [r7, #31]
 80010ca:	7fbb      	ldrb	r3, [r7, #30]
 80010cc:	3301      	adds	r3, #1
 80010ce:	77bb      	strb	r3, [r7, #30]
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <frame_send+0x134>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	7ffa      	ldrb	r2, [r7, #31]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d3ee      	bcc.n	80010b8 <frame_send+0xac>
	}
	for(i = 0;i < tail_size;i++,j++)
 80010da:	2300      	movs	r3, #0
 80010dc:	77fb      	strb	r3, [r7, #31]
 80010de:	e00c      	b.n	80010fa <frame_send+0xee>
	{
		frame[j] = tail[i];
 80010e0:	7ffb      	ldrb	r3, [r7, #31]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	441a      	add	r2, r3
 80010e6:	7fbb      	ldrb	r3, [r7, #30]
 80010e8:	7811      	ldrb	r1, [r2, #0]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < tail_size;i++,j++)
 80010ee:	7ffb      	ldrb	r3, [r7, #31]
 80010f0:	3301      	adds	r3, #1
 80010f2:	77fb      	strb	r3, [r7, #31]
 80010f4:	7fbb      	ldrb	r3, [r7, #30]
 80010f6:	3301      	adds	r3, #1
 80010f8:	77bb      	strb	r3, [r7, #30]
 80010fa:	7ffa      	ldrb	r2, [r7, #31]
 80010fc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001100:	429a      	cmp	r2, r3
 8001102:	d3ed      	bcc.n	80010e0 <frame_send+0xd4>
	}
	switch (SendSlect)
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <frame_send+0x104>
 800110a:	2b01      	cmp	r3, #1
 800110c:	d009      	beq.n	8001122 <frame_send+0x116>
 800110e:	e011      	b.n	8001134 <frame_send+0x128>
	{
		case UART: HAL_UART_Transmit(&URTSEND,&frame,frame_size, 0xFFFF);break;
 8001110:	7f7b      	ldrb	r3, [r7, #29]
 8001112:	b29a      	uxth	r2, r3
 8001114:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001118:	6979      	ldr	r1, [r7, #20]
 800111a:	480b      	ldr	r0, [pc, #44]	@ (8001148 <frame_send+0x13c>)
 800111c:	f002 fdf3 	bl	8003d06 <HAL_UART_Transmit>
 8001120:	e008      	b.n	8001134 <frame_send+0x128>
		case SPI: HAL_UART_Transmit(&SPISEND,&frame,frame_size, 0xFFFF);break;
 8001122:	7f7b      	ldrb	r3, [r7, #29]
 8001124:	b29a      	uxth	r2, r3
 8001126:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800112a:	6979      	ldr	r1, [r7, #20]
 800112c:	4807      	ldr	r0, [pc, #28]	@ (800114c <frame_send+0x140>)
 800112e:	f002 fdea 	bl	8003d06 <HAL_UART_Transmit>
 8001132:	bf00      	nop
 8001134:	46b5      	mov	sp, r6
		defalt :break;
	}
}
 8001136:	bf00      	nop
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001140:	20000399 	.word	0x20000399
 8001144:	20000318 	.word	0x20000318
 8001148:	20000190 	.word	0x20000190
 800114c:	200000ec 	.word	0x200000ec

08001150 <head_verification>:
  * @param	Frame header
  * @retval Verify that it was successful
  */
# define HEAD_VERIFICATION(head) head_verification(head,sizeof(head))
int head_verification(uint8_t* head,uint8_t head_size)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	for(int i = 0;i < head_size;i++)
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e00e      	b.n	8001180 <head_verification+0x30>
	{
		if(rx_buffer[i] != head[i]){return 0;}
 8001162:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <head_verification+0x48>)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	440b      	add	r3, r1
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d001      	beq.n	800117a <head_verification+0x2a>
 8001176:	2300      	movs	r3, #0
 8001178:	e007      	b.n	800118a <head_verification+0x3a>
	for(int i = 0;i < head_size;i++)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3301      	adds	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	dbec      	blt.n	8001162 <head_verification+0x12>
	}
	return 1;
 8001188:	2301      	movs	r3, #1
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000298 	.word	0x20000298

0800119c <tail_verification>:
  * @param	Frame tail
  * @retval	Verify that it was successful
  */
# define TIAL_VERIFICATION(tail) tail_verification(tail,sizeof(tail))
int tail_verification(uint8_t* tail,uint8_t tail_size)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
	for(int i = 0;i < tail_size;i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e013      	b.n	80011d6 <tail_verification+0x3a>
	{
		if(rx_buffer[rx_num-tail_size+i] != tail[i]){return 0;}
 80011ae:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <tail_verification+0x50>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	78fb      	ldrb	r3, [r7, #3]
 80011b6:	1ad2      	subs	r2, r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a0c      	ldr	r2, [pc, #48]	@ (80011f0 <tail_verification+0x54>)
 80011be:	5cd2      	ldrb	r2, [r2, r3]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	440b      	add	r3, r1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d001      	beq.n	80011d0 <tail_verification+0x34>
 80011cc:	2300      	movs	r3, #0
 80011ce:	e007      	b.n	80011e0 <tail_verification+0x44>
	for(int i = 0;i < tail_size;i++)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3301      	adds	r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dbe7      	blt.n	80011ae <tail_verification+0x12>
	}
	return 1;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	20000398 	.word	0x20000398
 80011f0:	20000298 	.word	0x20000298

080011f4 <Dacai_Send>:
  * 		and variable number of double-byte parameters are sent at the same time
  * @param	Instructions and parameters must have one instruction, and parameters can be omitted.
  * @retval	Null
  */
void Dacai_Send(CmdTypeDef command, ...)
{
 80011f4:	b40f      	push	{r0, r1, r2, r3}
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af02      	add	r7, sp, #8
    uint16_t Cmd, param, crc16;
    uint16_t count = 0,param_start = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	81fb      	strh	r3, [r7, #14]
 8001200:	2300      	movs	r3, #0
 8001202:	81bb      	strh	r3, [r7, #12]
    va_list args;

    /* Determine whether it is a double-byte instruction or a single-byte instruction */
    if((command & 0xFF00) == 0xB100)
 8001204:	8b3b      	ldrh	r3, [r7, #24]
 8001206:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800120a:	f5b3 4f31 	cmp.w	r3, #45312	@ 0xb100
 800120e:	d10e      	bne.n	800122e <Dacai_Send+0x3a>
    {
    	Cmd = CharReverse16((uint16_t)command);
 8001210:	8b3b      	ldrh	r3, [r7, #24]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fa0a 	bl	800162c <CharReverse16>
 8001218:	4603      	mov	r3, r0
 800121a:	817b      	strh	r3, [r7, #10]
    	memcpy(&tx_buffer[0], (uint8_t*)&Cmd, 2);		//It is recommended to determine that the instruction length is incomplete.
 800121c:	897a      	ldrh	r2, [r7, #10]
 800121e:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <Dacai_Send+0xf0>)
 8001220:	801a      	strh	r2, [r3, #0]
        tx_num = sizeof(crc16) + 2;
 8001222:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <Dacai_Send+0xf4>)
 8001224:	2204      	movs	r2, #4
 8001226:	701a      	strb	r2, [r3, #0]
    	param_start = 2;
 8001228:	2302      	movs	r3, #2
 800122a:	81bb      	strh	r3, [r7, #12]
 800122c:	e00d      	b.n	800124a <Dacai_Send+0x56>
    }else{
    	Cmd = CharReverse16((uint16_t)command);
 800122e:	8b3b      	ldrh	r3, [r7, #24]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f9fb 	bl	800162c <CharReverse16>
 8001236:	4603      	mov	r3, r0
 8001238:	817b      	strh	r3, [r7, #10]
    	memcpy(&tx_buffer[0], (uint8_t*)&Cmd, 1);
 800123a:	7aba      	ldrb	r2, [r7, #10]
 800123c:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <Dacai_Send+0xf0>)
 800123e:	701a      	strb	r2, [r3, #0]
        tx_num = sizeof(crc16) + 1;
 8001240:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <Dacai_Send+0xf4>)
 8001242:	2203      	movs	r2, #3
 8001244:	701a      	strb	r2, [r3, #0]
    	param_start = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	81bb      	strh	r3, [r7, #12]
    }

    /* Read variable parameters */
    va_start(args, command);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	603b      	str	r3, [r7, #0]
    while (1) {
        param = (uint16_t)va_arg(args, int);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	1d1a      	adds	r2, r3, #4
 8001254:	603a      	str	r2, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	b29b      	uxth	r3, r3
 800125a:	813b      	strh	r3, [r7, #8]
        if (param == 0xFFFF) break;
 800125c:	893b      	ldrh	r3, [r7, #8]
 800125e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001262:	4293      	cmp	r3, r2
 8001264:	d017      	beq.n	8001296 <Dacai_Send+0xa2>

        param = CharReverse16((uint16_t)param);
 8001266:	893b      	ldrh	r3, [r7, #8]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f9df 	bl	800162c <CharReverse16>
 800126e:	4603      	mov	r3, r0
 8001270:	813b      	strh	r3, [r7, #8]
        memcpy(&tx_buffer[param_start + count * sizeof(param)], (uint8_t*)&param, sizeof(param));
 8001272:	89ba      	ldrh	r2, [r7, #12]
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	4a1a      	ldr	r2, [pc, #104]	@ (80012e4 <Dacai_Send+0xf0>)
 800127c:	4413      	add	r3, r2
 800127e:	893a      	ldrh	r2, [r7, #8]
 8001280:	801a      	strh	r2, [r3, #0]

        tx_num += sizeof(param);
 8001282:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <Dacai_Send+0xf4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	3302      	adds	r3, #2
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <Dacai_Send+0xf4>)
 800128c:	701a      	strb	r2, [r3, #0]
        count++;
 800128e:	89fb      	ldrh	r3, [r7, #14]
 8001290:	3301      	adds	r3, #1
 8001292:	81fb      	strh	r3, [r7, #14]
        param = (uint16_t)va_arg(args, int);
 8001294:	e7dc      	b.n	8001250 <Dacai_Send+0x5c>
        if (param == 0xFFFF) break;
 8001296:	bf00      	nop
    }
    va_end(args);

    /* Add CRC verification code */
    crc16 = ModBusCRC16(tx_buffer, tx_num - sizeof(crc16));
 8001298:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <Dacai_Send+0xf4>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	3b02      	subs	r3, #2
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4619      	mov	r1, r3
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <Dacai_Send+0xf0>)
 80012a4:	f000 f9d7 	bl	8001656 <ModBusCRC16>
 80012a8:	4603      	mov	r3, r0
 80012aa:	80fb      	strh	r3, [r7, #6]
   	crc16 = CharReverse16(crc16);//The Dacai screen transmission is a big-end transmission, so it should be converted to a big-end mode
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f9bc 	bl	800162c <CharReverse16>
 80012b4:	4603      	mov	r3, r0
 80012b6:	80fb      	strh	r3, [r7, #6]
    memcpy(&tx_buffer[tx_num - sizeof(crc16)], (uint8_t*)&crc16, sizeof(crc16));
 80012b8:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <Dacai_Send+0xf4>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	3b02      	subs	r3, #2
 80012be:	4a09      	ldr	r2, [pc, #36]	@ (80012e4 <Dacai_Send+0xf0>)
 80012c0:	4413      	add	r3, r2
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	801a      	strh	r2, [r3, #0]

    /* Frame sending */
    FRAME_SEND(UART,dacai_head, dacai_tail);
 80012c6:	2304      	movs	r3, #4
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	4a07      	ldr	r2, [pc, #28]	@ (80012ec <Dacai_Send+0xf8>)
 80012ce:	4908      	ldr	r1, [pc, #32]	@ (80012f0 <Dacai_Send+0xfc>)
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fe9b 	bl	800100c <frame_send>
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012e0:	b004      	add	sp, #16
 80012e2:	4770      	bx	lr
 80012e4:	20000318 	.word	0x20000318
 80012e8:	20000399 	.word	0x20000399
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000004 	.word	0x20000004

080012f4 <PConectRceive>:
  * @brief	Temporary transfer storage of computer communication data
  * @param	Null
  * @retval	Null
  */
void PConectRceive(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	if(HEAD_VERIFICATION(pc_head))
 80012fa:	2102      	movs	r1, #2
 80012fc:	4818      	ldr	r0, [pc, #96]	@ (8001360 <PConectRceive+0x6c>)
 80012fe:	f7ff ff27 	bl	8001150 <head_verification>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d026      	beq.n	8001356 <PConectRceive+0x62>
	{
		if(TIAL_VERIFICATION(pc_tail))
 8001308:	2102      	movs	r1, #2
 800130a:	4816      	ldr	r0, [pc, #88]	@ (8001364 <PConectRceive+0x70>)
 800130c:	f7ff ff46 	bl	800119c <tail_verification>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d01f      	beq.n	8001356 <PConectRceive+0x62>
		{
			PConectTypeDef* pstruct = (PConectTypeDef*)&rx_buffer[sizeof(pc_head)];
 8001316:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <PConectRceive+0x74>)
 8001318:	607b      	str	r3, [r7, #4]
			PConnect.mode = pstruct->mode;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	4b13      	ldr	r3, [pc, #76]	@ (800136c <PConectRceive+0x78>)
 8001320:	701a      	strb	r2, [r3, #0]
			PConnect.data_len = pstruct->data_len;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	785a      	ldrb	r2, [r3, #1]
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <PConectRceive+0x78>)
 8001328:	705a      	strb	r2, [r3, #1]
			PConnect.addr = pstruct->addr;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	885a      	ldrh	r2, [r3, #2]
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <PConectRceive+0x78>)
 8001330:	805a      	strh	r2, [r3, #2]
			PConnect.addr_num = pstruct->addr_num;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	889a      	ldrh	r2, [r3, #4]
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <PConectRceive+0x78>)
 8001338:	809a      	strh	r2, [r3, #4]
			PConnect.crc16 = pstruct->crc16;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	88da      	ldrh	r2, [r3, #6]
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <PConectRceive+0x78>)
 8001340:	80da      	strh	r2, [r3, #6]

			if(pstruct->addr < 12){PConnect.addr = 0;PConnect.addr_num = 12;}
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	885b      	ldrh	r3, [r3, #2]
 8001346:	2b0b      	cmp	r3, #11
 8001348:	d805      	bhi.n	8001356 <PConectRceive+0x62>
 800134a:	4b08      	ldr	r3, [pc, #32]	@ (800136c <PConectRceive+0x78>)
 800134c:	2200      	movs	r2, #0
 800134e:	805a      	strh	r2, [r3, #2]
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <PConectRceive+0x78>)
 8001352:	220c      	movs	r2, #12
 8001354:	809a      	strh	r2, [r3, #4]
		}
	}
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000000c 	.word	0x2000000c
 8001364:	20000010 	.word	0x20000010
 8001368:	2000029a 	.word	0x2000029a
 800136c:	2000039c 	.word	0x2000039c

08001370 <PConectSend>:
  * @brief	Send the required data according to the received command of the host computer
  * @param	Null
  * @retval	Null
  */
void PConectSend(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af02      	add	r7, sp, #8
	uint16_t i,crc16;

	tx_buffer[0] = 0x81;
 8001376:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <PConectSend+0x90>)
 8001378:	2281      	movs	r2, #129	@ 0x81
 800137a:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = (PConnect.addr_num + 1+1+2+2);
 800137c:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <PConectSend+0x94>)
 800137e:	889b      	ldrh	r3, [r3, #4]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	3306      	adds	r3, #6
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <PConectSend+0x90>)
 8001388:	705a      	strb	r2, [r3, #1]
//	tx_buffer[2] = (PConnect.addr&0x00FF);
//	tx_buffer[3] = (PConnect.addr&0xFF00)>>8;
	*(uint16_t*)&tx_buffer[2] = PConnect.addr;
 800138a:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <PConectSend+0x98>)
 800138c:	4a1d      	ldr	r2, [pc, #116]	@ (8001404 <PConectSend+0x94>)
 800138e:	8852      	ldrh	r2, [r2, #2]
 8001390:	801a      	strh	r2, [r3, #0]


	for(i = 0;i < PConnect.addr_num;i++)
 8001392:	2300      	movs	r3, #0
 8001394:	80fb      	strh	r3, [r7, #6]
 8001396:	e00c      	b.n	80013b2 <PConectSend+0x42>
	{
		AT24Read(PConnect.addr+i,&tx_buffer[4],i);
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <PConectSend+0x94>)
 800139a:	885b      	ldrh	r3, [r3, #2]
 800139c:	461a      	mov	r2, r3
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	4413      	add	r3, r2
 80013a2:	88fa      	ldrh	r2, [r7, #6]
 80013a4:	4919      	ldr	r1, [pc, #100]	@ (800140c <PConectSend+0x9c>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fe12 	bl	8000fd0 <AT24Read>
	for(i = 0;i < PConnect.addr_num;i++)
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	3301      	adds	r3, #1
 80013b0:	80fb      	strh	r3, [r7, #6]
 80013b2:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <PConectSend+0x94>)
 80013b4:	889b      	ldrh	r3, [r3, #4]
 80013b6:	88fa      	ldrh	r2, [r7, #6]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3ed      	bcc.n	8001398 <PConectSend+0x28>
	}

	tx_num = tx_buffer[1];
 80013bc:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <PConectSend+0x90>)
 80013be:	785a      	ldrb	r2, [r3, #1]
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <PConectSend+0xa0>)
 80013c2:	701a      	strb	r2, [r3, #0]
	crc16 = ModBusCRC16(tx_buffer,tx_num-sizeof(crc16));
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <PConectSend+0xa0>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	3b02      	subs	r3, #2
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4619      	mov	r1, r3
 80013ce:	480c      	ldr	r0, [pc, #48]	@ (8001400 <PConectSend+0x90>)
 80013d0:	f000 f941 	bl	8001656 <ModBusCRC16>
 80013d4:	4603      	mov	r3, r0
 80013d6:	80bb      	strh	r3, [r7, #4]
	memcpy(&tx_buffer[tx_num-sizeof(crc16)],(uint8_t*)&crc16,sizeof(crc16));
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <PConectSend+0xa0>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	3b02      	subs	r3, #2
 80013de:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <PConectSend+0x90>)
 80013e0:	4413      	add	r3, r2
 80013e2:	88ba      	ldrh	r2, [r7, #4]
 80013e4:	801a      	strh	r2, [r3, #0]

	FRAME_SEND(UART,pc_head,pc_tail);
 80013e6:	2302      	movs	r3, #2
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2302      	movs	r3, #2
 80013ec:	4a09      	ldr	r2, [pc, #36]	@ (8001414 <PConectSend+0xa4>)
 80013ee:	490a      	ldr	r1, [pc, #40]	@ (8001418 <PConectSend+0xa8>)
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff fe0b 	bl	800100c <frame_send>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000318 	.word	0x20000318
 8001404:	2000039c 	.word	0x2000039c
 8001408:	2000031a 	.word	0x2000031a
 800140c:	2000031c 	.word	0x2000031c
 8001410:	20000399 	.word	0x20000399
 8001414:	20000010 	.word	0x20000010
 8001418:	2000000c 	.word	0x2000000c

0800141c <PConectProcess>:
  * @brief	Test
  * @param	Null
  * @retval	Null
  */
void PConectProcess(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	if(rx_num == 0)return;
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <PConectProcess+0x1c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d004      	beq.n	8001432 <PConectProcess+0x16>
	PConectRceive();
 8001428:	f7ff ff64 	bl	80012f4 <PConectRceive>
	PConectSend();
 800142c:	f7ff ffa0 	bl	8001370 <PConectSend>
 8001430:	e000      	b.n	8001434 <PConectProcess+0x18>
	if(rx_num == 0)return;
 8001432:	bf00      	nop
}
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000398 	.word	0x20000398
 800143c:	00000000 	.word	0x00000000

08001440 <DDSend>:
  * @brief	Null
  * @param	Null
  * @retval	Null
  */
void DDSend(uint8_t enable,uint32_t frequecy,uint8_t channel, float phase)
{
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b08a      	sub	sp, #40	@ 0x28
 8001444:	af02      	add	r7, sp, #8
 8001446:	4603      	mov	r3, r0
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	ed87 0a01 	vstr	s0, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	4613      	mov	r3, r2
 8001452:	73bb      	strb	r3, [r7, #14]
	uint16_t i;
	uint8_t checksum;

    uint32_t frequecy_out = (frequecy * 4294967296UL / 50000000UL);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2200      	movs	r2, #0
 8001458:	461c      	mov	r4, r3
 800145a:	4615      	mov	r5, r2
 800145c:	f04f 0000 	mov.w	r0, #0
 8001460:	f04f 0100 	mov.w	r1, #0
 8001464:	0021      	movs	r1, r4
 8001466:	2000      	movs	r0, #0
 8001468:	a34e      	add	r3, pc, #312	@ (adr r3, 80015a4 <DDSend+0x164>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7fe feff 	bl	8000270 <__aeabi_uldivmod>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4613      	mov	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]

	tx_buffer[0] = 0xA5;
 800147a:	4b43      	ldr	r3, [pc, #268]	@ (8001588 <DDSend+0x148>)
 800147c:	22a5      	movs	r2, #165	@ 0xa5
 800147e:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = 0x12 - enable;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	f1c3 0312 	rsb	r3, r3, #18
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b3f      	ldr	r3, [pc, #252]	@ (8001588 <DDSend+0x148>)
 800148a:	705a      	strb	r2, [r3, #1]
	*(uint32_t*)&tx_buffer[2] = CharReverse32((uint32_t)frequecy_out);
 800148c:	4c3f      	ldr	r4, [pc, #252]	@ (800158c <DDSend+0x14c>)
 800148e:	69b8      	ldr	r0, [r7, #24]
 8001490:	f000 f8b3 	bl	80015fa <CharReverse32>
 8001494:	4603      	mov	r3, r0
 8001496:	6023      	str	r3, [r4, #0]
	tx_buffer[6] = channel * 16 + 1;
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b39      	ldr	r3, [pc, #228]	@ (8001588 <DDSend+0x148>)
 80014a4:	719a      	strb	r2, [r3, #6]




    if((int16_t)phase == phase)//Warning: Negative phase is not considered, and optimization is required in the future
 80014a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ae:	ee17 3a90 	vmov	r3, s15
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80014c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	d10e      	bne.n	80014e8 <DDSend+0xa8>
    {
        phase = ((int16_t)phase)*2;
 80014ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d2:	ee17 3a90 	vmov	r3, s15
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	ee07 3a90 	vmov	s15, r3
 80014de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80014e6:	e00e      	b.n	8001506 <DDSend+0xc6>
    }else{
        phase = ((int16_t)phase)*2 + 1;
 80014e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f0:	ee17 3a90 	vmov	r3, s15
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	3301      	adds	r3, #1
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001502:	edc7 7a01 	vstr	s15, [r7, #4]
    }

	*(uint16_t*)&tx_buffer[7] = CharReverse16(phase);
 8001506:	edd7 7a01 	vldr	s15, [r7, #4]
 800150a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800150e:	ee17 3a90 	vmov	r3, s15
 8001512:	b29b      	uxth	r3, r3
 8001514:	4c1e      	ldr	r4, [pc, #120]	@ (8001590 <DDSend+0x150>)
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f888 	bl	800162c <CharReverse16>
 800151c:	4603      	mov	r3, r0
 800151e:	8023      	strh	r3, [r4, #0]


	tx_num = 1 + 1 + 4 + 1 + 2 + 1;
 8001520:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <DDSend+0x154>)
 8001522:	220a      	movs	r2, #10
 8001524:	701a      	strb	r2, [r3, #0]
	checksum = CheckSum8(tx_buffer,tx_num-sizeof(checksum));
 8001526:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <DDSend+0x154>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	3b01      	subs	r3, #1
 800152c:	b29b      	uxth	r3, r3
 800152e:	4619      	mov	r1, r3
 8001530:	4815      	ldr	r0, [pc, #84]	@ (8001588 <DDSend+0x148>)
 8001532:	f000 f8cf 	bl	80016d4 <CheckSum8>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]
	memcpy(&tx_buffer[tx_num-sizeof(checksum)],(uint8_t*)&checksum,sizeof(checksum));
 800153a:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <DDSend+0x154>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	3b01      	subs	r3, #1
 8001540:	4a11      	ldr	r2, [pc, #68]	@ (8001588 <DDSend+0x148>)
 8001542:	4413      	add	r3, r2
 8001544:	7dfa      	ldrb	r2, [r7, #23]
 8001546:	701a      	strb	r2, [r3, #0]

	for(i = 0;i < tx_num;i++)
 8001548:	2300      	movs	r3, #0
 800154a:	83fb      	strh	r3, [r7, #30]
 800154c:	e009      	b.n	8001562 <DDSend+0x122>
	{
		printf("0x%2x \r\n",tx_buffer[i]);
 800154e:	8bfb      	ldrh	r3, [r7, #30]
 8001550:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <DDSend+0x148>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	4619      	mov	r1, r3
 8001556:	4810      	ldr	r0, [pc, #64]	@ (8001598 <DDSend+0x158>)
 8001558:	f003 fe66 	bl	8005228 <iprintf>
	for(i = 0;i < tx_num;i++)
 800155c:	8bfb      	ldrh	r3, [r7, #30]
 800155e:	3301      	adds	r3, #1
 8001560:	83fb      	strh	r3, [r7, #30]
 8001562:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <DDSend+0x154>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	8bfb      	ldrh	r3, [r7, #30]
 800156a:	4293      	cmp	r3, r2
 800156c:	d3ef      	bcc.n	800154e <DDSend+0x10e>
	}

	FRAME_SEND(SPI,dds_head,dds_tail);
 800156e:	2300      	movs	r3, #0
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2300      	movs	r3, #0
 8001574:	4a09      	ldr	r2, [pc, #36]	@ (800159c <DDSend+0x15c>)
 8001576:	490a      	ldr	r1, [pc, #40]	@ (80015a0 <DDSend+0x160>)
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff fd47 	bl	800100c <frame_send>
}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bdb0      	pop	{r4, r5, r7, pc}
 8001586:	bf00      	nop
 8001588:	20000318 	.word	0x20000318
 800158c:	2000031a 	.word	0x2000031a
 8001590:	2000031f 	.word	0x2000031f
 8001594:	20000399 	.word	0x20000399
 8001598:	08005f3c 	.word	0x08005f3c
 800159c:	2000039c 	.word	0x2000039c
 80015a0:	2000039c 	.word	0x2000039c
 80015a4:	02faf080 	.word	0x02faf080
 80015a8:	00000000 	.word	0x00000000

080015ac <BitReverse16>:
    }
    return revers;
}

uint16_t BitReverse16(uint16_t data)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
	uint16_t revers = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 16; i++) {
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	e012      	b.n	80015e6 <BitReverse16+0x3a>
    	revers = revers << 1;
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	81fb      	strh	r3, [r7, #14]
    	revers = revers | (data & 0x0001);
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	81fb      	strh	r3, [r7, #14]
        data >>= 1;
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < 16; i++) {
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	3301      	adds	r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	dde9      	ble.n	80015c0 <BitReverse16+0x14>
    }
    return revers;
 80015ec:	89fb      	ldrh	r3, [r7, #14]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <CharReverse32>:

uint32_t CharReverse32 (uint32_t data)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
	return ((data & 0x000000ff) << 24 | (data & 0x0000ff00) << 8 | (data & 0x00ff0000) >> 8 | (data & 0xff000000) >> 24);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	061a      	lsls	r2, r3, #24
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	0e1b      	lsrs	r3, r3, #24
 800161e:	4313      	orrs	r3, r2
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <CharReverse16>:

uint16_t CharReverse16 (uint16_t data)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
	return (data & 0x00ff) << 8 | (data & 0xff00) >> 8;
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	b29b      	uxth	r3, r3
 8001642:	b21b      	sxth	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b21b      	sxth	r3, r3
 8001648:	b29b      	uxth	r3, r3
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <ModBusCRC16>:
  return CRC32 ^ 0xFFFFFFFF;
}


uint16_t ModBusCRC16(uint8_t *data, uint16_t len)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	807b      	strh	r3, [r7, #2]
    uint16_t CRC16 = 0xFFFF;
 8001662:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001666:	82fb      	strh	r3, [r7, #22]
    uint16_t POLY = BitReverse16(0x8005);
 8001668:	f248 0005 	movw	r0, #32773	@ 0x8005
 800166c:	f7ff ff9e 	bl	80015ac <BitReverse16>
 8001670:	4603      	mov	r3, r0
 8001672:	817b      	strh	r3, [r7, #10]

    for (int i = 0; i < len; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	e023      	b.n	80016c2 <ModBusCRC16+0x6c>
    {
        CRC16 = CRC16 ^ (data[i]);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	8afb      	ldrh	r3, [r7, #22]
 8001686:	4053      	eors	r3, r2
 8001688:	82fb      	strh	r3, [r7, #22]

        for (int j = 0; j < 8; j++)
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	e012      	b.n	80016b6 <ModBusCRC16+0x60>
        {
            if (CRC16 & 0x0001)
 8001690:	8afb      	ldrh	r3, [r7, #22]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <ModBusCRC16+0x54>
            {
                CRC16 = CRC16 >> 1;
 800169a:	8afb      	ldrh	r3, [r7, #22]
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	82fb      	strh	r3, [r7, #22]
                CRC16 = CRC16 ^ POLY;
 80016a0:	8afa      	ldrh	r2, [r7, #22]
 80016a2:	897b      	ldrh	r3, [r7, #10]
 80016a4:	4053      	eors	r3, r2
 80016a6:	82fb      	strh	r3, [r7, #22]
 80016a8:	e002      	b.n	80016b0 <ModBusCRC16+0x5a>
            }else{
				CRC16 = CRC16 >> 1;
 80016aa:	8afb      	ldrh	r3, [r7, #22]
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; j++)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3301      	adds	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b07      	cmp	r3, #7
 80016ba:	dde9      	ble.n	8001690 <ModBusCRC16+0x3a>
    for (int i = 0; i < len; i++)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	3301      	adds	r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	dbd7      	blt.n	800167a <ModBusCRC16+0x24>
			}
        }
    }

    return CRC16;
 80016ca:	8afb      	ldrh	r3, [r7, #22]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <CheckSum8>:


uint8_t CheckSum8(uint8_t *data, uint16_t len)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
    uint32_t SUM = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < len; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	e00a      	b.n	8001700 <CheckSum8+0x2c>
    {
    	SUM = SUM + data[i];
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < len; i++)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	3301      	adds	r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbf0      	blt.n	80016ea <CheckSum8+0x16>
    }

    return SUM & 0x000000FF;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	b2db      	uxtb	r3, r3
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <HAL_Init+0x40>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_Init+0x40>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <HAL_Init+0x40>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f94f 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	200f      	movs	r0, #15
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff f9aa 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f967 	bl	8001a4e <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 f92f 	bl	80019fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	@ (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000018 	.word	0x20000018
 80017b8:	20000014 	.word	0x20000014

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	@ (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000018 	.word	0x20000018
 80017e0:	200003a4 	.word	0x200003a4

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	200003a4 	.word	0x200003a4

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d005      	beq.n	8001822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <HAL_Delay+0x44>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001822:	bf00      	nop
 8001824:	f7ff ffde 	bl	80017e4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	d8f7      	bhi.n	8001824 <HAL_Delay+0x28>
  {
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000018 	.word	0x20000018

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800186c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4907      	ldr	r1, [pc, #28]	@ (80018e0 <__NVIC_EnableIRQ+0x38>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	@ (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	@ (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	@ 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	@ (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	210f      	movs	r1, #15
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f7ff ff8e 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff29 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a0c:	f7ff ff3e 	bl	800188c <__NVIC_GetPriorityGrouping>
 8001a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff ff8e 	bl	8001938 <NVIC_EncodePriority>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff5d 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff31 	bl	80018a8 <__NVIC_EnableIRQ>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffa2 	bl	80019a0 <SysTick_Config>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff feb6 	bl	80017e4 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e099      	b.n	8001bb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa4:	e00f      	b.n	8001ac6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aa6:	f7ff fe9d 	bl	80017e4 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b05      	cmp	r3, #5
 8001ab2:	d908      	bls.n	8001ac6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2203      	movs	r2, #3
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e078      	b.n	8001bb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e8      	bne.n	8001aa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <HAL_DMA_Init+0x158>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d107      	bne.n	8001b30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f023 0307 	bic.w	r3, r3, #7
 8001b46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d117      	bne.n	8001b8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00e      	beq.n	8001b8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fb01 	bl	8002174 <DMA_CheckFifoParam>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2240      	movs	r2, #64	@ 0x40
 8001b7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b86:	2301      	movs	r3, #1
 8001b88:	e016      	b.n	8001bb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fab8 	bl	8002108 <DMA_CalcBaseAndBitshift>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba0:	223f      	movs	r2, #63	@ 0x3f
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	f010803f 	.word	0xf010803f

08001bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_DMA_Start_IT+0x26>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e040      	b.n	8001c6c <HAL_DMA_Start_IT+0xa8>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d12f      	bne.n	8001c5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2202      	movs	r2, #2
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 fa4a 	bl	80020ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	223f      	movs	r2, #63	@ 0x3f
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0216 	orr.w	r2, r2, #22
 8001c32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0208 	orr.w	r2, r2, #8
 8001c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e005      	b.n	8001c6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c66:	2302      	movs	r3, #2
 8001c68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c82:	f7ff fdaf 	bl	80017e4 <HAL_GetTick>
 8001c86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d008      	beq.n	8001ca6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2280      	movs	r2, #128	@ 0x80
 8001c98:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e052      	b.n	8001d4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0216 	bic.w	r2, r2, #22
 8001cb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d103      	bne.n	8001cd6 <HAL_DMA_Abort+0x62>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0208 	bic.w	r2, r2, #8
 8001ce4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0201 	bic.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf6:	e013      	b.n	8001d20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf8:	f7ff fd74 	bl	80017e4 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d90c      	bls.n	8001d20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2203      	movs	r2, #3
 8001d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e015      	b.n	8001d4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1e4      	bne.n	8001cf8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d32:	223f      	movs	r2, #63	@ 0x3f
 8001d34:	409a      	lsls	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d004      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2280      	movs	r2, #128	@ 0x80
 8001d6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00c      	b.n	8001d8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2205      	movs	r2, #5
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001da4:	4b8e      	ldr	r3, [pc, #568]	@ (8001fe0 <HAL_DMA_IRQHandler+0x248>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a8e      	ldr	r2, [pc, #568]	@ (8001fe4 <HAL_DMA_IRQHandler+0x24c>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0a9b      	lsrs	r3, r3, #10
 8001db0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01a      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0204 	bic.w	r2, r2, #4
 8001dea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df0:	2208      	movs	r2, #8
 8001df2:	409a      	lsls	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e08:	2201      	movs	r2, #1
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d012      	beq.n	8001e3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e26:	2201      	movs	r2, #1
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3e:	2204      	movs	r2, #4
 8001e40:	409a      	lsls	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d012      	beq.n	8001e70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e68:	f043 0204 	orr.w	r2, r3, #4
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e74:	2210      	movs	r2, #16
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d043      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d03c      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e92:	2210      	movs	r2, #16
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d018      	beq.n	8001eda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d108      	bne.n	8001ec8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d024      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
 8001ec6:	e01f      	b.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01b      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
 8001ed8:	e016      	b.n	8001f08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
 8001ef6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 808f 	beq.w	8002038 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8087 	beq.w	8002038 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2e:	2220      	movs	r2, #32
 8001f30:	409a      	lsls	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d136      	bne.n	8001fb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0216 	bic.w	r2, r2, #22
 8001f50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <HAL_DMA_IRQHandler+0x1da>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0208 	bic.w	r2, r2, #8
 8001f80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f86:	223f      	movs	r2, #63	@ 0x3f
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d07e      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
        }
        return;
 8001fae:	e079      	b.n	80020a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01d      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d031      	beq.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
 8001fdc:	e02c      	b.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
 8001fde:	bf00      	nop
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d023      	beq.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
 8001ff8:	e01e      	b.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10f      	bne.n	8002028 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0210 	bic.w	r2, r2, #16
 8002016:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203c:	2b00      	cmp	r3, #0
 800203e:	d032      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d022      	beq.n	8002092 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2205      	movs	r2, #5
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	3301      	adds	r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	d307      	bcc.n	8002080 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f2      	bne.n	8002064 <HAL_DMA_IRQHandler+0x2cc>
 800207e:	e000      	b.n	8002082 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002080:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
 80020a2:	e000      	b.n	80020a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020a4:	bf00      	nop
    }
  }
}
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b40      	cmp	r3, #64	@ 0x40
 80020d8:	d108      	bne.n	80020ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020ea:	e007      	b.n	80020fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	60da      	str	r2, [r3, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	3b10      	subs	r3, #16
 8002118:	4a14      	ldr	r2, [pc, #80]	@ (800216c <DMA_CalcBaseAndBitshift+0x64>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002122:	4a13      	ldr	r2, [pc, #76]	@ (8002170 <DMA_CalcBaseAndBitshift+0x68>)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d909      	bls.n	800214a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800213e:	f023 0303 	bic.w	r3, r3, #3
 8002142:	1d1a      	adds	r2, r3, #4
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	659a      	str	r2, [r3, #88]	@ 0x58
 8002148:	e007      	b.n	800215a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	aaaaaaab 	.word	0xaaaaaaab
 8002170:	08005f60 	.word	0x08005f60

08002174 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002184:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d11f      	bne.n	80021ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d856      	bhi.n	8002242 <DMA_CheckFifoParam+0xce>
 8002194:	a201      	add	r2, pc, #4	@ (adr r2, 800219c <DMA_CheckFifoParam+0x28>)
 8002196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219a:	bf00      	nop
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	080021bf 	.word	0x080021bf
 80021a4:	080021ad 	.word	0x080021ad
 80021a8:	08002243 	.word	0x08002243
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d046      	beq.n	8002246 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021bc:	e043      	b.n	8002246 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021c6:	d140      	bne.n	800224a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021cc:	e03d      	b.n	800224a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021d6:	d121      	bne.n	800221c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d837      	bhi.n	800224e <DMA_CheckFifoParam+0xda>
 80021de:	a201      	add	r2, pc, #4	@ (adr r2, 80021e4 <DMA_CheckFifoParam+0x70>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	080021fb 	.word	0x080021fb
 80021ec:	080021f5 	.word	0x080021f5
 80021f0:	0800220d 	.word	0x0800220d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      break;
 80021f8:	e030      	b.n	800225c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d025      	beq.n	8002252 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220a:	e022      	b.n	8002252 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002214:	d11f      	bne.n	8002256 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800221a:	e01c      	b.n	8002256 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d903      	bls.n	800222a <DMA_CheckFifoParam+0xb6>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d003      	beq.n	8002230 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002228:	e018      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
      break;
 800222e:	e015      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002234:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00e      	beq.n	800225a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
      break;
 8002240:	e00b      	b.n	800225a <DMA_CheckFifoParam+0xe6>
      break;
 8002242:	bf00      	nop
 8002244:	e00a      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
 8002248:	e008      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 800224a:	bf00      	nop
 800224c:	e006      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 800224e:	bf00      	nop
 8002250:	e004      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 8002252:	bf00      	nop
 8002254:	e002      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;   
 8002256:	bf00      	nop
 8002258:	e000      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 800225a:	bf00      	nop
    }
  } 
  
  return status; 
 800225c:	7bfb      	ldrb	r3, [r7, #15]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	e16b      	b.n	8002560 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002288:	2201      	movs	r2, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f040 815a 	bne.w	800255a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d005      	beq.n	80022be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d130      	bne.n	8002320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f4:	2201      	movs	r2, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 0201 	and.w	r2, r3, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b03      	cmp	r3, #3
 800232a:	d017      	beq.n	800235c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d123      	bne.n	80023b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	69b9      	ldr	r1, [r7, #24]
 80023ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0203 	and.w	r2, r3, #3
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80b4 	beq.w	800255a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b60      	ldr	r3, [pc, #384]	@ (8002578 <HAL_GPIO_Init+0x30c>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fa:	4a5f      	ldr	r2, [pc, #380]	@ (8002578 <HAL_GPIO_Init+0x30c>)
 80023fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002400:	6453      	str	r3, [r2, #68]	@ 0x44
 8002402:	4b5d      	ldr	r3, [pc, #372]	@ (8002578 <HAL_GPIO_Init+0x30c>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240e:	4a5b      	ldr	r2, [pc, #364]	@ (800257c <HAL_GPIO_Init+0x310>)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a52      	ldr	r2, [pc, #328]	@ (8002580 <HAL_GPIO_Init+0x314>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d02b      	beq.n	8002492 <HAL_GPIO_Init+0x226>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a51      	ldr	r2, [pc, #324]	@ (8002584 <HAL_GPIO_Init+0x318>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d025      	beq.n	800248e <HAL_GPIO_Init+0x222>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a50      	ldr	r2, [pc, #320]	@ (8002588 <HAL_GPIO_Init+0x31c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01f      	beq.n	800248a <HAL_GPIO_Init+0x21e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4f      	ldr	r2, [pc, #316]	@ (800258c <HAL_GPIO_Init+0x320>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d019      	beq.n	8002486 <HAL_GPIO_Init+0x21a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4e      	ldr	r2, [pc, #312]	@ (8002590 <HAL_GPIO_Init+0x324>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <HAL_GPIO_Init+0x216>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4d      	ldr	r2, [pc, #308]	@ (8002594 <HAL_GPIO_Init+0x328>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00d      	beq.n	800247e <HAL_GPIO_Init+0x212>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4c      	ldr	r2, [pc, #304]	@ (8002598 <HAL_GPIO_Init+0x32c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d007      	beq.n	800247a <HAL_GPIO_Init+0x20e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4b      	ldr	r2, [pc, #300]	@ (800259c <HAL_GPIO_Init+0x330>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_GPIO_Init+0x20a>
 8002472:	2307      	movs	r3, #7
 8002474:	e00e      	b.n	8002494 <HAL_GPIO_Init+0x228>
 8002476:	2308      	movs	r3, #8
 8002478:	e00c      	b.n	8002494 <HAL_GPIO_Init+0x228>
 800247a:	2306      	movs	r3, #6
 800247c:	e00a      	b.n	8002494 <HAL_GPIO_Init+0x228>
 800247e:	2305      	movs	r3, #5
 8002480:	e008      	b.n	8002494 <HAL_GPIO_Init+0x228>
 8002482:	2304      	movs	r3, #4
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x228>
 8002486:	2303      	movs	r3, #3
 8002488:	e004      	b.n	8002494 <HAL_GPIO_Init+0x228>
 800248a:	2302      	movs	r3, #2
 800248c:	e002      	b.n	8002494 <HAL_GPIO_Init+0x228>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_GPIO_Init+0x228>
 8002492:	2300      	movs	r3, #0
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	f002 0203 	and.w	r2, r2, #3
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	4093      	lsls	r3, r2
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a4:	4935      	ldr	r1, [pc, #212]	@ (800257c <HAL_GPIO_Init+0x310>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b2:	4b3b      	ldr	r3, [pc, #236]	@ (80025a0 <HAL_GPIO_Init+0x334>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d6:	4a32      	ldr	r2, [pc, #200]	@ (80025a0 <HAL_GPIO_Init+0x334>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024dc:	4b30      	ldr	r3, [pc, #192]	@ (80025a0 <HAL_GPIO_Init+0x334>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002500:	4a27      	ldr	r2, [pc, #156]	@ (80025a0 <HAL_GPIO_Init+0x334>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002506:	4b26      	ldr	r3, [pc, #152]	@ (80025a0 <HAL_GPIO_Init+0x334>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800252a:	4a1d      	ldr	r2, [pc, #116]	@ (80025a0 <HAL_GPIO_Init+0x334>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002530:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <HAL_GPIO_Init+0x334>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002554:	4a12      	ldr	r2, [pc, #72]	@ (80025a0 <HAL_GPIO_Init+0x334>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3301      	adds	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b0f      	cmp	r3, #15
 8002564:	f67f ae90 	bls.w	8002288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3724      	adds	r7, #36	@ 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	40013800 	.word	0x40013800
 8002580:	40020000 	.word	0x40020000
 8002584:	40020400 	.word	0x40020400
 8002588:	40020800 	.word	0x40020800
 800258c:	40020c00 	.word	0x40020c00
 8002590:	40021000 	.word	0x40021000
 8002594:	40021400 	.word	0x40021400
 8002598:	40021800 	.word	0x40021800
 800259c:	40021c00 	.word	0x40021c00
 80025a0:	40013c00 	.word	0x40013c00

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025c0:	e003      	b.n	80025ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	041a      	lsls	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	619a      	str	r2, [r3, #24]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025e8:	887a      	ldrh	r2, [r7, #2]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	041a      	lsls	r2, r3, #16
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	400b      	ands	r3, r1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	619a      	str	r2, [r3, #24]
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e12b      	b.n	8002876 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe f858 	bl	80006e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	@ 0x24
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800265e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800266e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002670:	f001 fa48 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 8002674:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4a81      	ldr	r2, [pc, #516]	@ (8002880 <HAL_I2C_Init+0x274>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d807      	bhi.n	8002690 <HAL_I2C_Init+0x84>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a80      	ldr	r2, [pc, #512]	@ (8002884 <HAL_I2C_Init+0x278>)
 8002684:	4293      	cmp	r3, r2
 8002686:	bf94      	ite	ls
 8002688:	2301      	movls	r3, #1
 800268a:	2300      	movhi	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	e006      	b.n	800269e <HAL_I2C_Init+0x92>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a7d      	ldr	r2, [pc, #500]	@ (8002888 <HAL_I2C_Init+0x27c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	bf94      	ite	ls
 8002698:	2301      	movls	r3, #1
 800269a:	2300      	movhi	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0e7      	b.n	8002876 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4a78      	ldr	r2, [pc, #480]	@ (800288c <HAL_I2C_Init+0x280>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	0c9b      	lsrs	r3, r3, #18
 80026b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002880 <HAL_I2C_Init+0x274>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d802      	bhi.n	80026e0 <HAL_I2C_Init+0xd4>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	3301      	adds	r3, #1
 80026de:	e009      	b.n	80026f4 <HAL_I2C_Init+0xe8>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	4a69      	ldr	r2, [pc, #420]	@ (8002890 <HAL_I2C_Init+0x284>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	099b      	lsrs	r3, r3, #6
 80026f2:	3301      	adds	r3, #1
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	430b      	orrs	r3, r1
 80026fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002706:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	495c      	ldr	r1, [pc, #368]	@ (8002880 <HAL_I2C_Init+0x274>)
 8002710:	428b      	cmp	r3, r1
 8002712:	d819      	bhi.n	8002748 <HAL_I2C_Init+0x13c>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1e59      	subs	r1, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002722:	1c59      	adds	r1, r3, #1
 8002724:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002728:	400b      	ands	r3, r1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_I2C_Init+0x138>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1e59      	subs	r1, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fbb1 f3f3 	udiv	r3, r1, r3
 800273c:	3301      	adds	r3, #1
 800273e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002742:	e051      	b.n	80027e8 <HAL_I2C_Init+0x1dc>
 8002744:	2304      	movs	r3, #4
 8002746:	e04f      	b.n	80027e8 <HAL_I2C_Init+0x1dc>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d111      	bne.n	8002774 <HAL_I2C_Init+0x168>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1e58      	subs	r0, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	440b      	add	r3, r1
 800275e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002762:	3301      	adds	r3, #1
 8002764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	e012      	b.n	800279a <HAL_I2C_Init+0x18e>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1e58      	subs	r0, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	0099      	lsls	r1, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	fbb0 f3f3 	udiv	r3, r0, r3
 800278a:	3301      	adds	r3, #1
 800278c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Init+0x196>
 800279e:	2301      	movs	r3, #1
 80027a0:	e022      	b.n	80027e8 <HAL_I2C_Init+0x1dc>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10e      	bne.n	80027c8 <HAL_I2C_Init+0x1bc>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1e58      	subs	r0, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6859      	ldr	r1, [r3, #4]
 80027b2:	460b      	mov	r3, r1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	440b      	add	r3, r1
 80027b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027c6:	e00f      	b.n	80027e8 <HAL_I2C_Init+0x1dc>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1e58      	subs	r0, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	0099      	lsls	r1, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	fbb0 f3f3 	udiv	r3, r0, r3
 80027de:	3301      	adds	r3, #1
 80027e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	6809      	ldr	r1, [r1, #0]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002816:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6911      	ldr	r1, [r2, #16]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68d2      	ldr	r2, [r2, #12]
 8002822:	4311      	orrs	r1, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	430b      	orrs	r3, r1
 800282a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	000186a0 	.word	0x000186a0
 8002884:	001e847f 	.word	0x001e847f
 8002888:	003d08ff 	.word	0x003d08ff
 800288c:	431bde83 	.word	0x431bde83
 8002890:	10624dd3 	.word	0x10624dd3

08002894 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	@ 0x30
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	4608      	mov	r0, r1
 800289e:	4611      	mov	r1, r2
 80028a0:	461a      	mov	r2, r3
 80028a2:	4603      	mov	r3, r0
 80028a4:	817b      	strh	r3, [r7, #10]
 80028a6:	460b      	mov	r3, r1
 80028a8:	813b      	strh	r3, [r7, #8]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ae:	f7fe ff99 	bl	80017e4 <HAL_GetTick>
 80028b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b20      	cmp	r3, #32
 80028be:	f040 8214 	bne.w	8002cea <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2319      	movs	r3, #25
 80028c8:	2201      	movs	r2, #1
 80028ca:	497b      	ldr	r1, [pc, #492]	@ (8002ab8 <HAL_I2C_Mem_Read+0x224>)
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fafb 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80028d8:	2302      	movs	r3, #2
 80028da:	e207      	b.n	8002cec <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_I2C_Mem_Read+0x56>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e200      	b.n	8002cec <HAL_I2C_Mem_Read+0x458>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d007      	beq.n	8002910 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800291e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2222      	movs	r2, #34	@ 0x22
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2240      	movs	r2, #64	@ 0x40
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800293a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002940:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4a5b      	ldr	r2, [pc, #364]	@ (8002abc <HAL_I2C_Mem_Read+0x228>)
 8002950:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002952:	88f8      	ldrh	r0, [r7, #6]
 8002954:	893a      	ldrh	r2, [r7, #8]
 8002956:	8979      	ldrh	r1, [r7, #10]
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	4603      	mov	r3, r0
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f9c8 	bl	8002cf8 <I2C_RequestMemoryRead>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e1bc      	b.n	8002cec <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	d113      	bne.n	80029a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	623b      	str	r3, [r7, #32]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	623b      	str	r3, [r7, #32]
 800298e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e190      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d11b      	bne.n	80029e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e170      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d11b      	bne.n	8002a22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	e150      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a38:	e144      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	f200 80f1 	bhi.w	8002c26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d123      	bne.n	8002a94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fb9b 	bl	800318c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e145      	b.n	8002cec <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a92:	e117      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d14e      	bne.n	8002b3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	4906      	ldr	r1, [pc, #24]	@ (8002ac0 <HAL_I2C_Mem_Read+0x22c>)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fa0e 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e11a      	b.n	8002cec <HAL_I2C_Mem_Read+0x458>
 8002ab6:	bf00      	nop
 8002ab8:	00100002 	.word	0x00100002
 8002abc:	ffff0000 	.word	0xffff0000
 8002ac0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b38:	e0c4      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b40:	2200      	movs	r2, #0
 8002b42:	496c      	ldr	r1, [pc, #432]	@ (8002cf4 <HAL_I2C_Mem_Read+0x460>)
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f9bf 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0cb      	b.n	8002cec <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	4955      	ldr	r1, [pc, #340]	@ (8002cf4 <HAL_I2C_Mem_Read+0x460>)
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f991 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e09d      	b.n	8002cec <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c24:	e04e      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 faae 	bl	800318c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e058      	b.n	8002cec <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d124      	bne.n	8002cc4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d107      	bne.n	8002c92 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c90:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f47f aeb6 	bne.w	8002a3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e000      	b.n	8002cec <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
  }
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3728      	adds	r7, #40	@ 0x28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	00010004 	.word	0x00010004

08002cf8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	461a      	mov	r2, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	817b      	strh	r3, [r7, #10]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	813b      	strh	r3, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f8c2 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00d      	beq.n	8002d66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d58:	d103      	bne.n	8002d62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e0aa      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	6a3a      	ldr	r2, [r7, #32]
 8002d7a:	4952      	ldr	r1, [pc, #328]	@ (8002ec4 <I2C_RequestMemoryRead+0x1cc>)
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f91d 	bl	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e097      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f9a8 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d107      	bne.n	8002dca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e076      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd4:	893b      	ldrh	r3, [r7, #8]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	611a      	str	r2, [r3, #16]
 8002dde:	e021      	b.n	8002e24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df0:	6a39      	ldr	r1, [r7, #32]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f982 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00d      	beq.n	8002e1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d107      	bne.n	8002e16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e050      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1a:	893b      	ldrh	r3, [r7, #8]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e26:	6a39      	ldr	r1, [r7, #32]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f967 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d107      	bne.n	8002e4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e035      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f82b 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00d      	beq.n	8002e94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e86:	d103      	bne.n	8002e90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e013      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e94:	897b      	ldrh	r3, [r7, #10]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	6a3a      	ldr	r2, [r7, #32]
 8002ea8:	4906      	ldr	r1, [pc, #24]	@ (8002ec4 <I2C_RequestMemoryRead+0x1cc>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f886 	bl	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	00010002 	.word	0x00010002

08002ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed8:	e048      	b.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d044      	beq.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee2:	f7fe fc7f 	bl	80017e4 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d139      	bne.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	0c1b      	lsrs	r3, r3, #16
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d10d      	bne.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	e00c      	b.n	8002f38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	43da      	mvns	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d116      	bne.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e023      	b.n	8002fb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	0c1b      	lsrs	r3, r3, #16
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d10d      	bne.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4013      	ands	r3, r2
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	e00c      	b.n	8002fac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d093      	beq.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fca:	e071      	b.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fda:	d123      	bne.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ff4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	f043 0204 	orr.w	r2, r3, #4
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e067      	b.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d041      	beq.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302c:	f7fe fbda 	bl	80017e4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	d302      	bcc.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d136      	bne.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10c      	bne.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	e00b      	b.n	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	43da      	mvns	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4013      	ands	r3, r2
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d016      	beq.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e021      	b.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	0c1b      	lsrs	r3, r3, #16
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10c      	bne.n	80030d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	43da      	mvns	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e00b      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f af6d 	bne.w	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003108:	e034      	b.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f89b 	bl	8003246 <I2C_IsAcknowledgeFailed>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e034      	b.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d028      	beq.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7fe fb5f 	bl	80017e4 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d11d      	bne.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003142:	2b80      	cmp	r3, #128	@ 0x80
 8003144:	d016      	beq.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e007      	b.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317e:	2b80      	cmp	r3, #128	@ 0x80
 8003180:	d1c3      	bne.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003198:	e049      	b.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d119      	bne.n	80031dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0210 	mvn.w	r2, #16
 80031b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e030      	b.n	800323e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031dc:	f7fe fb02 	bl	80017e4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d302      	bcc.n	80031f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d11d      	bne.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fc:	2b40      	cmp	r3, #64	@ 0x40
 80031fe:	d016      	beq.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e007      	b.n	800323e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003238:	2b40      	cmp	r3, #64	@ 0x40
 800323a:	d1ae      	bne.n	800319a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325c:	d11b      	bne.n	8003296 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003266:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	f043 0204 	orr.w	r2, r3, #4
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e267      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d075      	beq.n	80033ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032c2:	4b88      	ldr	r3, [pc, #544]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d00c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ce:	4b85      	ldr	r3, [pc, #532]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d112      	bne.n	8003300 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032da:	4b82      	ldr	r3, [pc, #520]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032e6:	d10b      	bne.n	8003300 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	4b7e      	ldr	r3, [pc, #504]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d05b      	beq.n	80033ac <HAL_RCC_OscConfig+0x108>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d157      	bne.n	80033ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e242      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003308:	d106      	bne.n	8003318 <HAL_RCC_OscConfig+0x74>
 800330a:	4b76      	ldr	r3, [pc, #472]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a75      	ldr	r2, [pc, #468]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e01d      	b.n	8003354 <HAL_RCC_OscConfig+0xb0>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003320:	d10c      	bne.n	800333c <HAL_RCC_OscConfig+0x98>
 8003322:	4b70      	ldr	r3, [pc, #448]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6f      	ldr	r2, [pc, #444]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	4b6d      	ldr	r3, [pc, #436]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6c      	ldr	r2, [pc, #432]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	e00b      	b.n	8003354 <HAL_RCC_OscConfig+0xb0>
 800333c:	4b69      	ldr	r3, [pc, #420]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a68      	ldr	r2, [pc, #416]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	4b66      	ldr	r3, [pc, #408]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a65      	ldr	r2, [pc, #404]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 800334e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d013      	beq.n	8003384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7fe fa42 	bl	80017e4 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003364:	f7fe fa3e 	bl	80017e4 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b64      	cmp	r3, #100	@ 0x64
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e207      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003376:	4b5b      	ldr	r3, [pc, #364]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0xc0>
 8003382:	e014      	b.n	80033ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7fe fa2e 	bl	80017e4 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338c:	f7fe fa2a 	bl	80017e4 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	@ 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e1f3      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339e:	4b51      	ldr	r3, [pc, #324]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0xe8>
 80033aa:	e000      	b.n	80033ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d063      	beq.n	8003482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033ba:	4b4a      	ldr	r3, [pc, #296]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c6:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d11c      	bne.n	800340c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d2:	4b44      	ldr	r3, [pc, #272]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d116      	bne.n	800340c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033de:	4b41      	ldr	r3, [pc, #260]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_RCC_OscConfig+0x152>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d001      	beq.n	80033f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e1c7      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f6:	4b3b      	ldr	r3, [pc, #236]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4937      	ldr	r1, [pc, #220]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340a:	e03a      	b.n	8003482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003414:	4b34      	ldr	r3, [pc, #208]	@ (80034e8 <HAL_RCC_OscConfig+0x244>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341a:	f7fe f9e3 	bl	80017e4 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003422:	f7fe f9df 	bl	80017e4 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e1a8      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003434:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003440:	4b28      	ldr	r3, [pc, #160]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4925      	ldr	r1, [pc, #148]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]
 8003454:	e015      	b.n	8003482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003456:	4b24      	ldr	r3, [pc, #144]	@ (80034e8 <HAL_RCC_OscConfig+0x244>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe f9c2 	bl	80017e4 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003464:	f7fe f9be 	bl	80017e4 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e187      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003476:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d036      	beq.n	80034fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d016      	beq.n	80034c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003496:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <HAL_RCC_OscConfig+0x248>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fe f9a2 	bl	80017e4 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a4:	f7fe f99e 	bl	80017e4 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e167      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b6:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80034b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x200>
 80034c2:	e01b      	b.n	80034fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c4:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <HAL_RCC_OscConfig+0x248>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ca:	f7fe f98b 	bl	80017e4 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d0:	e00e      	b.n	80034f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d2:	f7fe f987 	bl	80017e4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d907      	bls.n	80034f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e150      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
 80034e4:	40023800 	.word	0x40023800
 80034e8:	42470000 	.word	0x42470000
 80034ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	4b88      	ldr	r3, [pc, #544]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80034f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ea      	bne.n	80034d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8097 	beq.w	8003638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350e:	4b81      	ldr	r3, [pc, #516]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10f      	bne.n	800353a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	4b7d      	ldr	r3, [pc, #500]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	4a7c      	ldr	r2, [pc, #496]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003528:	6413      	str	r3, [r2, #64]	@ 0x40
 800352a:	4b7a      	ldr	r3, [pc, #488]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353a:	4b77      	ldr	r3, [pc, #476]	@ (8003718 <HAL_RCC_OscConfig+0x474>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d118      	bne.n	8003578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003546:	4b74      	ldr	r3, [pc, #464]	@ (8003718 <HAL_RCC_OscConfig+0x474>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a73      	ldr	r2, [pc, #460]	@ (8003718 <HAL_RCC_OscConfig+0x474>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003552:	f7fe f947 	bl	80017e4 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355a:	f7fe f943 	bl	80017e4 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e10c      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	4b6a      	ldr	r3, [pc, #424]	@ (8003718 <HAL_RCC_OscConfig+0x474>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x2ea>
 8003580:	4b64      	ldr	r3, [pc, #400]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003584:	4a63      	ldr	r2, [pc, #396]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6713      	str	r3, [r2, #112]	@ 0x70
 800358c:	e01c      	b.n	80035c8 <HAL_RCC_OscConfig+0x324>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b05      	cmp	r3, #5
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x30c>
 8003596:	4b5f      	ldr	r3, [pc, #380]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359a:	4a5e      	ldr	r2, [pc, #376]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 800359c:	f043 0304 	orr.w	r3, r3, #4
 80035a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ae:	e00b      	b.n	80035c8 <HAL_RCC_OscConfig+0x324>
 80035b0:	4b58      	ldr	r3, [pc, #352]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b4:	4a57      	ldr	r2, [pc, #348]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035b6:	f023 0301 	bic.w	r3, r3, #1
 80035ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80035bc:	4b55      	ldr	r3, [pc, #340]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c0:	4a54      	ldr	r2, [pc, #336]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035c2:	f023 0304 	bic.w	r3, r3, #4
 80035c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d015      	beq.n	80035fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d0:	f7fe f908 	bl	80017e4 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d8:	f7fe f904 	bl	80017e4 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e0cb      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ee:	4b49      	ldr	r3, [pc, #292]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0ee      	beq.n	80035d8 <HAL_RCC_OscConfig+0x334>
 80035fa:	e014      	b.n	8003626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fc:	f7fe f8f2 	bl	80017e4 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003602:	e00a      	b.n	800361a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003604:	f7fe f8ee 	bl	80017e4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e0b5      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361a:	4b3e      	ldr	r3, [pc, #248]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1ee      	bne.n	8003604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003626:	7dfb      	ldrb	r3, [r7, #23]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362c:	4b39      	ldr	r3, [pc, #228]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	4a38      	ldr	r2, [pc, #224]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003636:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80a1 	beq.w	8003784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003642:	4b34      	ldr	r3, [pc, #208]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b08      	cmp	r3, #8
 800364c:	d05c      	beq.n	8003708 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d141      	bne.n	80036da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003656:	4b31      	ldr	r3, [pc, #196]	@ (800371c <HAL_RCC_OscConfig+0x478>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe f8c2 	bl	80017e4 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe f8be 	bl	80017e4 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e087      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	4b27      	ldr	r3, [pc, #156]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	019b      	lsls	r3, r3, #6
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	3b01      	subs	r3, #1
 800369c:	041b      	lsls	r3, r3, #16
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	491b      	ldr	r1, [pc, #108]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ac:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <HAL_RCC_OscConfig+0x478>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7fe f897 	bl	80017e4 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ba:	f7fe f893 	bl	80017e4 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e05c      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036cc:	4b11      	ldr	r3, [pc, #68]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x416>
 80036d8:	e054      	b.n	8003784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036da:	4b10      	ldr	r3, [pc, #64]	@ (800371c <HAL_RCC_OscConfig+0x478>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fe f880 	bl	80017e4 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fe f87c 	bl	80017e4 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e045      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fa:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x444>
 8003706:	e03d      	b.n	8003784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d107      	bne.n	8003720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e038      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
 8003714:	40023800 	.word	0x40023800
 8003718:	40007000 	.word	0x40007000
 800371c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003720:	4b1b      	ldr	r3, [pc, #108]	@ (8003790 <HAL_RCC_OscConfig+0x4ec>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d028      	beq.n	8003780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003738:	429a      	cmp	r2, r3
 800373a:	d121      	bne.n	8003780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d11a      	bne.n	8003780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003750:	4013      	ands	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003758:	4293      	cmp	r3, r2
 800375a:	d111      	bne.n	8003780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	3b01      	subs	r3, #1
 800376a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800

08003794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0cc      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a8:	4b68      	ldr	r3, [pc, #416]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d90c      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b65      	ldr	r3, [pc, #404]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b63      	ldr	r3, [pc, #396]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0b8      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e8:	4b59      	ldr	r3, [pc, #356]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a58      	ldr	r2, [pc, #352]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003800:	4b53      	ldr	r3, [pc, #332]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a52      	ldr	r2, [pc, #328]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800380a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800380c:	4b50      	ldr	r3, [pc, #320]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	494d      	ldr	r1, [pc, #308]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d044      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b47      	ldr	r3, [pc, #284]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d119      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e07f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d003      	beq.n	8003852 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384e:	2b03      	cmp	r3, #3
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	4b3f      	ldr	r3, [pc, #252]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e06f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003862:	4b3b      	ldr	r3, [pc, #236]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e067      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003872:	4b37      	ldr	r3, [pc, #220]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 0203 	bic.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4934      	ldr	r1, [pc, #208]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003884:	f7fd ffae 	bl	80017e4 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388c:	f7fd ffaa 	bl	80017e4 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e04f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 020c 	and.w	r2, r3, #12
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1eb      	bne.n	800388c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038b4:	4b25      	ldr	r3, [pc, #148]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d20c      	bcs.n	80038dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b22      	ldr	r3, [pc, #136]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ca:	4b20      	ldr	r3, [pc, #128]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e032      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e8:	4b19      	ldr	r3, [pc, #100]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4916      	ldr	r1, [pc, #88]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003906:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	490e      	ldr	r1, [pc, #56]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800391a:	f000 f821 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 800391e:	4602      	mov	r2, r0
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	490a      	ldr	r1, [pc, #40]	@ (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 800392c:	5ccb      	ldrb	r3, [r1, r3]
 800392e:	fa22 f303 	lsr.w	r3, r2, r3
 8003932:	4a09      	ldr	r2, [pc, #36]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003936:	4b09      	ldr	r3, [pc, #36]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd ff0e 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023c00 	.word	0x40023c00
 8003950:	40023800 	.word	0x40023800
 8003954:	08005f48 	.word	0x08005f48
 8003958:	20000000 	.word	0x20000000
 800395c:	20000014 	.word	0x20000014

08003960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b090      	sub	sp, #64	@ 0x40
 8003966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003978:	4b59      	ldr	r3, [pc, #356]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	d00d      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003984:	2b08      	cmp	r3, #8
 8003986:	f200 80a1 	bhi.w	8003acc <HAL_RCC_GetSysClockFreq+0x16c>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x34>
 800398e:	2b04      	cmp	r3, #4
 8003990:	d003      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x3a>
 8003992:	e09b      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003994:	4b53      	ldr	r3, [pc, #332]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003996:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003998:	e09b      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800399a:	4b53      	ldr	r3, [pc, #332]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 800399c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800399e:	e098      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a0:	4b4f      	ldr	r3, [pc, #316]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039aa:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d028      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	099b      	lsrs	r3, r3, #6
 80039bc:	2200      	movs	r2, #0
 80039be:	623b      	str	r3, [r7, #32]
 80039c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039c8:	2100      	movs	r1, #0
 80039ca:	4b47      	ldr	r3, [pc, #284]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039cc:	fb03 f201 	mul.w	r2, r3, r1
 80039d0:	2300      	movs	r3, #0
 80039d2:	fb00 f303 	mul.w	r3, r0, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	4a43      	ldr	r2, [pc, #268]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039da:	fba0 1202 	umull	r1, r2, r0, r2
 80039de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039e0:	460a      	mov	r2, r1
 80039e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039e6:	4413      	add	r3, r2
 80039e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ec:	2200      	movs	r2, #0
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	61fa      	str	r2, [r7, #28]
 80039f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039fa:	f7fc fc39 	bl	8000270 <__aeabi_uldivmod>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4613      	mov	r3, r2
 8003a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a06:	e053      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a08:	4b35      	ldr	r3, [pc, #212]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	2200      	movs	r2, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	617a      	str	r2, [r7, #20]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a1a:	f04f 0b00 	mov.w	fp, #0
 8003a1e:	4652      	mov	r2, sl
 8003a20:	465b      	mov	r3, fp
 8003a22:	f04f 0000 	mov.w	r0, #0
 8003a26:	f04f 0100 	mov.w	r1, #0
 8003a2a:	0159      	lsls	r1, r3, #5
 8003a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a30:	0150      	lsls	r0, r2, #5
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	ebb2 080a 	subs.w	r8, r2, sl
 8003a3a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a52:	ebb2 0408 	subs.w	r4, r2, r8
 8003a56:	eb63 0509 	sbc.w	r5, r3, r9
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	00eb      	lsls	r3, r5, #3
 8003a64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a68:	00e2      	lsls	r2, r4, #3
 8003a6a:	4614      	mov	r4, r2
 8003a6c:	461d      	mov	r5, r3
 8003a6e:	eb14 030a 	adds.w	r3, r4, sl
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	eb45 030b 	adc.w	r3, r5, fp
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a86:	4629      	mov	r1, r5
 8003a88:	028b      	lsls	r3, r1, #10
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a90:	4621      	mov	r1, r4
 8003a92:	028a      	lsls	r2, r1, #10
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
 8003a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	60fa      	str	r2, [r7, #12]
 8003aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aa4:	f7fc fbe4 	bl	8000270 <__aeabi_uldivmod>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4613      	mov	r3, r2
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	3301      	adds	r3, #1
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ac0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003aca:	e002      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003acc:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ace:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3740      	adds	r7, #64	@ 0x40
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	00f42400 	.word	0x00f42400
 8003ae8:	017d7840 	.word	0x017d7840

08003aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b03      	ldr	r3, [pc, #12]	@ (8003b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000000 	.word	0x20000000

08003b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b08:	f7ff fff0 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	0a9b      	lsrs	r3, r3, #10
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4903      	ldr	r1, [pc, #12]	@ (8003b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40023800 	.word	0x40023800
 8003b28:	08005f58 	.word	0x08005f58

08003b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b30:	f7ff ffdc 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b05      	ldr	r3, [pc, #20]	@ (8003b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	0b5b      	lsrs	r3, r3, #13
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	4903      	ldr	r1, [pc, #12]	@ (8003b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	08005f58 	.word	0x08005f58

08003b54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e07b      	b.n	8003c5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d108      	bne.n	8003b80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b76:	d009      	beq.n	8003b8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	61da      	str	r2, [r3, #28]
 8003b7e:	e005      	b.n	8003b8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fc ff34 	bl	8000a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c10:	ea42 0103 	orr.w	r1, r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c18:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0104 	and.w	r1, r3, #4
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	f003 0210 	and.w	r2, r3, #16
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e042      	b.n	8003cfe <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7fd f889 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2224      	movs	r2, #36	@ 0x24
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ca8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 ff86 	bl	8004bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cbe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cde:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b08a      	sub	sp, #40	@ 0x28
 8003d0a:	af02      	add	r7, sp, #8
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d175      	bne.n	8003e12 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_UART_Transmit+0x2c>
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06e      	b.n	8003e14 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2221      	movs	r2, #33	@ 0x21
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d44:	f7fd fd4e 	bl	80017e4 <HAL_GetTick>
 8003d48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	88fa      	ldrh	r2, [r7, #6]
 8003d4e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5e:	d108      	bne.n	8003d72 <HAL_UART_Transmit+0x6c>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d104      	bne.n	8003d72 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	e003      	b.n	8003d7a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d7a:	e02e      	b.n	8003dda <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2200      	movs	r2, #0
 8003d84:	2180      	movs	r1, #128	@ 0x80
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fc5e 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e03a      	b.n	8003e14 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	3302      	adds	r3, #2
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	e007      	b.n	8003dcc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	781a      	ldrb	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1cb      	bne.n	8003d7c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2200      	movs	r2, #0
 8003dec:	2140      	movs	r1, #64	@ 0x40
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fc2a 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e006      	b.n	8003e14 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08c      	sub	sp, #48	@ 0x30
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d14a      	bne.n	8003ecc <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e043      	b.n	8003ece <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	461a      	mov	r2, r3
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fc4f 	bl	80046fc <UART_Start_Receive_DMA>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003e64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d12c      	bne.n	8003ec6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d125      	bne.n	8003ec0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	617b      	str	r3, [r7, #20]
   return(result);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f043 0310 	orr.w	r3, r3, #16
 8003ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eaa:	627a      	str	r2, [r7, #36]	@ 0x24
 8003eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6a39      	ldr	r1, [r7, #32]
 8003eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e5      	bne.n	8003e8a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8003ebe:	e002      	b.n	8003ec6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003eca:	e000      	b.n	8003ece <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003ecc:	2302      	movs	r3, #2
  }
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3730      	adds	r7, #48	@ 0x30
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b0ba      	sub	sp, #232	@ 0xe8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_UART_IRQHandler+0x66>
 8003f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fd81 	bl	8004a3e <UART_Receive_IT>
      return;
 8003f3c:	e25b      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80de 	beq.w	8004104 <HAL_UART_IRQHandler+0x22c>
 8003f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80d1 	beq.w	8004104 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_UART_IRQHandler+0xae>
 8003f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_UART_IRQHandler+0xd2>
 8003f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f043 0202 	orr.w	r2, r3, #2
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <HAL_UART_IRQHandler+0xf6>
 8003fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d011      	beq.n	8003ffe <HAL_UART_IRQHandler+0x126>
 8003fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f043 0208 	orr.w	r2, r3, #8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 81f2 	beq.w	80043ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_UART_IRQHandler+0x14e>
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fd0c 	bl	8004a3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004030:	2b40      	cmp	r3, #64	@ 0x40
 8004032:	bf0c      	ite	eq
 8004034:	2301      	moveq	r3, #1
 8004036:	2300      	movne	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <HAL_UART_IRQHandler+0x17a>
 800404a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04f      	beq.n	80040f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fc14 	bl	8004880 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d141      	bne.n	80040ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3314      	adds	r3, #20
 800406c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800407c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3314      	adds	r3, #20
 800408e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004092:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004096:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800409e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1d9      	bne.n	8004066 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d013      	beq.n	80040e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040be:	4a7e      	ldr	r2, [pc, #504]	@ (80042b8 <HAL_UART_IRQHandler+0x3e0>)
 80040c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd fe44 	bl	8001d54 <HAL_DMA_Abort_IT>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040dc:	4610      	mov	r0, r2
 80040de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e00e      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9a8 	bl	8004438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e00a      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f9a4 	bl	8004438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	e006      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f9a0 	bl	8004438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040fe:	e175      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	bf00      	nop
    return;
 8004102:	e173      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 814f 	bne.w	80043ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800410e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8148 	beq.w	80043ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800411c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8141 	beq.w	80043ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	f040 80b6 	bne.w	80042bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800415c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8145 	beq.w	80043f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800416a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800416e:	429a      	cmp	r2, r3
 8004170:	f080 813e 	bcs.w	80043f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800417a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004186:	f000 8088 	beq.w	800429a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80041a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80041b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1d9      	bne.n	800418a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3314      	adds	r3, #20
 80041f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004202:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800420c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e1      	bne.n	80041d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3314      	adds	r3, #20
 8004218:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3314      	adds	r3, #20
 8004232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004236:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004238:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800423c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004244:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e3      	bne.n	8004212 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800426a:	f023 0310 	bic.w	r3, r3, #16
 800426e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800427c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800427e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004282:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800428a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e3      	bne.n	8004258 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004294:	4618      	mov	r0, r3
 8004296:	f7fd fced 	bl	8001c74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7fc fa73 	bl	800079c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042b6:	e09b      	b.n	80043f0 <HAL_UART_IRQHandler+0x518>
 80042b8:	08004947 	.word	0x08004947
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 808e 	beq.w	80043f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8089 	beq.w	80043f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	330c      	adds	r3, #12
 8004302:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004306:	647a      	str	r2, [r7, #68]	@ 0x44
 8004308:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800430c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e3      	bne.n	80042e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	623b      	str	r3, [r7, #32]
   return(result);
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3314      	adds	r3, #20
 800433a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800433e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800434c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e3      	bne.n	800431a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0310 	bic.w	r3, r3, #16
 8004376:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	330c      	adds	r3, #12
 8004380:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004384:	61fa      	str	r2, [r7, #28]
 8004386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	69b9      	ldr	r1, [r7, #24]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	617b      	str	r3, [r7, #20]
   return(result);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e3      	bne.n	8004360 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800439e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7fc f9f9 	bl	800079c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043aa:	e023      	b.n	80043f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <HAL_UART_IRQHandler+0x4f4>
 80043b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fad2 	bl	800496e <UART_Transmit_IT>
    return;
 80043ca:	e014      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <HAL_UART_IRQHandler+0x51e>
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fb12 	bl	8004a0e <UART_EndTransmit_IT>
    return;
 80043ea:	e004      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80043ec:	bf00      	nop
 80043ee:	e002      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043f4:	bf00      	nop
  }
}
 80043f6:	37e8      	adds	r7, #232	@ 0xe8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b09c      	sub	sp, #112	@ 0x70
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004458:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d172      	bne.n	800454e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800446a:	2200      	movs	r2, #0
 800446c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800446e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800447e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004484:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800448e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004490:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004494:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800449c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80044ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80044c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80044c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3314      	adds	r3, #20
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	623b      	str	r3, [r7, #32]
   return(result);
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80044f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80044f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800450a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800450c:	2220      	movs	r2, #32
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	2b01      	cmp	r3, #1
 8004518:	d119      	bne.n	800454e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	60fb      	str	r3, [r7, #12]
   return(result);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800453a:	61fa      	str	r2, [r7, #28]
 800453c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	69b9      	ldr	r1, [r7, #24]
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	617b      	str	r3, [r7, #20]
   return(result);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800454e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004550:	2200      	movs	r2, #0
 8004552:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	2b01      	cmp	r3, #1
 800455a:	d106      	bne.n	800456a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800455c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800455e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004560:	4619      	mov	r1, r3
 8004562:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004564:	f7fc f91a 	bl	800079c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004568:	e002      	b.n	8004570 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800456a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800456c:	f7ff ff50 	bl	8004410 <HAL_UART_RxCpltCallback>
}
 8004570:	bf00      	nop
 8004572:	3770      	adds	r7, #112	@ 0x70
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004584:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	2b01      	cmp	r3, #1
 8004592:	d108      	bne.n	80045a6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	b29b      	uxth	r3, r3
 800459c:	4619      	mov	r1, r3
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7fc f8fc 	bl	800079c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045a4:	e002      	b.n	80045ac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff ff3c 	bl	8004424 <HAL_UART_RxHalfCpltCallback>
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d0:	2b80      	cmp	r3, #128	@ 0x80
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b21      	cmp	r3, #33	@ 0x21
 80045e6:	d108      	bne.n	80045fa <UART_DMAError+0x46>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2200      	movs	r2, #0
 80045f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80045f4:	68b8      	ldr	r0, [r7, #8]
 80045f6:	f000 f91b 	bl	8004830 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004604:	2b40      	cmp	r3, #64	@ 0x40
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b22      	cmp	r3, #34	@ 0x22
 800461a:	d108      	bne.n	800462e <UART_DMAError+0x7a>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2200      	movs	r2, #0
 8004626:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004628:	68b8      	ldr	r0, [r7, #8]
 800462a:	f000 f929 	bl	8004880 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	f043 0210 	orr.w	r2, r3, #16
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800463a:	68b8      	ldr	r0, [r7, #8]
 800463c:	f7ff fefc 	bl	8004438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004658:	e03b      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d037      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004662:	f7fd f8bf 	bl	80017e4 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <UART_WaitOnFlagUntilTimeout+0x30>
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e03a      	b.n	80046f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d023      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b80      	cmp	r3, #128	@ 0x80
 800468e:	d020      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b40      	cmp	r3, #64	@ 0x40
 8004694:	d01d      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d116      	bne.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f8e0 	bl	8004880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2208      	movs	r2, #8
 80046c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e00f      	b.n	80046f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4013      	ands	r3, r2
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	429a      	cmp	r2, r3
 80046e0:	bf0c      	ite	eq
 80046e2:	2301      	moveq	r3, #1
 80046e4:	2300      	movne	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d0b4      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b098      	sub	sp, #96	@ 0x60
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	4613      	mov	r3, r2
 8004708:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	88fa      	ldrh	r2, [r7, #6]
 8004714:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2222      	movs	r2, #34	@ 0x22
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004728:	4a3e      	ldr	r2, [pc, #248]	@ (8004824 <UART_Start_Receive_DMA+0x128>)
 800472a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004730:	4a3d      	ldr	r2, [pc, #244]	@ (8004828 <UART_Start_Receive_DMA+0x12c>)
 8004732:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004738:	4a3c      	ldr	r2, [pc, #240]	@ (800482c <UART_Start_Receive_DMA+0x130>)
 800473a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004740:	2200      	movs	r2, #0
 8004742:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004744:	f107 0308 	add.w	r3, r7, #8
 8004748:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	f7fd fa32 	bl	8001bc4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d019      	beq.n	80047b2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	330c      	adds	r3, #12
 8004784:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800478e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004794:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800479e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80047a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80047a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80047ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e5      	bne.n	800477e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3314      	adds	r3, #20
 80047b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3314      	adds	r3, #20
 80047d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047d2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80047d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e5      	bne.n	80047b2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3314      	adds	r3, #20
 80047ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	617b      	str	r3, [r7, #20]
   return(result);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004806:	627a      	str	r2, [r7, #36]	@ 0x24
 8004808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6a39      	ldr	r1, [r7, #32]
 800480c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	61fb      	str	r3, [r7, #28]
   return(result);
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e5      	bne.n	80047e6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3760      	adds	r7, #96	@ 0x60
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	0800444d 	.word	0x0800444d
 8004828:	08004579 	.word	0x08004579
 800482c:	080045b5 	.word	0x080045b5

08004830 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004830:	b480      	push	{r7}
 8004832:	b089      	sub	sp, #36	@ 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	330c      	adds	r3, #12
 800483e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	60bb      	str	r3, [r7, #8]
   return(result);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	61ba      	str	r2, [r7, #24]
 800485a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6979      	ldr	r1, [r7, #20]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	613b      	str	r3, [r7, #16]
   return(result);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e5      	bne.n	8004838 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004874:	bf00      	nop
 8004876:	3724      	adds	r7, #36	@ 0x24
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b095      	sub	sp, #84	@ 0x54
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800489e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80048aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e5      	bne.n	8004888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3314      	adds	r3, #20
 80048c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3314      	adds	r3, #20
 80048da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e5      	bne.n	80048bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d119      	bne.n	800492c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	60bb      	str	r3, [r7, #8]
   return(result);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f023 0310 	bic.w	r3, r3, #16
 800490e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	330c      	adds	r3, #12
 8004916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004918:	61ba      	str	r2, [r7, #24]
 800491a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6979      	ldr	r1, [r7, #20]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	613b      	str	r3, [r7, #16]
   return(result);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e5      	bne.n	80048f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800493a:	bf00      	nop
 800493c:	3754      	adds	r7, #84	@ 0x54
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7ff fd69 	bl	8004438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b21      	cmp	r3, #33	@ 0x21
 8004980:	d13e      	bne.n	8004a00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498a:	d114      	bne.n	80049b6 <UART_Transmit_IT+0x48>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d110      	bne.n	80049b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	1c9a      	adds	r2, r3, #2
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	621a      	str	r2, [r3, #32]
 80049b4:	e008      	b.n	80049c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	1c59      	adds	r1, r3, #1
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6211      	str	r1, [r2, #32]
 80049c0:	781a      	ldrb	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	4619      	mov	r1, r3
 80049d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10f      	bne.n	80049fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	e000      	b.n	8004a02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a00:	2302      	movs	r3, #2
  }
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fce4 	bl	80043fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b08c      	sub	sp, #48	@ 0x30
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b22      	cmp	r3, #34	@ 0x22
 8004a50:	f040 80ae 	bne.w	8004bb0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5c:	d117      	bne.n	8004a8e <UART_Receive_IT+0x50>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d113      	bne.n	8004a8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	1c9a      	adds	r2, r3, #2
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a8c:	e026      	b.n	8004adc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa0:	d007      	beq.n	8004ab2 <UART_Receive_IT+0x74>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <UART_Receive_IT+0x82>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	e008      	b.n	8004ad2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d15d      	bne.n	8004bac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0220 	bic.w	r2, r2, #32
 8004afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0201 	bic.w	r2, r2, #1
 8004b1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d135      	bne.n	8004ba2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	330c      	adds	r3, #12
 8004b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f023 0310 	bic.w	r3, r3, #16
 8004b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b5c:	623a      	str	r2, [r7, #32]
 8004b5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	69f9      	ldr	r1, [r7, #28]
 8004b62:	6a3a      	ldr	r2, [r7, #32]
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e5      	bne.n	8004b3c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0310 	and.w	r3, r3, #16
 8004b7a:	2b10      	cmp	r3, #16
 8004b7c:	d10a      	bne.n	8004b94 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fb fdfe 	bl	800079c <HAL_UARTEx_RxEventCallback>
 8004ba0:	e002      	b.n	8004ba8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff fc34 	bl	8004410 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e002      	b.n	8004bb2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3730      	adds	r7, #48	@ 0x30
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc0:	b0c0      	sub	sp, #256	@ 0x100
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	68d9      	ldr	r1, [r3, #12]
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	ea40 0301 	orr.w	r3, r0, r1
 8004be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c14:	f021 010c 	bic.w	r1, r1, #12
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c22:	430b      	orrs	r3, r1
 8004c24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c36:	6999      	ldr	r1, [r3, #24]
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	ea40 0301 	orr.w	r3, r0, r1
 8004c42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4b8f      	ldr	r3, [pc, #572]	@ (8004e88 <UART_SetConfig+0x2cc>)
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d005      	beq.n	8004c5c <UART_SetConfig+0xa0>
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4b8d      	ldr	r3, [pc, #564]	@ (8004e8c <UART_SetConfig+0x2d0>)
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d104      	bne.n	8004c66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c5c:	f7fe ff66 	bl	8003b2c <HAL_RCC_GetPCLK2Freq>
 8004c60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c64:	e003      	b.n	8004c6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c66:	f7fe ff4d 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 8004c6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c78:	f040 810c 	bne.w	8004e94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c8e:	4622      	mov	r2, r4
 8004c90:	462b      	mov	r3, r5
 8004c92:	1891      	adds	r1, r2, r2
 8004c94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c96:	415b      	adcs	r3, r3
 8004c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	eb12 0801 	adds.w	r8, r2, r1
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	eb43 0901 	adc.w	r9, r3, r1
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cbe:	4690      	mov	r8, r2
 8004cc0:	4699      	mov	r9, r3
 8004cc2:	4623      	mov	r3, r4
 8004cc4:	eb18 0303 	adds.w	r3, r8, r3
 8004cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ccc:	462b      	mov	r3, r5
 8004cce:	eb49 0303 	adc.w	r3, r9, r3
 8004cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ce2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cea:	460b      	mov	r3, r1
 8004cec:	18db      	adds	r3, r3, r3
 8004cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	eb42 0303 	adc.w	r3, r2, r3
 8004cf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d00:	f7fb fab6 	bl	8000270 <__aeabi_uldivmod>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4b61      	ldr	r3, [pc, #388]	@ (8004e90 <UART_SetConfig+0x2d4>)
 8004d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	011c      	lsls	r4, r3, #4
 8004d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d24:	4642      	mov	r2, r8
 8004d26:	464b      	mov	r3, r9
 8004d28:	1891      	adds	r1, r2, r2
 8004d2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d2c:	415b      	adcs	r3, r3
 8004d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d34:	4641      	mov	r1, r8
 8004d36:	eb12 0a01 	adds.w	sl, r2, r1
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d54:	4692      	mov	sl, r2
 8004d56:	469b      	mov	fp, r3
 8004d58:	4643      	mov	r3, r8
 8004d5a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d62:	464b      	mov	r3, r9
 8004d64:	eb4b 0303 	adc.w	r3, fp, r3
 8004d68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d80:	460b      	mov	r3, r1
 8004d82:	18db      	adds	r3, r3, r3
 8004d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d86:	4613      	mov	r3, r2
 8004d88:	eb42 0303 	adc.w	r3, r2, r3
 8004d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d96:	f7fb fa6b 	bl	8000270 <__aeabi_uldivmod>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	4b3b      	ldr	r3, [pc, #236]	@ (8004e90 <UART_SetConfig+0x2d4>)
 8004da2:	fba3 2301 	umull	r2, r3, r3, r1
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	2264      	movs	r2, #100	@ 0x64
 8004daa:	fb02 f303 	mul.w	r3, r2, r3
 8004dae:	1acb      	subs	r3, r1, r3
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004db6:	4b36      	ldr	r3, [pc, #216]	@ (8004e90 <UART_SetConfig+0x2d4>)
 8004db8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dbc:	095b      	lsrs	r3, r3, #5
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004dc4:	441c      	add	r4, r3
 8004dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004dd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004dd8:	4642      	mov	r2, r8
 8004dda:	464b      	mov	r3, r9
 8004ddc:	1891      	adds	r1, r2, r2
 8004dde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004de0:	415b      	adcs	r3, r3
 8004de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004de8:	4641      	mov	r1, r8
 8004dea:	1851      	adds	r1, r2, r1
 8004dec:	6339      	str	r1, [r7, #48]	@ 0x30
 8004dee:	4649      	mov	r1, r9
 8004df0:	414b      	adcs	r3, r1
 8004df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e00:	4659      	mov	r1, fp
 8004e02:	00cb      	lsls	r3, r1, #3
 8004e04:	4651      	mov	r1, sl
 8004e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	00ca      	lsls	r2, r1, #3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	4619      	mov	r1, r3
 8004e12:	4603      	mov	r3, r0
 8004e14:	4642      	mov	r2, r8
 8004e16:	189b      	adds	r3, r3, r2
 8004e18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e1c:	464b      	mov	r3, r9
 8004e1e:	460a      	mov	r2, r1
 8004e20:	eb42 0303 	adc.w	r3, r2, r3
 8004e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	18db      	adds	r3, r3, r3
 8004e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e42:	4613      	mov	r3, r2
 8004e44:	eb42 0303 	adc.w	r3, r2, r3
 8004e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e52:	f7fb fa0d 	bl	8000270 <__aeabi_uldivmod>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e90 <UART_SetConfig+0x2d4>)
 8004e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	2164      	movs	r1, #100	@ 0x64
 8004e64:	fb01 f303 	mul.w	r3, r1, r3
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	3332      	adds	r3, #50	@ 0x32
 8004e6e:	4a08      	ldr	r2, [pc, #32]	@ (8004e90 <UART_SetConfig+0x2d4>)
 8004e70:	fba2 2303 	umull	r2, r3, r2, r3
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	f003 0207 	and.w	r2, r3, #7
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4422      	add	r2, r4
 8004e82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e84:	e106      	b.n	8005094 <UART_SetConfig+0x4d8>
 8004e86:	bf00      	nop
 8004e88:	40011000 	.word	0x40011000
 8004e8c:	40011400 	.word	0x40011400
 8004e90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ea2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ea6:	4642      	mov	r2, r8
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	1891      	adds	r1, r2, r2
 8004eac:	6239      	str	r1, [r7, #32]
 8004eae:	415b      	adcs	r3, r3
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	1854      	adds	r4, r2, r1
 8004eba:	4649      	mov	r1, r9
 8004ebc:	eb43 0501 	adc.w	r5, r3, r1
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	00eb      	lsls	r3, r5, #3
 8004eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ece:	00e2      	lsls	r2, r4, #3
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	461d      	mov	r5, r3
 8004ed4:	4643      	mov	r3, r8
 8004ed6:	18e3      	adds	r3, r4, r3
 8004ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004edc:	464b      	mov	r3, r9
 8004ede:	eb45 0303 	adc.w	r3, r5, r3
 8004ee2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ef2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f02:	4629      	mov	r1, r5
 8004f04:	008b      	lsls	r3, r1, #2
 8004f06:	4621      	mov	r1, r4
 8004f08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	008a      	lsls	r2, r1, #2
 8004f10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f14:	f7fb f9ac 	bl	8000270 <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4b60      	ldr	r3, [pc, #384]	@ (80050a0 <UART_SetConfig+0x4e4>)
 8004f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	011c      	lsls	r4, r3, #4
 8004f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f38:	4642      	mov	r2, r8
 8004f3a:	464b      	mov	r3, r9
 8004f3c:	1891      	adds	r1, r2, r2
 8004f3e:	61b9      	str	r1, [r7, #24]
 8004f40:	415b      	adcs	r3, r3
 8004f42:	61fb      	str	r3, [r7, #28]
 8004f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f48:	4641      	mov	r1, r8
 8004f4a:	1851      	adds	r1, r2, r1
 8004f4c:	6139      	str	r1, [r7, #16]
 8004f4e:	4649      	mov	r1, r9
 8004f50:	414b      	adcs	r3, r1
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f60:	4659      	mov	r1, fp
 8004f62:	00cb      	lsls	r3, r1, #3
 8004f64:	4651      	mov	r1, sl
 8004f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f6a:	4651      	mov	r1, sl
 8004f6c:	00ca      	lsls	r2, r1, #3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	4619      	mov	r1, r3
 8004f72:	4603      	mov	r3, r0
 8004f74:	4642      	mov	r2, r8
 8004f76:	189b      	adds	r3, r3, r2
 8004f78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	460a      	mov	r2, r1
 8004f80:	eb42 0303 	adc.w	r3, r2, r3
 8004f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	008b      	lsls	r3, r1, #2
 8004fa4:	4641      	mov	r1, r8
 8004fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004faa:	4641      	mov	r1, r8
 8004fac:	008a      	lsls	r2, r1, #2
 8004fae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fb2:	f7fb f95d 	bl	8000270 <__aeabi_uldivmod>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4b38      	ldr	r3, [pc, #224]	@ (80050a0 <UART_SetConfig+0x4e4>)
 8004fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	2264      	movs	r2, #100	@ 0x64
 8004fc6:	fb02 f303 	mul.w	r3, r2, r3
 8004fca:	1acb      	subs	r3, r1, r3
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	3332      	adds	r3, #50	@ 0x32
 8004fd0:	4a33      	ldr	r2, [pc, #204]	@ (80050a0 <UART_SetConfig+0x4e4>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fdc:	441c      	add	r4, r3
 8004fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fe6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fe8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fec:	4642      	mov	r2, r8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	1891      	adds	r1, r2, r2
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	415b      	adcs	r3, r3
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	1851      	adds	r1, r2, r1
 8005000:	6039      	str	r1, [r7, #0]
 8005002:	4649      	mov	r1, r9
 8005004:	414b      	adcs	r3, r1
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005014:	4659      	mov	r1, fp
 8005016:	00cb      	lsls	r3, r1, #3
 8005018:	4651      	mov	r1, sl
 800501a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800501e:	4651      	mov	r1, sl
 8005020:	00ca      	lsls	r2, r1, #3
 8005022:	4610      	mov	r0, r2
 8005024:	4619      	mov	r1, r3
 8005026:	4603      	mov	r3, r0
 8005028:	4642      	mov	r2, r8
 800502a:	189b      	adds	r3, r3, r2
 800502c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800502e:	464b      	mov	r3, r9
 8005030:	460a      	mov	r2, r1
 8005032:	eb42 0303 	adc.w	r3, r2, r3
 8005036:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	663b      	str	r3, [r7, #96]	@ 0x60
 8005042:	667a      	str	r2, [r7, #100]	@ 0x64
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005050:	4649      	mov	r1, r9
 8005052:	008b      	lsls	r3, r1, #2
 8005054:	4641      	mov	r1, r8
 8005056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800505a:	4641      	mov	r1, r8
 800505c:	008a      	lsls	r2, r1, #2
 800505e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005062:	f7fb f905 	bl	8000270 <__aeabi_uldivmod>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4b0d      	ldr	r3, [pc, #52]	@ (80050a0 <UART_SetConfig+0x4e4>)
 800506c:	fba3 1302 	umull	r1, r3, r3, r2
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	2164      	movs	r1, #100	@ 0x64
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	3332      	adds	r3, #50	@ 0x32
 800507e:	4a08      	ldr	r2, [pc, #32]	@ (80050a0 <UART_SetConfig+0x4e4>)
 8005080:	fba2 2303 	umull	r2, r3, r2, r3
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	f003 020f 	and.w	r2, r3, #15
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4422      	add	r2, r4
 8005092:	609a      	str	r2, [r3, #8]
}
 8005094:	bf00      	nop
 8005096:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800509a:	46bd      	mov	sp, r7
 800509c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a0:	51eb851f 	.word	0x51eb851f

080050a4 <std>:
 80050a4:	2300      	movs	r3, #0
 80050a6:	b510      	push	{r4, lr}
 80050a8:	4604      	mov	r4, r0
 80050aa:	e9c0 3300 	strd	r3, r3, [r0]
 80050ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050b2:	6083      	str	r3, [r0, #8]
 80050b4:	8181      	strh	r1, [r0, #12]
 80050b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80050b8:	81c2      	strh	r2, [r0, #14]
 80050ba:	6183      	str	r3, [r0, #24]
 80050bc:	4619      	mov	r1, r3
 80050be:	2208      	movs	r2, #8
 80050c0:	305c      	adds	r0, #92	@ 0x5c
 80050c2:	f000 f99b 	bl	80053fc <memset>
 80050c6:	4b0d      	ldr	r3, [pc, #52]	@ (80050fc <std+0x58>)
 80050c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80050ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005100 <std+0x5c>)
 80050cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005104 <std+0x60>)
 80050d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005108 <std+0x64>)
 80050d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80050d6:	4b0d      	ldr	r3, [pc, #52]	@ (800510c <std+0x68>)
 80050d8:	6224      	str	r4, [r4, #32]
 80050da:	429c      	cmp	r4, r3
 80050dc:	d006      	beq.n	80050ec <std+0x48>
 80050de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050e2:	4294      	cmp	r4, r2
 80050e4:	d002      	beq.n	80050ec <std+0x48>
 80050e6:	33d0      	adds	r3, #208	@ 0xd0
 80050e8:	429c      	cmp	r4, r3
 80050ea:	d105      	bne.n	80050f8 <std+0x54>
 80050ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f4:	f000 b9fa 	b.w	80054ec <__retarget_lock_init_recursive>
 80050f8:	bd10      	pop	{r4, pc}
 80050fa:	bf00      	nop
 80050fc:	0800524d 	.word	0x0800524d
 8005100:	0800526f 	.word	0x0800526f
 8005104:	080052a7 	.word	0x080052a7
 8005108:	080052cb 	.word	0x080052cb
 800510c:	200003a8 	.word	0x200003a8

08005110 <stdio_exit_handler>:
 8005110:	4a02      	ldr	r2, [pc, #8]	@ (800511c <stdio_exit_handler+0xc>)
 8005112:	4903      	ldr	r1, [pc, #12]	@ (8005120 <stdio_exit_handler+0x10>)
 8005114:	4803      	ldr	r0, [pc, #12]	@ (8005124 <stdio_exit_handler+0x14>)
 8005116:	f000 b869 	b.w	80051ec <_fwalk_sglue>
 800511a:	bf00      	nop
 800511c:	2000001c 	.word	0x2000001c
 8005120:	08005d8d 	.word	0x08005d8d
 8005124:	2000002c 	.word	0x2000002c

08005128 <cleanup_stdio>:
 8005128:	6841      	ldr	r1, [r0, #4]
 800512a:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <cleanup_stdio+0x34>)
 800512c:	4299      	cmp	r1, r3
 800512e:	b510      	push	{r4, lr}
 8005130:	4604      	mov	r4, r0
 8005132:	d001      	beq.n	8005138 <cleanup_stdio+0x10>
 8005134:	f000 fe2a 	bl	8005d8c <_fflush_r>
 8005138:	68a1      	ldr	r1, [r4, #8]
 800513a:	4b09      	ldr	r3, [pc, #36]	@ (8005160 <cleanup_stdio+0x38>)
 800513c:	4299      	cmp	r1, r3
 800513e:	d002      	beq.n	8005146 <cleanup_stdio+0x1e>
 8005140:	4620      	mov	r0, r4
 8005142:	f000 fe23 	bl	8005d8c <_fflush_r>
 8005146:	68e1      	ldr	r1, [r4, #12]
 8005148:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <cleanup_stdio+0x3c>)
 800514a:	4299      	cmp	r1, r3
 800514c:	d004      	beq.n	8005158 <cleanup_stdio+0x30>
 800514e:	4620      	mov	r0, r4
 8005150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005154:	f000 be1a 	b.w	8005d8c <_fflush_r>
 8005158:	bd10      	pop	{r4, pc}
 800515a:	bf00      	nop
 800515c:	200003a8 	.word	0x200003a8
 8005160:	20000410 	.word	0x20000410
 8005164:	20000478 	.word	0x20000478

08005168 <global_stdio_init.part.0>:
 8005168:	b510      	push	{r4, lr}
 800516a:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <global_stdio_init.part.0+0x30>)
 800516c:	4c0b      	ldr	r4, [pc, #44]	@ (800519c <global_stdio_init.part.0+0x34>)
 800516e:	4a0c      	ldr	r2, [pc, #48]	@ (80051a0 <global_stdio_init.part.0+0x38>)
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	4620      	mov	r0, r4
 8005174:	2200      	movs	r2, #0
 8005176:	2104      	movs	r1, #4
 8005178:	f7ff ff94 	bl	80050a4 <std>
 800517c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005180:	2201      	movs	r2, #1
 8005182:	2109      	movs	r1, #9
 8005184:	f7ff ff8e 	bl	80050a4 <std>
 8005188:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800518c:	2202      	movs	r2, #2
 800518e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005192:	2112      	movs	r1, #18
 8005194:	f7ff bf86 	b.w	80050a4 <std>
 8005198:	200004e0 	.word	0x200004e0
 800519c:	200003a8 	.word	0x200003a8
 80051a0:	08005111 	.word	0x08005111

080051a4 <__sfp_lock_acquire>:
 80051a4:	4801      	ldr	r0, [pc, #4]	@ (80051ac <__sfp_lock_acquire+0x8>)
 80051a6:	f000 b9a2 	b.w	80054ee <__retarget_lock_acquire_recursive>
 80051aa:	bf00      	nop
 80051ac:	200004e9 	.word	0x200004e9

080051b0 <__sfp_lock_release>:
 80051b0:	4801      	ldr	r0, [pc, #4]	@ (80051b8 <__sfp_lock_release+0x8>)
 80051b2:	f000 b99d 	b.w	80054f0 <__retarget_lock_release_recursive>
 80051b6:	bf00      	nop
 80051b8:	200004e9 	.word	0x200004e9

080051bc <__sinit>:
 80051bc:	b510      	push	{r4, lr}
 80051be:	4604      	mov	r4, r0
 80051c0:	f7ff fff0 	bl	80051a4 <__sfp_lock_acquire>
 80051c4:	6a23      	ldr	r3, [r4, #32]
 80051c6:	b11b      	cbz	r3, 80051d0 <__sinit+0x14>
 80051c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051cc:	f7ff bff0 	b.w	80051b0 <__sfp_lock_release>
 80051d0:	4b04      	ldr	r3, [pc, #16]	@ (80051e4 <__sinit+0x28>)
 80051d2:	6223      	str	r3, [r4, #32]
 80051d4:	4b04      	ldr	r3, [pc, #16]	@ (80051e8 <__sinit+0x2c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f5      	bne.n	80051c8 <__sinit+0xc>
 80051dc:	f7ff ffc4 	bl	8005168 <global_stdio_init.part.0>
 80051e0:	e7f2      	b.n	80051c8 <__sinit+0xc>
 80051e2:	bf00      	nop
 80051e4:	08005129 	.word	0x08005129
 80051e8:	200004e0 	.word	0x200004e0

080051ec <_fwalk_sglue>:
 80051ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051f0:	4607      	mov	r7, r0
 80051f2:	4688      	mov	r8, r1
 80051f4:	4614      	mov	r4, r2
 80051f6:	2600      	movs	r6, #0
 80051f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051fc:	f1b9 0901 	subs.w	r9, r9, #1
 8005200:	d505      	bpl.n	800520e <_fwalk_sglue+0x22>
 8005202:	6824      	ldr	r4, [r4, #0]
 8005204:	2c00      	cmp	r4, #0
 8005206:	d1f7      	bne.n	80051f8 <_fwalk_sglue+0xc>
 8005208:	4630      	mov	r0, r6
 800520a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800520e:	89ab      	ldrh	r3, [r5, #12]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d907      	bls.n	8005224 <_fwalk_sglue+0x38>
 8005214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005218:	3301      	adds	r3, #1
 800521a:	d003      	beq.n	8005224 <_fwalk_sglue+0x38>
 800521c:	4629      	mov	r1, r5
 800521e:	4638      	mov	r0, r7
 8005220:	47c0      	blx	r8
 8005222:	4306      	orrs	r6, r0
 8005224:	3568      	adds	r5, #104	@ 0x68
 8005226:	e7e9      	b.n	80051fc <_fwalk_sglue+0x10>

08005228 <iprintf>:
 8005228:	b40f      	push	{r0, r1, r2, r3}
 800522a:	b507      	push	{r0, r1, r2, lr}
 800522c:	4906      	ldr	r1, [pc, #24]	@ (8005248 <iprintf+0x20>)
 800522e:	ab04      	add	r3, sp, #16
 8005230:	6808      	ldr	r0, [r1, #0]
 8005232:	f853 2b04 	ldr.w	r2, [r3], #4
 8005236:	6881      	ldr	r1, [r0, #8]
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	f000 fa7d 	bl	8005738 <_vfiprintf_r>
 800523e:	b003      	add	sp, #12
 8005240:	f85d eb04 	ldr.w	lr, [sp], #4
 8005244:	b004      	add	sp, #16
 8005246:	4770      	bx	lr
 8005248:	20000028 	.word	0x20000028

0800524c <__sread>:
 800524c:	b510      	push	{r4, lr}
 800524e:	460c      	mov	r4, r1
 8005250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005254:	f000 f8fc 	bl	8005450 <_read_r>
 8005258:	2800      	cmp	r0, #0
 800525a:	bfab      	itete	ge
 800525c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800525e:	89a3      	ldrhlt	r3, [r4, #12]
 8005260:	181b      	addge	r3, r3, r0
 8005262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005266:	bfac      	ite	ge
 8005268:	6563      	strge	r3, [r4, #84]	@ 0x54
 800526a:	81a3      	strhlt	r3, [r4, #12]
 800526c:	bd10      	pop	{r4, pc}

0800526e <__swrite>:
 800526e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005272:	461f      	mov	r7, r3
 8005274:	898b      	ldrh	r3, [r1, #12]
 8005276:	05db      	lsls	r3, r3, #23
 8005278:	4605      	mov	r5, r0
 800527a:	460c      	mov	r4, r1
 800527c:	4616      	mov	r6, r2
 800527e:	d505      	bpl.n	800528c <__swrite+0x1e>
 8005280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005284:	2302      	movs	r3, #2
 8005286:	2200      	movs	r2, #0
 8005288:	f000 f8d0 	bl	800542c <_lseek_r>
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005296:	81a3      	strh	r3, [r4, #12]
 8005298:	4632      	mov	r2, r6
 800529a:	463b      	mov	r3, r7
 800529c:	4628      	mov	r0, r5
 800529e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052a2:	f000 b8e7 	b.w	8005474 <_write_r>

080052a6 <__sseek>:
 80052a6:	b510      	push	{r4, lr}
 80052a8:	460c      	mov	r4, r1
 80052aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ae:	f000 f8bd 	bl	800542c <_lseek_r>
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	bf15      	itete	ne
 80052b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052c2:	81a3      	strheq	r3, [r4, #12]
 80052c4:	bf18      	it	ne
 80052c6:	81a3      	strhne	r3, [r4, #12]
 80052c8:	bd10      	pop	{r4, pc}

080052ca <__sclose>:
 80052ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ce:	f000 b89d 	b.w	800540c <_close_r>

080052d2 <__swbuf_r>:
 80052d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d4:	460e      	mov	r6, r1
 80052d6:	4614      	mov	r4, r2
 80052d8:	4605      	mov	r5, r0
 80052da:	b118      	cbz	r0, 80052e4 <__swbuf_r+0x12>
 80052dc:	6a03      	ldr	r3, [r0, #32]
 80052de:	b90b      	cbnz	r3, 80052e4 <__swbuf_r+0x12>
 80052e0:	f7ff ff6c 	bl	80051bc <__sinit>
 80052e4:	69a3      	ldr	r3, [r4, #24]
 80052e6:	60a3      	str	r3, [r4, #8]
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	071a      	lsls	r2, r3, #28
 80052ec:	d501      	bpl.n	80052f2 <__swbuf_r+0x20>
 80052ee:	6923      	ldr	r3, [r4, #16]
 80052f0:	b943      	cbnz	r3, 8005304 <__swbuf_r+0x32>
 80052f2:	4621      	mov	r1, r4
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 f82b 	bl	8005350 <__swsetup_r>
 80052fa:	b118      	cbz	r0, 8005304 <__swbuf_r+0x32>
 80052fc:	f04f 37ff 	mov.w	r7, #4294967295
 8005300:	4638      	mov	r0, r7
 8005302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	6922      	ldr	r2, [r4, #16]
 8005308:	1a98      	subs	r0, r3, r2
 800530a:	6963      	ldr	r3, [r4, #20]
 800530c:	b2f6      	uxtb	r6, r6
 800530e:	4283      	cmp	r3, r0
 8005310:	4637      	mov	r7, r6
 8005312:	dc05      	bgt.n	8005320 <__swbuf_r+0x4e>
 8005314:	4621      	mov	r1, r4
 8005316:	4628      	mov	r0, r5
 8005318:	f000 fd38 	bl	8005d8c <_fflush_r>
 800531c:	2800      	cmp	r0, #0
 800531e:	d1ed      	bne.n	80052fc <__swbuf_r+0x2a>
 8005320:	68a3      	ldr	r3, [r4, #8]
 8005322:	3b01      	subs	r3, #1
 8005324:	60a3      	str	r3, [r4, #8]
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	6022      	str	r2, [r4, #0]
 800532c:	701e      	strb	r6, [r3, #0]
 800532e:	6962      	ldr	r2, [r4, #20]
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	429a      	cmp	r2, r3
 8005334:	d004      	beq.n	8005340 <__swbuf_r+0x6e>
 8005336:	89a3      	ldrh	r3, [r4, #12]
 8005338:	07db      	lsls	r3, r3, #31
 800533a:	d5e1      	bpl.n	8005300 <__swbuf_r+0x2e>
 800533c:	2e0a      	cmp	r6, #10
 800533e:	d1df      	bne.n	8005300 <__swbuf_r+0x2e>
 8005340:	4621      	mov	r1, r4
 8005342:	4628      	mov	r0, r5
 8005344:	f000 fd22 	bl	8005d8c <_fflush_r>
 8005348:	2800      	cmp	r0, #0
 800534a:	d0d9      	beq.n	8005300 <__swbuf_r+0x2e>
 800534c:	e7d6      	b.n	80052fc <__swbuf_r+0x2a>
	...

08005350 <__swsetup_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4b29      	ldr	r3, [pc, #164]	@ (80053f8 <__swsetup_r+0xa8>)
 8005354:	4605      	mov	r5, r0
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	460c      	mov	r4, r1
 800535a:	b118      	cbz	r0, 8005364 <__swsetup_r+0x14>
 800535c:	6a03      	ldr	r3, [r0, #32]
 800535e:	b90b      	cbnz	r3, 8005364 <__swsetup_r+0x14>
 8005360:	f7ff ff2c 	bl	80051bc <__sinit>
 8005364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005368:	0719      	lsls	r1, r3, #28
 800536a:	d422      	bmi.n	80053b2 <__swsetup_r+0x62>
 800536c:	06da      	lsls	r2, r3, #27
 800536e:	d407      	bmi.n	8005380 <__swsetup_r+0x30>
 8005370:	2209      	movs	r2, #9
 8005372:	602a      	str	r2, [r5, #0]
 8005374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	f04f 30ff 	mov.w	r0, #4294967295
 800537e:	e033      	b.n	80053e8 <__swsetup_r+0x98>
 8005380:	0758      	lsls	r0, r3, #29
 8005382:	d512      	bpl.n	80053aa <__swsetup_r+0x5a>
 8005384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005386:	b141      	cbz	r1, 800539a <__swsetup_r+0x4a>
 8005388:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800538c:	4299      	cmp	r1, r3
 800538e:	d002      	beq.n	8005396 <__swsetup_r+0x46>
 8005390:	4628      	mov	r0, r5
 8005392:	f000 f8af 	bl	80054f4 <_free_r>
 8005396:	2300      	movs	r3, #0
 8005398:	6363      	str	r3, [r4, #52]	@ 0x34
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80053a0:	81a3      	strh	r3, [r4, #12]
 80053a2:	2300      	movs	r3, #0
 80053a4:	6063      	str	r3, [r4, #4]
 80053a6:	6923      	ldr	r3, [r4, #16]
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	f043 0308 	orr.w	r3, r3, #8
 80053b0:	81a3      	strh	r3, [r4, #12]
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	b94b      	cbnz	r3, 80053ca <__swsetup_r+0x7a>
 80053b6:	89a3      	ldrh	r3, [r4, #12]
 80053b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053c0:	d003      	beq.n	80053ca <__swsetup_r+0x7a>
 80053c2:	4621      	mov	r1, r4
 80053c4:	4628      	mov	r0, r5
 80053c6:	f000 fd2f 	bl	8005e28 <__smakebuf_r>
 80053ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ce:	f013 0201 	ands.w	r2, r3, #1
 80053d2:	d00a      	beq.n	80053ea <__swsetup_r+0x9a>
 80053d4:	2200      	movs	r2, #0
 80053d6:	60a2      	str	r2, [r4, #8]
 80053d8:	6962      	ldr	r2, [r4, #20]
 80053da:	4252      	negs	r2, r2
 80053dc:	61a2      	str	r2, [r4, #24]
 80053de:	6922      	ldr	r2, [r4, #16]
 80053e0:	b942      	cbnz	r2, 80053f4 <__swsetup_r+0xa4>
 80053e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053e6:	d1c5      	bne.n	8005374 <__swsetup_r+0x24>
 80053e8:	bd38      	pop	{r3, r4, r5, pc}
 80053ea:	0799      	lsls	r1, r3, #30
 80053ec:	bf58      	it	pl
 80053ee:	6962      	ldrpl	r2, [r4, #20]
 80053f0:	60a2      	str	r2, [r4, #8]
 80053f2:	e7f4      	b.n	80053de <__swsetup_r+0x8e>
 80053f4:	2000      	movs	r0, #0
 80053f6:	e7f7      	b.n	80053e8 <__swsetup_r+0x98>
 80053f8:	20000028 	.word	0x20000028

080053fc <memset>:
 80053fc:	4402      	add	r2, r0
 80053fe:	4603      	mov	r3, r0
 8005400:	4293      	cmp	r3, r2
 8005402:	d100      	bne.n	8005406 <memset+0xa>
 8005404:	4770      	bx	lr
 8005406:	f803 1b01 	strb.w	r1, [r3], #1
 800540a:	e7f9      	b.n	8005400 <memset+0x4>

0800540c <_close_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4d06      	ldr	r5, [pc, #24]	@ (8005428 <_close_r+0x1c>)
 8005410:	2300      	movs	r3, #0
 8005412:	4604      	mov	r4, r0
 8005414:	4608      	mov	r0, r1
 8005416:	602b      	str	r3, [r5, #0]
 8005418:	f7fb fbf3 	bl	8000c02 <_close>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_close_r+0x1a>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	b103      	cbz	r3, 8005426 <_close_r+0x1a>
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	200004e4 	.word	0x200004e4

0800542c <_lseek_r>:
 800542c:	b538      	push	{r3, r4, r5, lr}
 800542e:	4d07      	ldr	r5, [pc, #28]	@ (800544c <_lseek_r+0x20>)
 8005430:	4604      	mov	r4, r0
 8005432:	4608      	mov	r0, r1
 8005434:	4611      	mov	r1, r2
 8005436:	2200      	movs	r2, #0
 8005438:	602a      	str	r2, [r5, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	f7fb fc08 	bl	8000c50 <_lseek>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d102      	bne.n	800544a <_lseek_r+0x1e>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	b103      	cbz	r3, 800544a <_lseek_r+0x1e>
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	200004e4 	.word	0x200004e4

08005450 <_read_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4d07      	ldr	r5, [pc, #28]	@ (8005470 <_read_r+0x20>)
 8005454:	4604      	mov	r4, r0
 8005456:	4608      	mov	r0, r1
 8005458:	4611      	mov	r1, r2
 800545a:	2200      	movs	r2, #0
 800545c:	602a      	str	r2, [r5, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	f7fb fb96 	bl	8000b90 <_read>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	d102      	bne.n	800546e <_read_r+0x1e>
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	b103      	cbz	r3, 800546e <_read_r+0x1e>
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	200004e4 	.word	0x200004e4

08005474 <_write_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4d07      	ldr	r5, [pc, #28]	@ (8005494 <_write_r+0x20>)
 8005478:	4604      	mov	r4, r0
 800547a:	4608      	mov	r0, r1
 800547c:	4611      	mov	r1, r2
 800547e:	2200      	movs	r2, #0
 8005480:	602a      	str	r2, [r5, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	f7fb fba1 	bl	8000bca <_write>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_write_r+0x1e>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_write_r+0x1e>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	200004e4 	.word	0x200004e4

08005498 <__errno>:
 8005498:	4b01      	ldr	r3, [pc, #4]	@ (80054a0 <__errno+0x8>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000028 	.word	0x20000028

080054a4 <__libc_init_array>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	4d0d      	ldr	r5, [pc, #52]	@ (80054dc <__libc_init_array+0x38>)
 80054a8:	4c0d      	ldr	r4, [pc, #52]	@ (80054e0 <__libc_init_array+0x3c>)
 80054aa:	1b64      	subs	r4, r4, r5
 80054ac:	10a4      	asrs	r4, r4, #2
 80054ae:	2600      	movs	r6, #0
 80054b0:	42a6      	cmp	r6, r4
 80054b2:	d109      	bne.n	80054c8 <__libc_init_array+0x24>
 80054b4:	4d0b      	ldr	r5, [pc, #44]	@ (80054e4 <__libc_init_array+0x40>)
 80054b6:	4c0c      	ldr	r4, [pc, #48]	@ (80054e8 <__libc_init_array+0x44>)
 80054b8:	f000 fd24 	bl	8005f04 <_init>
 80054bc:	1b64      	subs	r4, r4, r5
 80054be:	10a4      	asrs	r4, r4, #2
 80054c0:	2600      	movs	r6, #0
 80054c2:	42a6      	cmp	r6, r4
 80054c4:	d105      	bne.n	80054d2 <__libc_init_array+0x2e>
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
 80054c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054cc:	4798      	blx	r3
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7ee      	b.n	80054b0 <__libc_init_array+0xc>
 80054d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d6:	4798      	blx	r3
 80054d8:	3601      	adds	r6, #1
 80054da:	e7f2      	b.n	80054c2 <__libc_init_array+0x1e>
 80054dc:	08005fa4 	.word	0x08005fa4
 80054e0:	08005fa4 	.word	0x08005fa4
 80054e4:	08005fa4 	.word	0x08005fa4
 80054e8:	08005fa8 	.word	0x08005fa8

080054ec <__retarget_lock_init_recursive>:
 80054ec:	4770      	bx	lr

080054ee <__retarget_lock_acquire_recursive>:
 80054ee:	4770      	bx	lr

080054f0 <__retarget_lock_release_recursive>:
 80054f0:	4770      	bx	lr
	...

080054f4 <_free_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4605      	mov	r5, r0
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d041      	beq.n	8005580 <_free_r+0x8c>
 80054fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005500:	1f0c      	subs	r4, r1, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	bfb8      	it	lt
 8005506:	18e4      	addlt	r4, r4, r3
 8005508:	f000 f8e0 	bl	80056cc <__malloc_lock>
 800550c:	4a1d      	ldr	r2, [pc, #116]	@ (8005584 <_free_r+0x90>)
 800550e:	6813      	ldr	r3, [r2, #0]
 8005510:	b933      	cbnz	r3, 8005520 <_free_r+0x2c>
 8005512:	6063      	str	r3, [r4, #4]
 8005514:	6014      	str	r4, [r2, #0]
 8005516:	4628      	mov	r0, r5
 8005518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800551c:	f000 b8dc 	b.w	80056d8 <__malloc_unlock>
 8005520:	42a3      	cmp	r3, r4
 8005522:	d908      	bls.n	8005536 <_free_r+0x42>
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	1821      	adds	r1, r4, r0
 8005528:	428b      	cmp	r3, r1
 800552a:	bf01      	itttt	eq
 800552c:	6819      	ldreq	r1, [r3, #0]
 800552e:	685b      	ldreq	r3, [r3, #4]
 8005530:	1809      	addeq	r1, r1, r0
 8005532:	6021      	streq	r1, [r4, #0]
 8005534:	e7ed      	b.n	8005512 <_free_r+0x1e>
 8005536:	461a      	mov	r2, r3
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	b10b      	cbz	r3, 8005540 <_free_r+0x4c>
 800553c:	42a3      	cmp	r3, r4
 800553e:	d9fa      	bls.n	8005536 <_free_r+0x42>
 8005540:	6811      	ldr	r1, [r2, #0]
 8005542:	1850      	adds	r0, r2, r1
 8005544:	42a0      	cmp	r0, r4
 8005546:	d10b      	bne.n	8005560 <_free_r+0x6c>
 8005548:	6820      	ldr	r0, [r4, #0]
 800554a:	4401      	add	r1, r0
 800554c:	1850      	adds	r0, r2, r1
 800554e:	4283      	cmp	r3, r0
 8005550:	6011      	str	r1, [r2, #0]
 8005552:	d1e0      	bne.n	8005516 <_free_r+0x22>
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	6053      	str	r3, [r2, #4]
 800555a:	4408      	add	r0, r1
 800555c:	6010      	str	r0, [r2, #0]
 800555e:	e7da      	b.n	8005516 <_free_r+0x22>
 8005560:	d902      	bls.n	8005568 <_free_r+0x74>
 8005562:	230c      	movs	r3, #12
 8005564:	602b      	str	r3, [r5, #0]
 8005566:	e7d6      	b.n	8005516 <_free_r+0x22>
 8005568:	6820      	ldr	r0, [r4, #0]
 800556a:	1821      	adds	r1, r4, r0
 800556c:	428b      	cmp	r3, r1
 800556e:	bf04      	itt	eq
 8005570:	6819      	ldreq	r1, [r3, #0]
 8005572:	685b      	ldreq	r3, [r3, #4]
 8005574:	6063      	str	r3, [r4, #4]
 8005576:	bf04      	itt	eq
 8005578:	1809      	addeq	r1, r1, r0
 800557a:	6021      	streq	r1, [r4, #0]
 800557c:	6054      	str	r4, [r2, #4]
 800557e:	e7ca      	b.n	8005516 <_free_r+0x22>
 8005580:	bd38      	pop	{r3, r4, r5, pc}
 8005582:	bf00      	nop
 8005584:	200004f0 	.word	0x200004f0

08005588 <sbrk_aligned>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4e0f      	ldr	r6, [pc, #60]	@ (80055c8 <sbrk_aligned+0x40>)
 800558c:	460c      	mov	r4, r1
 800558e:	6831      	ldr	r1, [r6, #0]
 8005590:	4605      	mov	r5, r0
 8005592:	b911      	cbnz	r1, 800559a <sbrk_aligned+0x12>
 8005594:	f000 fca6 	bl	8005ee4 <_sbrk_r>
 8005598:	6030      	str	r0, [r6, #0]
 800559a:	4621      	mov	r1, r4
 800559c:	4628      	mov	r0, r5
 800559e:	f000 fca1 	bl	8005ee4 <_sbrk_r>
 80055a2:	1c43      	adds	r3, r0, #1
 80055a4:	d103      	bne.n	80055ae <sbrk_aligned+0x26>
 80055a6:	f04f 34ff 	mov.w	r4, #4294967295
 80055aa:	4620      	mov	r0, r4
 80055ac:	bd70      	pop	{r4, r5, r6, pc}
 80055ae:	1cc4      	adds	r4, r0, #3
 80055b0:	f024 0403 	bic.w	r4, r4, #3
 80055b4:	42a0      	cmp	r0, r4
 80055b6:	d0f8      	beq.n	80055aa <sbrk_aligned+0x22>
 80055b8:	1a21      	subs	r1, r4, r0
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 fc92 	bl	8005ee4 <_sbrk_r>
 80055c0:	3001      	adds	r0, #1
 80055c2:	d1f2      	bne.n	80055aa <sbrk_aligned+0x22>
 80055c4:	e7ef      	b.n	80055a6 <sbrk_aligned+0x1e>
 80055c6:	bf00      	nop
 80055c8:	200004ec 	.word	0x200004ec

080055cc <_malloc_r>:
 80055cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055d0:	1ccd      	adds	r5, r1, #3
 80055d2:	f025 0503 	bic.w	r5, r5, #3
 80055d6:	3508      	adds	r5, #8
 80055d8:	2d0c      	cmp	r5, #12
 80055da:	bf38      	it	cc
 80055dc:	250c      	movcc	r5, #12
 80055de:	2d00      	cmp	r5, #0
 80055e0:	4606      	mov	r6, r0
 80055e2:	db01      	blt.n	80055e8 <_malloc_r+0x1c>
 80055e4:	42a9      	cmp	r1, r5
 80055e6:	d904      	bls.n	80055f2 <_malloc_r+0x26>
 80055e8:	230c      	movs	r3, #12
 80055ea:	6033      	str	r3, [r6, #0]
 80055ec:	2000      	movs	r0, #0
 80055ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056c8 <_malloc_r+0xfc>
 80055f6:	f000 f869 	bl	80056cc <__malloc_lock>
 80055fa:	f8d8 3000 	ldr.w	r3, [r8]
 80055fe:	461c      	mov	r4, r3
 8005600:	bb44      	cbnz	r4, 8005654 <_malloc_r+0x88>
 8005602:	4629      	mov	r1, r5
 8005604:	4630      	mov	r0, r6
 8005606:	f7ff ffbf 	bl	8005588 <sbrk_aligned>
 800560a:	1c43      	adds	r3, r0, #1
 800560c:	4604      	mov	r4, r0
 800560e:	d158      	bne.n	80056c2 <_malloc_r+0xf6>
 8005610:	f8d8 4000 	ldr.w	r4, [r8]
 8005614:	4627      	mov	r7, r4
 8005616:	2f00      	cmp	r7, #0
 8005618:	d143      	bne.n	80056a2 <_malloc_r+0xd6>
 800561a:	2c00      	cmp	r4, #0
 800561c:	d04b      	beq.n	80056b6 <_malloc_r+0xea>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	4639      	mov	r1, r7
 8005622:	4630      	mov	r0, r6
 8005624:	eb04 0903 	add.w	r9, r4, r3
 8005628:	f000 fc5c 	bl	8005ee4 <_sbrk_r>
 800562c:	4581      	cmp	r9, r0
 800562e:	d142      	bne.n	80056b6 <_malloc_r+0xea>
 8005630:	6821      	ldr	r1, [r4, #0]
 8005632:	1a6d      	subs	r5, r5, r1
 8005634:	4629      	mov	r1, r5
 8005636:	4630      	mov	r0, r6
 8005638:	f7ff ffa6 	bl	8005588 <sbrk_aligned>
 800563c:	3001      	adds	r0, #1
 800563e:	d03a      	beq.n	80056b6 <_malloc_r+0xea>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	442b      	add	r3, r5
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	f8d8 3000 	ldr.w	r3, [r8]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	bb62      	cbnz	r2, 80056a8 <_malloc_r+0xdc>
 800564e:	f8c8 7000 	str.w	r7, [r8]
 8005652:	e00f      	b.n	8005674 <_malloc_r+0xa8>
 8005654:	6822      	ldr	r2, [r4, #0]
 8005656:	1b52      	subs	r2, r2, r5
 8005658:	d420      	bmi.n	800569c <_malloc_r+0xd0>
 800565a:	2a0b      	cmp	r2, #11
 800565c:	d917      	bls.n	800568e <_malloc_r+0xc2>
 800565e:	1961      	adds	r1, r4, r5
 8005660:	42a3      	cmp	r3, r4
 8005662:	6025      	str	r5, [r4, #0]
 8005664:	bf18      	it	ne
 8005666:	6059      	strne	r1, [r3, #4]
 8005668:	6863      	ldr	r3, [r4, #4]
 800566a:	bf08      	it	eq
 800566c:	f8c8 1000 	streq.w	r1, [r8]
 8005670:	5162      	str	r2, [r4, r5]
 8005672:	604b      	str	r3, [r1, #4]
 8005674:	4630      	mov	r0, r6
 8005676:	f000 f82f 	bl	80056d8 <__malloc_unlock>
 800567a:	f104 000b 	add.w	r0, r4, #11
 800567e:	1d23      	adds	r3, r4, #4
 8005680:	f020 0007 	bic.w	r0, r0, #7
 8005684:	1ac2      	subs	r2, r0, r3
 8005686:	bf1c      	itt	ne
 8005688:	1a1b      	subne	r3, r3, r0
 800568a:	50a3      	strne	r3, [r4, r2]
 800568c:	e7af      	b.n	80055ee <_malloc_r+0x22>
 800568e:	6862      	ldr	r2, [r4, #4]
 8005690:	42a3      	cmp	r3, r4
 8005692:	bf0c      	ite	eq
 8005694:	f8c8 2000 	streq.w	r2, [r8]
 8005698:	605a      	strne	r2, [r3, #4]
 800569a:	e7eb      	b.n	8005674 <_malloc_r+0xa8>
 800569c:	4623      	mov	r3, r4
 800569e:	6864      	ldr	r4, [r4, #4]
 80056a0:	e7ae      	b.n	8005600 <_malloc_r+0x34>
 80056a2:	463c      	mov	r4, r7
 80056a4:	687f      	ldr	r7, [r7, #4]
 80056a6:	e7b6      	b.n	8005616 <_malloc_r+0x4a>
 80056a8:	461a      	mov	r2, r3
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	d1fb      	bne.n	80056a8 <_malloc_r+0xdc>
 80056b0:	2300      	movs	r3, #0
 80056b2:	6053      	str	r3, [r2, #4]
 80056b4:	e7de      	b.n	8005674 <_malloc_r+0xa8>
 80056b6:	230c      	movs	r3, #12
 80056b8:	6033      	str	r3, [r6, #0]
 80056ba:	4630      	mov	r0, r6
 80056bc:	f000 f80c 	bl	80056d8 <__malloc_unlock>
 80056c0:	e794      	b.n	80055ec <_malloc_r+0x20>
 80056c2:	6005      	str	r5, [r0, #0]
 80056c4:	e7d6      	b.n	8005674 <_malloc_r+0xa8>
 80056c6:	bf00      	nop
 80056c8:	200004f0 	.word	0x200004f0

080056cc <__malloc_lock>:
 80056cc:	4801      	ldr	r0, [pc, #4]	@ (80056d4 <__malloc_lock+0x8>)
 80056ce:	f7ff bf0e 	b.w	80054ee <__retarget_lock_acquire_recursive>
 80056d2:	bf00      	nop
 80056d4:	200004e8 	.word	0x200004e8

080056d8 <__malloc_unlock>:
 80056d8:	4801      	ldr	r0, [pc, #4]	@ (80056e0 <__malloc_unlock+0x8>)
 80056da:	f7ff bf09 	b.w	80054f0 <__retarget_lock_release_recursive>
 80056de:	bf00      	nop
 80056e0:	200004e8 	.word	0x200004e8

080056e4 <__sfputc_r>:
 80056e4:	6893      	ldr	r3, [r2, #8]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	b410      	push	{r4}
 80056ec:	6093      	str	r3, [r2, #8]
 80056ee:	da08      	bge.n	8005702 <__sfputc_r+0x1e>
 80056f0:	6994      	ldr	r4, [r2, #24]
 80056f2:	42a3      	cmp	r3, r4
 80056f4:	db01      	blt.n	80056fa <__sfputc_r+0x16>
 80056f6:	290a      	cmp	r1, #10
 80056f8:	d103      	bne.n	8005702 <__sfputc_r+0x1e>
 80056fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056fe:	f7ff bde8 	b.w	80052d2 <__swbuf_r>
 8005702:	6813      	ldr	r3, [r2, #0]
 8005704:	1c58      	adds	r0, r3, #1
 8005706:	6010      	str	r0, [r2, #0]
 8005708:	7019      	strb	r1, [r3, #0]
 800570a:	4608      	mov	r0, r1
 800570c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005710:	4770      	bx	lr

08005712 <__sfputs_r>:
 8005712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005714:	4606      	mov	r6, r0
 8005716:	460f      	mov	r7, r1
 8005718:	4614      	mov	r4, r2
 800571a:	18d5      	adds	r5, r2, r3
 800571c:	42ac      	cmp	r4, r5
 800571e:	d101      	bne.n	8005724 <__sfputs_r+0x12>
 8005720:	2000      	movs	r0, #0
 8005722:	e007      	b.n	8005734 <__sfputs_r+0x22>
 8005724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005728:	463a      	mov	r2, r7
 800572a:	4630      	mov	r0, r6
 800572c:	f7ff ffda 	bl	80056e4 <__sfputc_r>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d1f3      	bne.n	800571c <__sfputs_r+0xa>
 8005734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005738 <_vfiprintf_r>:
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	460d      	mov	r5, r1
 800573e:	b09d      	sub	sp, #116	@ 0x74
 8005740:	4614      	mov	r4, r2
 8005742:	4698      	mov	r8, r3
 8005744:	4606      	mov	r6, r0
 8005746:	b118      	cbz	r0, 8005750 <_vfiprintf_r+0x18>
 8005748:	6a03      	ldr	r3, [r0, #32]
 800574a:	b90b      	cbnz	r3, 8005750 <_vfiprintf_r+0x18>
 800574c:	f7ff fd36 	bl	80051bc <__sinit>
 8005750:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005752:	07d9      	lsls	r1, r3, #31
 8005754:	d405      	bmi.n	8005762 <_vfiprintf_r+0x2a>
 8005756:	89ab      	ldrh	r3, [r5, #12]
 8005758:	059a      	lsls	r2, r3, #22
 800575a:	d402      	bmi.n	8005762 <_vfiprintf_r+0x2a>
 800575c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800575e:	f7ff fec6 	bl	80054ee <__retarget_lock_acquire_recursive>
 8005762:	89ab      	ldrh	r3, [r5, #12]
 8005764:	071b      	lsls	r3, r3, #28
 8005766:	d501      	bpl.n	800576c <_vfiprintf_r+0x34>
 8005768:	692b      	ldr	r3, [r5, #16]
 800576a:	b99b      	cbnz	r3, 8005794 <_vfiprintf_r+0x5c>
 800576c:	4629      	mov	r1, r5
 800576e:	4630      	mov	r0, r6
 8005770:	f7ff fdee 	bl	8005350 <__swsetup_r>
 8005774:	b170      	cbz	r0, 8005794 <_vfiprintf_r+0x5c>
 8005776:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005778:	07dc      	lsls	r4, r3, #31
 800577a:	d504      	bpl.n	8005786 <_vfiprintf_r+0x4e>
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	b01d      	add	sp, #116	@ 0x74
 8005782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005786:	89ab      	ldrh	r3, [r5, #12]
 8005788:	0598      	lsls	r0, r3, #22
 800578a:	d4f7      	bmi.n	800577c <_vfiprintf_r+0x44>
 800578c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800578e:	f7ff feaf 	bl	80054f0 <__retarget_lock_release_recursive>
 8005792:	e7f3      	b.n	800577c <_vfiprintf_r+0x44>
 8005794:	2300      	movs	r3, #0
 8005796:	9309      	str	r3, [sp, #36]	@ 0x24
 8005798:	2320      	movs	r3, #32
 800579a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800579e:	f8cd 800c 	str.w	r8, [sp, #12]
 80057a2:	2330      	movs	r3, #48	@ 0x30
 80057a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005954 <_vfiprintf_r+0x21c>
 80057a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057ac:	f04f 0901 	mov.w	r9, #1
 80057b0:	4623      	mov	r3, r4
 80057b2:	469a      	mov	sl, r3
 80057b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057b8:	b10a      	cbz	r2, 80057be <_vfiprintf_r+0x86>
 80057ba:	2a25      	cmp	r2, #37	@ 0x25
 80057bc:	d1f9      	bne.n	80057b2 <_vfiprintf_r+0x7a>
 80057be:	ebba 0b04 	subs.w	fp, sl, r4
 80057c2:	d00b      	beq.n	80057dc <_vfiprintf_r+0xa4>
 80057c4:	465b      	mov	r3, fp
 80057c6:	4622      	mov	r2, r4
 80057c8:	4629      	mov	r1, r5
 80057ca:	4630      	mov	r0, r6
 80057cc:	f7ff ffa1 	bl	8005712 <__sfputs_r>
 80057d0:	3001      	adds	r0, #1
 80057d2:	f000 80a7 	beq.w	8005924 <_vfiprintf_r+0x1ec>
 80057d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057d8:	445a      	add	r2, fp
 80057da:	9209      	str	r2, [sp, #36]	@ 0x24
 80057dc:	f89a 3000 	ldrb.w	r3, [sl]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 809f 	beq.w	8005924 <_vfiprintf_r+0x1ec>
 80057e6:	2300      	movs	r3, #0
 80057e8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057f0:	f10a 0a01 	add.w	sl, sl, #1
 80057f4:	9304      	str	r3, [sp, #16]
 80057f6:	9307      	str	r3, [sp, #28]
 80057f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80057fe:	4654      	mov	r4, sl
 8005800:	2205      	movs	r2, #5
 8005802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005806:	4853      	ldr	r0, [pc, #332]	@ (8005954 <_vfiprintf_r+0x21c>)
 8005808:	f7fa fce2 	bl	80001d0 <memchr>
 800580c:	9a04      	ldr	r2, [sp, #16]
 800580e:	b9d8      	cbnz	r0, 8005848 <_vfiprintf_r+0x110>
 8005810:	06d1      	lsls	r1, r2, #27
 8005812:	bf44      	itt	mi
 8005814:	2320      	movmi	r3, #32
 8005816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800581a:	0713      	lsls	r3, r2, #28
 800581c:	bf44      	itt	mi
 800581e:	232b      	movmi	r3, #43	@ 0x2b
 8005820:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005824:	f89a 3000 	ldrb.w	r3, [sl]
 8005828:	2b2a      	cmp	r3, #42	@ 0x2a
 800582a:	d015      	beq.n	8005858 <_vfiprintf_r+0x120>
 800582c:	9a07      	ldr	r2, [sp, #28]
 800582e:	4654      	mov	r4, sl
 8005830:	2000      	movs	r0, #0
 8005832:	f04f 0c0a 	mov.w	ip, #10
 8005836:	4621      	mov	r1, r4
 8005838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800583c:	3b30      	subs	r3, #48	@ 0x30
 800583e:	2b09      	cmp	r3, #9
 8005840:	d94b      	bls.n	80058da <_vfiprintf_r+0x1a2>
 8005842:	b1b0      	cbz	r0, 8005872 <_vfiprintf_r+0x13a>
 8005844:	9207      	str	r2, [sp, #28]
 8005846:	e014      	b.n	8005872 <_vfiprintf_r+0x13a>
 8005848:	eba0 0308 	sub.w	r3, r0, r8
 800584c:	fa09 f303 	lsl.w	r3, r9, r3
 8005850:	4313      	orrs	r3, r2
 8005852:	9304      	str	r3, [sp, #16]
 8005854:	46a2      	mov	sl, r4
 8005856:	e7d2      	b.n	80057fe <_vfiprintf_r+0xc6>
 8005858:	9b03      	ldr	r3, [sp, #12]
 800585a:	1d19      	adds	r1, r3, #4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	9103      	str	r1, [sp, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	bfbb      	ittet	lt
 8005864:	425b      	neglt	r3, r3
 8005866:	f042 0202 	orrlt.w	r2, r2, #2
 800586a:	9307      	strge	r3, [sp, #28]
 800586c:	9307      	strlt	r3, [sp, #28]
 800586e:	bfb8      	it	lt
 8005870:	9204      	strlt	r2, [sp, #16]
 8005872:	7823      	ldrb	r3, [r4, #0]
 8005874:	2b2e      	cmp	r3, #46	@ 0x2e
 8005876:	d10a      	bne.n	800588e <_vfiprintf_r+0x156>
 8005878:	7863      	ldrb	r3, [r4, #1]
 800587a:	2b2a      	cmp	r3, #42	@ 0x2a
 800587c:	d132      	bne.n	80058e4 <_vfiprintf_r+0x1ac>
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	1d1a      	adds	r2, r3, #4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	9203      	str	r2, [sp, #12]
 8005886:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800588a:	3402      	adds	r4, #2
 800588c:	9305      	str	r3, [sp, #20]
 800588e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005964 <_vfiprintf_r+0x22c>
 8005892:	7821      	ldrb	r1, [r4, #0]
 8005894:	2203      	movs	r2, #3
 8005896:	4650      	mov	r0, sl
 8005898:	f7fa fc9a 	bl	80001d0 <memchr>
 800589c:	b138      	cbz	r0, 80058ae <_vfiprintf_r+0x176>
 800589e:	9b04      	ldr	r3, [sp, #16]
 80058a0:	eba0 000a 	sub.w	r0, r0, sl
 80058a4:	2240      	movs	r2, #64	@ 0x40
 80058a6:	4082      	lsls	r2, r0
 80058a8:	4313      	orrs	r3, r2
 80058aa:	3401      	adds	r4, #1
 80058ac:	9304      	str	r3, [sp, #16]
 80058ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b2:	4829      	ldr	r0, [pc, #164]	@ (8005958 <_vfiprintf_r+0x220>)
 80058b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058b8:	2206      	movs	r2, #6
 80058ba:	f7fa fc89 	bl	80001d0 <memchr>
 80058be:	2800      	cmp	r0, #0
 80058c0:	d03f      	beq.n	8005942 <_vfiprintf_r+0x20a>
 80058c2:	4b26      	ldr	r3, [pc, #152]	@ (800595c <_vfiprintf_r+0x224>)
 80058c4:	bb1b      	cbnz	r3, 800590e <_vfiprintf_r+0x1d6>
 80058c6:	9b03      	ldr	r3, [sp, #12]
 80058c8:	3307      	adds	r3, #7
 80058ca:	f023 0307 	bic.w	r3, r3, #7
 80058ce:	3308      	adds	r3, #8
 80058d0:	9303      	str	r3, [sp, #12]
 80058d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d4:	443b      	add	r3, r7
 80058d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80058d8:	e76a      	b.n	80057b0 <_vfiprintf_r+0x78>
 80058da:	fb0c 3202 	mla	r2, ip, r2, r3
 80058de:	460c      	mov	r4, r1
 80058e0:	2001      	movs	r0, #1
 80058e2:	e7a8      	b.n	8005836 <_vfiprintf_r+0xfe>
 80058e4:	2300      	movs	r3, #0
 80058e6:	3401      	adds	r4, #1
 80058e8:	9305      	str	r3, [sp, #20]
 80058ea:	4619      	mov	r1, r3
 80058ec:	f04f 0c0a 	mov.w	ip, #10
 80058f0:	4620      	mov	r0, r4
 80058f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058f6:	3a30      	subs	r2, #48	@ 0x30
 80058f8:	2a09      	cmp	r2, #9
 80058fa:	d903      	bls.n	8005904 <_vfiprintf_r+0x1cc>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0c6      	beq.n	800588e <_vfiprintf_r+0x156>
 8005900:	9105      	str	r1, [sp, #20]
 8005902:	e7c4      	b.n	800588e <_vfiprintf_r+0x156>
 8005904:	fb0c 2101 	mla	r1, ip, r1, r2
 8005908:	4604      	mov	r4, r0
 800590a:	2301      	movs	r3, #1
 800590c:	e7f0      	b.n	80058f0 <_vfiprintf_r+0x1b8>
 800590e:	ab03      	add	r3, sp, #12
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	462a      	mov	r2, r5
 8005914:	4b12      	ldr	r3, [pc, #72]	@ (8005960 <_vfiprintf_r+0x228>)
 8005916:	a904      	add	r1, sp, #16
 8005918:	4630      	mov	r0, r6
 800591a:	f3af 8000 	nop.w
 800591e:	4607      	mov	r7, r0
 8005920:	1c78      	adds	r0, r7, #1
 8005922:	d1d6      	bne.n	80058d2 <_vfiprintf_r+0x19a>
 8005924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005926:	07d9      	lsls	r1, r3, #31
 8005928:	d405      	bmi.n	8005936 <_vfiprintf_r+0x1fe>
 800592a:	89ab      	ldrh	r3, [r5, #12]
 800592c:	059a      	lsls	r2, r3, #22
 800592e:	d402      	bmi.n	8005936 <_vfiprintf_r+0x1fe>
 8005930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005932:	f7ff fddd 	bl	80054f0 <__retarget_lock_release_recursive>
 8005936:	89ab      	ldrh	r3, [r5, #12]
 8005938:	065b      	lsls	r3, r3, #25
 800593a:	f53f af1f 	bmi.w	800577c <_vfiprintf_r+0x44>
 800593e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005940:	e71e      	b.n	8005780 <_vfiprintf_r+0x48>
 8005942:	ab03      	add	r3, sp, #12
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	462a      	mov	r2, r5
 8005948:	4b05      	ldr	r3, [pc, #20]	@ (8005960 <_vfiprintf_r+0x228>)
 800594a:	a904      	add	r1, sp, #16
 800594c:	4630      	mov	r0, r6
 800594e:	f000 f879 	bl	8005a44 <_printf_i>
 8005952:	e7e4      	b.n	800591e <_vfiprintf_r+0x1e6>
 8005954:	08005f68 	.word	0x08005f68
 8005958:	08005f72 	.word	0x08005f72
 800595c:	00000000 	.word	0x00000000
 8005960:	08005713 	.word	0x08005713
 8005964:	08005f6e 	.word	0x08005f6e

08005968 <_printf_common>:
 8005968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800596c:	4616      	mov	r6, r2
 800596e:	4698      	mov	r8, r3
 8005970:	688a      	ldr	r2, [r1, #8]
 8005972:	690b      	ldr	r3, [r1, #16]
 8005974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005978:	4293      	cmp	r3, r2
 800597a:	bfb8      	it	lt
 800597c:	4613      	movlt	r3, r2
 800597e:	6033      	str	r3, [r6, #0]
 8005980:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005984:	4607      	mov	r7, r0
 8005986:	460c      	mov	r4, r1
 8005988:	b10a      	cbz	r2, 800598e <_printf_common+0x26>
 800598a:	3301      	adds	r3, #1
 800598c:	6033      	str	r3, [r6, #0]
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	0699      	lsls	r1, r3, #26
 8005992:	bf42      	ittt	mi
 8005994:	6833      	ldrmi	r3, [r6, #0]
 8005996:	3302      	addmi	r3, #2
 8005998:	6033      	strmi	r3, [r6, #0]
 800599a:	6825      	ldr	r5, [r4, #0]
 800599c:	f015 0506 	ands.w	r5, r5, #6
 80059a0:	d106      	bne.n	80059b0 <_printf_common+0x48>
 80059a2:	f104 0a19 	add.w	sl, r4, #25
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	6832      	ldr	r2, [r6, #0]
 80059aa:	1a9b      	subs	r3, r3, r2
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dc26      	bgt.n	80059fe <_printf_common+0x96>
 80059b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059b4:	6822      	ldr	r2, [r4, #0]
 80059b6:	3b00      	subs	r3, #0
 80059b8:	bf18      	it	ne
 80059ba:	2301      	movne	r3, #1
 80059bc:	0692      	lsls	r2, r2, #26
 80059be:	d42b      	bmi.n	8005a18 <_printf_common+0xb0>
 80059c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059c4:	4641      	mov	r1, r8
 80059c6:	4638      	mov	r0, r7
 80059c8:	47c8      	blx	r9
 80059ca:	3001      	adds	r0, #1
 80059cc:	d01e      	beq.n	8005a0c <_printf_common+0xa4>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	6922      	ldr	r2, [r4, #16]
 80059d2:	f003 0306 	and.w	r3, r3, #6
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	bf02      	ittt	eq
 80059da:	68e5      	ldreq	r5, [r4, #12]
 80059dc:	6833      	ldreq	r3, [r6, #0]
 80059de:	1aed      	subeq	r5, r5, r3
 80059e0:	68a3      	ldr	r3, [r4, #8]
 80059e2:	bf0c      	ite	eq
 80059e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059e8:	2500      	movne	r5, #0
 80059ea:	4293      	cmp	r3, r2
 80059ec:	bfc4      	itt	gt
 80059ee:	1a9b      	subgt	r3, r3, r2
 80059f0:	18ed      	addgt	r5, r5, r3
 80059f2:	2600      	movs	r6, #0
 80059f4:	341a      	adds	r4, #26
 80059f6:	42b5      	cmp	r5, r6
 80059f8:	d11a      	bne.n	8005a30 <_printf_common+0xc8>
 80059fa:	2000      	movs	r0, #0
 80059fc:	e008      	b.n	8005a10 <_printf_common+0xa8>
 80059fe:	2301      	movs	r3, #1
 8005a00:	4652      	mov	r2, sl
 8005a02:	4641      	mov	r1, r8
 8005a04:	4638      	mov	r0, r7
 8005a06:	47c8      	blx	r9
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d103      	bne.n	8005a14 <_printf_common+0xac>
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a14:	3501      	adds	r5, #1
 8005a16:	e7c6      	b.n	80059a6 <_printf_common+0x3e>
 8005a18:	18e1      	adds	r1, r4, r3
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	2030      	movs	r0, #48	@ 0x30
 8005a1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a22:	4422      	add	r2, r4
 8005a24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	e7c7      	b.n	80059c0 <_printf_common+0x58>
 8005a30:	2301      	movs	r3, #1
 8005a32:	4622      	mov	r2, r4
 8005a34:	4641      	mov	r1, r8
 8005a36:	4638      	mov	r0, r7
 8005a38:	47c8      	blx	r9
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d0e6      	beq.n	8005a0c <_printf_common+0xa4>
 8005a3e:	3601      	adds	r6, #1
 8005a40:	e7d9      	b.n	80059f6 <_printf_common+0x8e>
	...

08005a44 <_printf_i>:
 8005a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	7e0f      	ldrb	r7, [r1, #24]
 8005a4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a4c:	2f78      	cmp	r7, #120	@ 0x78
 8005a4e:	4691      	mov	r9, r2
 8005a50:	4680      	mov	r8, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	469a      	mov	sl, r3
 8005a56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a5a:	d807      	bhi.n	8005a6c <_printf_i+0x28>
 8005a5c:	2f62      	cmp	r7, #98	@ 0x62
 8005a5e:	d80a      	bhi.n	8005a76 <_printf_i+0x32>
 8005a60:	2f00      	cmp	r7, #0
 8005a62:	f000 80d2 	beq.w	8005c0a <_printf_i+0x1c6>
 8005a66:	2f58      	cmp	r7, #88	@ 0x58
 8005a68:	f000 80b9 	beq.w	8005bde <_printf_i+0x19a>
 8005a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a74:	e03a      	b.n	8005aec <_printf_i+0xa8>
 8005a76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a7a:	2b15      	cmp	r3, #21
 8005a7c:	d8f6      	bhi.n	8005a6c <_printf_i+0x28>
 8005a7e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a84 <_printf_i+0x40>)
 8005a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a84:	08005add 	.word	0x08005add
 8005a88:	08005af1 	.word	0x08005af1
 8005a8c:	08005a6d 	.word	0x08005a6d
 8005a90:	08005a6d 	.word	0x08005a6d
 8005a94:	08005a6d 	.word	0x08005a6d
 8005a98:	08005a6d 	.word	0x08005a6d
 8005a9c:	08005af1 	.word	0x08005af1
 8005aa0:	08005a6d 	.word	0x08005a6d
 8005aa4:	08005a6d 	.word	0x08005a6d
 8005aa8:	08005a6d 	.word	0x08005a6d
 8005aac:	08005a6d 	.word	0x08005a6d
 8005ab0:	08005bf1 	.word	0x08005bf1
 8005ab4:	08005b1b 	.word	0x08005b1b
 8005ab8:	08005bab 	.word	0x08005bab
 8005abc:	08005a6d 	.word	0x08005a6d
 8005ac0:	08005a6d 	.word	0x08005a6d
 8005ac4:	08005c13 	.word	0x08005c13
 8005ac8:	08005a6d 	.word	0x08005a6d
 8005acc:	08005b1b 	.word	0x08005b1b
 8005ad0:	08005a6d 	.word	0x08005a6d
 8005ad4:	08005a6d 	.word	0x08005a6d
 8005ad8:	08005bb3 	.word	0x08005bb3
 8005adc:	6833      	ldr	r3, [r6, #0]
 8005ade:	1d1a      	adds	r2, r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6032      	str	r2, [r6, #0]
 8005ae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ae8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005aec:	2301      	movs	r3, #1
 8005aee:	e09d      	b.n	8005c2c <_printf_i+0x1e8>
 8005af0:	6833      	ldr	r3, [r6, #0]
 8005af2:	6820      	ldr	r0, [r4, #0]
 8005af4:	1d19      	adds	r1, r3, #4
 8005af6:	6031      	str	r1, [r6, #0]
 8005af8:	0606      	lsls	r6, r0, #24
 8005afa:	d501      	bpl.n	8005b00 <_printf_i+0xbc>
 8005afc:	681d      	ldr	r5, [r3, #0]
 8005afe:	e003      	b.n	8005b08 <_printf_i+0xc4>
 8005b00:	0645      	lsls	r5, r0, #25
 8005b02:	d5fb      	bpl.n	8005afc <_printf_i+0xb8>
 8005b04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b08:	2d00      	cmp	r5, #0
 8005b0a:	da03      	bge.n	8005b14 <_printf_i+0xd0>
 8005b0c:	232d      	movs	r3, #45	@ 0x2d
 8005b0e:	426d      	negs	r5, r5
 8005b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b14:	4859      	ldr	r0, [pc, #356]	@ (8005c7c <_printf_i+0x238>)
 8005b16:	230a      	movs	r3, #10
 8005b18:	e011      	b.n	8005b3e <_printf_i+0xfa>
 8005b1a:	6821      	ldr	r1, [r4, #0]
 8005b1c:	6833      	ldr	r3, [r6, #0]
 8005b1e:	0608      	lsls	r0, r1, #24
 8005b20:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b24:	d402      	bmi.n	8005b2c <_printf_i+0xe8>
 8005b26:	0649      	lsls	r1, r1, #25
 8005b28:	bf48      	it	mi
 8005b2a:	b2ad      	uxthmi	r5, r5
 8005b2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b2e:	4853      	ldr	r0, [pc, #332]	@ (8005c7c <_printf_i+0x238>)
 8005b30:	6033      	str	r3, [r6, #0]
 8005b32:	bf14      	ite	ne
 8005b34:	230a      	movne	r3, #10
 8005b36:	2308      	moveq	r3, #8
 8005b38:	2100      	movs	r1, #0
 8005b3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b3e:	6866      	ldr	r6, [r4, #4]
 8005b40:	60a6      	str	r6, [r4, #8]
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	bfa2      	ittt	ge
 8005b46:	6821      	ldrge	r1, [r4, #0]
 8005b48:	f021 0104 	bicge.w	r1, r1, #4
 8005b4c:	6021      	strge	r1, [r4, #0]
 8005b4e:	b90d      	cbnz	r5, 8005b54 <_printf_i+0x110>
 8005b50:	2e00      	cmp	r6, #0
 8005b52:	d04b      	beq.n	8005bec <_printf_i+0x1a8>
 8005b54:	4616      	mov	r6, r2
 8005b56:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b5a:	fb03 5711 	mls	r7, r3, r1, r5
 8005b5e:	5dc7      	ldrb	r7, [r0, r7]
 8005b60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b64:	462f      	mov	r7, r5
 8005b66:	42bb      	cmp	r3, r7
 8005b68:	460d      	mov	r5, r1
 8005b6a:	d9f4      	bls.n	8005b56 <_printf_i+0x112>
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d10b      	bne.n	8005b88 <_printf_i+0x144>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	07df      	lsls	r7, r3, #31
 8005b74:	d508      	bpl.n	8005b88 <_printf_i+0x144>
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	6861      	ldr	r1, [r4, #4]
 8005b7a:	4299      	cmp	r1, r3
 8005b7c:	bfde      	ittt	le
 8005b7e:	2330      	movle	r3, #48	@ 0x30
 8005b80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b88:	1b92      	subs	r2, r2, r6
 8005b8a:	6122      	str	r2, [r4, #16]
 8005b8c:	f8cd a000 	str.w	sl, [sp]
 8005b90:	464b      	mov	r3, r9
 8005b92:	aa03      	add	r2, sp, #12
 8005b94:	4621      	mov	r1, r4
 8005b96:	4640      	mov	r0, r8
 8005b98:	f7ff fee6 	bl	8005968 <_printf_common>
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d14a      	bne.n	8005c36 <_printf_i+0x1f2>
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba4:	b004      	add	sp, #16
 8005ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	f043 0320 	orr.w	r3, r3, #32
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	4833      	ldr	r0, [pc, #204]	@ (8005c80 <_printf_i+0x23c>)
 8005bb4:	2778      	movs	r7, #120	@ 0x78
 8005bb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	6831      	ldr	r1, [r6, #0]
 8005bbe:	061f      	lsls	r7, r3, #24
 8005bc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bc4:	d402      	bmi.n	8005bcc <_printf_i+0x188>
 8005bc6:	065f      	lsls	r7, r3, #25
 8005bc8:	bf48      	it	mi
 8005bca:	b2ad      	uxthmi	r5, r5
 8005bcc:	6031      	str	r1, [r6, #0]
 8005bce:	07d9      	lsls	r1, r3, #31
 8005bd0:	bf44      	itt	mi
 8005bd2:	f043 0320 	orrmi.w	r3, r3, #32
 8005bd6:	6023      	strmi	r3, [r4, #0]
 8005bd8:	b11d      	cbz	r5, 8005be2 <_printf_i+0x19e>
 8005bda:	2310      	movs	r3, #16
 8005bdc:	e7ac      	b.n	8005b38 <_printf_i+0xf4>
 8005bde:	4827      	ldr	r0, [pc, #156]	@ (8005c7c <_printf_i+0x238>)
 8005be0:	e7e9      	b.n	8005bb6 <_printf_i+0x172>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	f023 0320 	bic.w	r3, r3, #32
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	e7f6      	b.n	8005bda <_printf_i+0x196>
 8005bec:	4616      	mov	r6, r2
 8005bee:	e7bd      	b.n	8005b6c <_printf_i+0x128>
 8005bf0:	6833      	ldr	r3, [r6, #0]
 8005bf2:	6825      	ldr	r5, [r4, #0]
 8005bf4:	6961      	ldr	r1, [r4, #20]
 8005bf6:	1d18      	adds	r0, r3, #4
 8005bf8:	6030      	str	r0, [r6, #0]
 8005bfa:	062e      	lsls	r6, r5, #24
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	d501      	bpl.n	8005c04 <_printf_i+0x1c0>
 8005c00:	6019      	str	r1, [r3, #0]
 8005c02:	e002      	b.n	8005c0a <_printf_i+0x1c6>
 8005c04:	0668      	lsls	r0, r5, #25
 8005c06:	d5fb      	bpl.n	8005c00 <_printf_i+0x1bc>
 8005c08:	8019      	strh	r1, [r3, #0]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	6123      	str	r3, [r4, #16]
 8005c0e:	4616      	mov	r6, r2
 8005c10:	e7bc      	b.n	8005b8c <_printf_i+0x148>
 8005c12:	6833      	ldr	r3, [r6, #0]
 8005c14:	1d1a      	adds	r2, r3, #4
 8005c16:	6032      	str	r2, [r6, #0]
 8005c18:	681e      	ldr	r6, [r3, #0]
 8005c1a:	6862      	ldr	r2, [r4, #4]
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f7fa fad6 	bl	80001d0 <memchr>
 8005c24:	b108      	cbz	r0, 8005c2a <_printf_i+0x1e6>
 8005c26:	1b80      	subs	r0, r0, r6
 8005c28:	6060      	str	r0, [r4, #4]
 8005c2a:	6863      	ldr	r3, [r4, #4]
 8005c2c:	6123      	str	r3, [r4, #16]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c34:	e7aa      	b.n	8005b8c <_printf_i+0x148>
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	4632      	mov	r2, r6
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	47d0      	blx	sl
 8005c40:	3001      	adds	r0, #1
 8005c42:	d0ad      	beq.n	8005ba0 <_printf_i+0x15c>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	079b      	lsls	r3, r3, #30
 8005c48:	d413      	bmi.n	8005c72 <_printf_i+0x22e>
 8005c4a:	68e0      	ldr	r0, [r4, #12]
 8005c4c:	9b03      	ldr	r3, [sp, #12]
 8005c4e:	4298      	cmp	r0, r3
 8005c50:	bfb8      	it	lt
 8005c52:	4618      	movlt	r0, r3
 8005c54:	e7a6      	b.n	8005ba4 <_printf_i+0x160>
 8005c56:	2301      	movs	r3, #1
 8005c58:	4632      	mov	r2, r6
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	47d0      	blx	sl
 8005c60:	3001      	adds	r0, #1
 8005c62:	d09d      	beq.n	8005ba0 <_printf_i+0x15c>
 8005c64:	3501      	adds	r5, #1
 8005c66:	68e3      	ldr	r3, [r4, #12]
 8005c68:	9903      	ldr	r1, [sp, #12]
 8005c6a:	1a5b      	subs	r3, r3, r1
 8005c6c:	42ab      	cmp	r3, r5
 8005c6e:	dcf2      	bgt.n	8005c56 <_printf_i+0x212>
 8005c70:	e7eb      	b.n	8005c4a <_printf_i+0x206>
 8005c72:	2500      	movs	r5, #0
 8005c74:	f104 0619 	add.w	r6, r4, #25
 8005c78:	e7f5      	b.n	8005c66 <_printf_i+0x222>
 8005c7a:	bf00      	nop
 8005c7c:	08005f79 	.word	0x08005f79
 8005c80:	08005f8a 	.word	0x08005f8a

08005c84 <__sflush_r>:
 8005c84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8c:	0716      	lsls	r6, r2, #28
 8005c8e:	4605      	mov	r5, r0
 8005c90:	460c      	mov	r4, r1
 8005c92:	d454      	bmi.n	8005d3e <__sflush_r+0xba>
 8005c94:	684b      	ldr	r3, [r1, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	dc02      	bgt.n	8005ca0 <__sflush_r+0x1c>
 8005c9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	dd48      	ble.n	8005d32 <__sflush_r+0xae>
 8005ca0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ca2:	2e00      	cmp	r6, #0
 8005ca4:	d045      	beq.n	8005d32 <__sflush_r+0xae>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005cac:	682f      	ldr	r7, [r5, #0]
 8005cae:	6a21      	ldr	r1, [r4, #32]
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	d030      	beq.n	8005d16 <__sflush_r+0x92>
 8005cb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	0759      	lsls	r1, r3, #29
 8005cba:	d505      	bpl.n	8005cc8 <__sflush_r+0x44>
 8005cbc:	6863      	ldr	r3, [r4, #4]
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cc2:	b10b      	cbz	r3, 8005cc8 <__sflush_r+0x44>
 8005cc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cc6:	1ad2      	subs	r2, r2, r3
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ccc:	6a21      	ldr	r1, [r4, #32]
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b0      	blx	r6
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	d106      	bne.n	8005ce6 <__sflush_r+0x62>
 8005cd8:	6829      	ldr	r1, [r5, #0]
 8005cda:	291d      	cmp	r1, #29
 8005cdc:	d82b      	bhi.n	8005d36 <__sflush_r+0xb2>
 8005cde:	4a2a      	ldr	r2, [pc, #168]	@ (8005d88 <__sflush_r+0x104>)
 8005ce0:	410a      	asrs	r2, r1
 8005ce2:	07d6      	lsls	r6, r2, #31
 8005ce4:	d427      	bmi.n	8005d36 <__sflush_r+0xb2>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	6062      	str	r2, [r4, #4]
 8005cea:	04d9      	lsls	r1, r3, #19
 8005cec:	6922      	ldr	r2, [r4, #16]
 8005cee:	6022      	str	r2, [r4, #0]
 8005cf0:	d504      	bpl.n	8005cfc <__sflush_r+0x78>
 8005cf2:	1c42      	adds	r2, r0, #1
 8005cf4:	d101      	bne.n	8005cfa <__sflush_r+0x76>
 8005cf6:	682b      	ldr	r3, [r5, #0]
 8005cf8:	b903      	cbnz	r3, 8005cfc <__sflush_r+0x78>
 8005cfa:	6560      	str	r0, [r4, #84]	@ 0x54
 8005cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cfe:	602f      	str	r7, [r5, #0]
 8005d00:	b1b9      	cbz	r1, 8005d32 <__sflush_r+0xae>
 8005d02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d06:	4299      	cmp	r1, r3
 8005d08:	d002      	beq.n	8005d10 <__sflush_r+0x8c>
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f7ff fbf2 	bl	80054f4 <_free_r>
 8005d10:	2300      	movs	r3, #0
 8005d12:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d14:	e00d      	b.n	8005d32 <__sflush_r+0xae>
 8005d16:	2301      	movs	r3, #1
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b0      	blx	r6
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	1c50      	adds	r0, r2, #1
 8005d20:	d1c9      	bne.n	8005cb6 <__sflush_r+0x32>
 8005d22:	682b      	ldr	r3, [r5, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0c6      	beq.n	8005cb6 <__sflush_r+0x32>
 8005d28:	2b1d      	cmp	r3, #29
 8005d2a:	d001      	beq.n	8005d30 <__sflush_r+0xac>
 8005d2c:	2b16      	cmp	r3, #22
 8005d2e:	d11e      	bne.n	8005d6e <__sflush_r+0xea>
 8005d30:	602f      	str	r7, [r5, #0]
 8005d32:	2000      	movs	r0, #0
 8005d34:	e022      	b.n	8005d7c <__sflush_r+0xf8>
 8005d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d3a:	b21b      	sxth	r3, r3
 8005d3c:	e01b      	b.n	8005d76 <__sflush_r+0xf2>
 8005d3e:	690f      	ldr	r7, [r1, #16]
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	d0f6      	beq.n	8005d32 <__sflush_r+0xae>
 8005d44:	0793      	lsls	r3, r2, #30
 8005d46:	680e      	ldr	r6, [r1, #0]
 8005d48:	bf08      	it	eq
 8005d4a:	694b      	ldreq	r3, [r1, #20]
 8005d4c:	600f      	str	r7, [r1, #0]
 8005d4e:	bf18      	it	ne
 8005d50:	2300      	movne	r3, #0
 8005d52:	eba6 0807 	sub.w	r8, r6, r7
 8005d56:	608b      	str	r3, [r1, #8]
 8005d58:	f1b8 0f00 	cmp.w	r8, #0
 8005d5c:	dde9      	ble.n	8005d32 <__sflush_r+0xae>
 8005d5e:	6a21      	ldr	r1, [r4, #32]
 8005d60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d62:	4643      	mov	r3, r8
 8005d64:	463a      	mov	r2, r7
 8005d66:	4628      	mov	r0, r5
 8005d68:	47b0      	blx	r6
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	dc08      	bgt.n	8005d80 <__sflush_r+0xfc>
 8005d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d76:	81a3      	strh	r3, [r4, #12]
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d80:	4407      	add	r7, r0
 8005d82:	eba8 0800 	sub.w	r8, r8, r0
 8005d86:	e7e7      	b.n	8005d58 <__sflush_r+0xd4>
 8005d88:	dfbffffe 	.word	0xdfbffffe

08005d8c <_fflush_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	690b      	ldr	r3, [r1, #16]
 8005d90:	4605      	mov	r5, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	b913      	cbnz	r3, 8005d9c <_fflush_r+0x10>
 8005d96:	2500      	movs	r5, #0
 8005d98:	4628      	mov	r0, r5
 8005d9a:	bd38      	pop	{r3, r4, r5, pc}
 8005d9c:	b118      	cbz	r0, 8005da6 <_fflush_r+0x1a>
 8005d9e:	6a03      	ldr	r3, [r0, #32]
 8005da0:	b90b      	cbnz	r3, 8005da6 <_fflush_r+0x1a>
 8005da2:	f7ff fa0b 	bl	80051bc <__sinit>
 8005da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f3      	beq.n	8005d96 <_fflush_r+0xa>
 8005dae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005db0:	07d0      	lsls	r0, r2, #31
 8005db2:	d404      	bmi.n	8005dbe <_fflush_r+0x32>
 8005db4:	0599      	lsls	r1, r3, #22
 8005db6:	d402      	bmi.n	8005dbe <_fflush_r+0x32>
 8005db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dba:	f7ff fb98 	bl	80054ee <__retarget_lock_acquire_recursive>
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	f7ff ff5f 	bl	8005c84 <__sflush_r>
 8005dc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dc8:	07da      	lsls	r2, r3, #31
 8005dca:	4605      	mov	r5, r0
 8005dcc:	d4e4      	bmi.n	8005d98 <_fflush_r+0xc>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	059b      	lsls	r3, r3, #22
 8005dd2:	d4e1      	bmi.n	8005d98 <_fflush_r+0xc>
 8005dd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dd6:	f7ff fb8b 	bl	80054f0 <__retarget_lock_release_recursive>
 8005dda:	e7dd      	b.n	8005d98 <_fflush_r+0xc>

08005ddc <__swhatbuf_r>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	460c      	mov	r4, r1
 8005de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de4:	2900      	cmp	r1, #0
 8005de6:	b096      	sub	sp, #88	@ 0x58
 8005de8:	4615      	mov	r5, r2
 8005dea:	461e      	mov	r6, r3
 8005dec:	da0d      	bge.n	8005e0a <__swhatbuf_r+0x2e>
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005df4:	f04f 0100 	mov.w	r1, #0
 8005df8:	bf14      	ite	ne
 8005dfa:	2340      	movne	r3, #64	@ 0x40
 8005dfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e00:	2000      	movs	r0, #0
 8005e02:	6031      	str	r1, [r6, #0]
 8005e04:	602b      	str	r3, [r5, #0]
 8005e06:	b016      	add	sp, #88	@ 0x58
 8005e08:	bd70      	pop	{r4, r5, r6, pc}
 8005e0a:	466a      	mov	r2, sp
 8005e0c:	f000 f848 	bl	8005ea0 <_fstat_r>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	dbec      	blt.n	8005dee <__swhatbuf_r+0x12>
 8005e14:	9901      	ldr	r1, [sp, #4]
 8005e16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e1e:	4259      	negs	r1, r3
 8005e20:	4159      	adcs	r1, r3
 8005e22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e26:	e7eb      	b.n	8005e00 <__swhatbuf_r+0x24>

08005e28 <__smakebuf_r>:
 8005e28:	898b      	ldrh	r3, [r1, #12]
 8005e2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e2c:	079d      	lsls	r5, r3, #30
 8005e2e:	4606      	mov	r6, r0
 8005e30:	460c      	mov	r4, r1
 8005e32:	d507      	bpl.n	8005e44 <__smakebuf_r+0x1c>
 8005e34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	6123      	str	r3, [r4, #16]
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	6163      	str	r3, [r4, #20]
 8005e40:	b003      	add	sp, #12
 8005e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e44:	ab01      	add	r3, sp, #4
 8005e46:	466a      	mov	r2, sp
 8005e48:	f7ff ffc8 	bl	8005ddc <__swhatbuf_r>
 8005e4c:	9f00      	ldr	r7, [sp, #0]
 8005e4e:	4605      	mov	r5, r0
 8005e50:	4639      	mov	r1, r7
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7ff fbba 	bl	80055cc <_malloc_r>
 8005e58:	b948      	cbnz	r0, 8005e6e <__smakebuf_r+0x46>
 8005e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e5e:	059a      	lsls	r2, r3, #22
 8005e60:	d4ee      	bmi.n	8005e40 <__smakebuf_r+0x18>
 8005e62:	f023 0303 	bic.w	r3, r3, #3
 8005e66:	f043 0302 	orr.w	r3, r3, #2
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	e7e2      	b.n	8005e34 <__smakebuf_r+0xc>
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	6020      	str	r0, [r4, #0]
 8005e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e76:	81a3      	strh	r3, [r4, #12]
 8005e78:	9b01      	ldr	r3, [sp, #4]
 8005e7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e7e:	b15b      	cbz	r3, 8005e98 <__smakebuf_r+0x70>
 8005e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e84:	4630      	mov	r0, r6
 8005e86:	f000 f81d 	bl	8005ec4 <_isatty_r>
 8005e8a:	b128      	cbz	r0, 8005e98 <__smakebuf_r+0x70>
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	431d      	orrs	r5, r3
 8005e9c:	81a5      	strh	r5, [r4, #12]
 8005e9e:	e7cf      	b.n	8005e40 <__smakebuf_r+0x18>

08005ea0 <_fstat_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4d07      	ldr	r5, [pc, #28]	@ (8005ec0 <_fstat_r+0x20>)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	4611      	mov	r1, r2
 8005eac:	602b      	str	r3, [r5, #0]
 8005eae:	f7fa feb4 	bl	8000c1a <_fstat>
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	d102      	bne.n	8005ebc <_fstat_r+0x1c>
 8005eb6:	682b      	ldr	r3, [r5, #0]
 8005eb8:	b103      	cbz	r3, 8005ebc <_fstat_r+0x1c>
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	bd38      	pop	{r3, r4, r5, pc}
 8005ebe:	bf00      	nop
 8005ec0:	200004e4 	.word	0x200004e4

08005ec4 <_isatty_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4d06      	ldr	r5, [pc, #24]	@ (8005ee0 <_isatty_r+0x1c>)
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	602b      	str	r3, [r5, #0]
 8005ed0:	f7fa feb3 	bl	8000c3a <_isatty>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_isatty_r+0x1a>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_isatty_r+0x1a>
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	200004e4 	.word	0x200004e4

08005ee4 <_sbrk_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4d06      	ldr	r5, [pc, #24]	@ (8005f00 <_sbrk_r+0x1c>)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4604      	mov	r4, r0
 8005eec:	4608      	mov	r0, r1
 8005eee:	602b      	str	r3, [r5, #0]
 8005ef0:	f7fa febc 	bl	8000c6c <_sbrk>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d102      	bne.n	8005efe <_sbrk_r+0x1a>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	b103      	cbz	r3, 8005efe <_sbrk_r+0x1a>
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	200004e4 	.word	0x200004e4

08005f04 <_init>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	bf00      	nop
 8005f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0a:	bc08      	pop	{r3}
 8005f0c:	469e      	mov	lr, r3
 8005f0e:	4770      	bx	lr

08005f10 <_fini>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr
