
STM32F407ZGT6_My.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006954  08006954  00007954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a38  08006a38  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a38  08006a38  00007a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a40  08006a40  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a40  08006a40  00007a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a44  08006a44  00007a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006a48  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          00000488  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004f4  200004f4  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ffe6  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b82  00000000  00000000  00018082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  0001ac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad1  00000000  00000000  0001ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023405  00000000  00000000  0001c4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150b6  00000000  00000000  0003f8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9457  00000000  00000000  000549a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ddfb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004080  00000000  00000000  0011de40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00121ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800693c 	.word	0x0800693c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800693c 	.word	0x0800693c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b10      	ldr	r3, [pc, #64]	@ (80005ac <MX_DMA_Init+0x4c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <MX_DMA_Init+0x4c>)
 8000570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <MX_DMA_Init+0x4c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	2044      	movs	r0, #68	@ 0x44
 8000588:	f001 fafd 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800058c:	2044      	movs	r0, #68	@ 0x44
 800058e:	f001 fb16 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2046      	movs	r0, #70	@ 0x46
 8000598:	f001 faf5 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800059c:	2046      	movs	r0, #70	@ 0x46
 800059e:	f001 fb0e 	bl	8001bbe <HAL_NVIC_EnableIRQ>

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	@ 0x30
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
 80005ca:	4b49      	ldr	r3, [pc, #292]	@ (80006f0 <MX_GPIO_Init+0x140>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a48      	ldr	r2, [pc, #288]	@ (80006f0 <MX_GPIO_Init+0x140>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b46      	ldr	r3, [pc, #280]	@ (80006f0 <MX_GPIO_Init+0x140>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005de:	61bb      	str	r3, [r7, #24]
 80005e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	4b42      	ldr	r3, [pc, #264]	@ (80006f0 <MX_GPIO_Init+0x140>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a41      	ldr	r2, [pc, #260]	@ (80006f0 <MX_GPIO_Init+0x140>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b3f      	ldr	r3, [pc, #252]	@ (80006f0 <MX_GPIO_Init+0x140>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0320 	and.w	r3, r3, #32
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b3b      	ldr	r3, [pc, #236]	@ (80006f0 <MX_GPIO_Init+0x140>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a3a      	ldr	r2, [pc, #232]	@ (80006f0 <MX_GPIO_Init+0x140>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b38      	ldr	r3, [pc, #224]	@ (80006f0 <MX_GPIO_Init+0x140>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b34      	ldr	r3, [pc, #208]	@ (80006f0 <MX_GPIO_Init+0x140>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a33      	ldr	r2, [pc, #204]	@ (80006f0 <MX_GPIO_Init+0x140>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b31      	ldr	r3, [pc, #196]	@ (80006f0 <MX_GPIO_Init+0x140>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <MX_GPIO_Init+0x140>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a2c      	ldr	r2, [pc, #176]	@ (80006f0 <MX_GPIO_Init+0x140>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <MX_GPIO_Init+0x140>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <MX_GPIO_Init+0x140>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a25      	ldr	r2, [pc, #148]	@ (80006f0 <MX_GPIO_Init+0x140>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <MX_GPIO_Init+0x140>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000674:	481f      	ldr	r0, [pc, #124]	@ (80006f4 <MX_GPIO_Init+0x144>)
 8000676:	f002 f85b 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SEL1_GPIO_Port, SPI2_SEL1_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000680:	481d      	ldr	r0, [pc, #116]	@ (80006f8 <MX_GPIO_Init+0x148>)
 8000682:	f002 f855 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C1_CS_GPIO_Port, I2C1_CS_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2120      	movs	r1, #32
 800068a:	481c      	ldr	r0, [pc, #112]	@ (80006fc <MX_GPIO_Init+0x14c>)
 800068c:	f002 f850 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8000690:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4812      	ldr	r0, [pc, #72]	@ (80006f4 <MX_GPIO_Init+0x144>)
 80006aa:	f001 fea5 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SEL1_Pin */
  GPIO_InitStruct.Pin = SPI2_SEL1_Pin;
 80006ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006b8:	2302      	movs	r3, #2
 80006ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_SEL1_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_GPIO_Init+0x148>)
 80006c8:	f001 fe96 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_CS_Pin */
  GPIO_InitStruct.Pin = I2C1_CS_Pin;
 80006cc:	2320      	movs	r3, #32
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006d4:	2302      	movs	r3, #2
 80006d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(I2C1_CS_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <MX_GPIO_Init+0x14c>)
 80006e4:	f001 fe88 	bl	80023f8 <HAL_GPIO_Init>

}
 80006e8:	bf00      	nop
 80006ea:	3730      	adds	r7, #48	@ 0x30
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40021400 	.word	0x40021400
 80006f8:	40020c00 	.word	0x40020c00
 80006fc:	40020400 	.word	0x40020400

08000700 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <MX_I2C1_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_I2C1_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <MX_I2C1_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_I2C1_Init+0x50>)
 800071e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_I2C1_Init+0x50>)
 800073e:	f002 f82b 	bl	8002798 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 f940 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000088 	.word	0x20000088
 8000754:	40005400 	.word	0x40005400
 8000758:	000186a0 	.word	0x000186a0

0800075c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a19      	ldr	r2, [pc, #100]	@ (80007e0 <HAL_I2C_MspInit+0x84>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d12b      	bne.n	80007d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <HAL_I2C_MspInit+0x88>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a17      	ldr	r2, [pc, #92]	@ (80007e4 <HAL_I2C_MspInit+0x88>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <HAL_I2C_MspInit+0x88>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800079a:	23c0      	movs	r3, #192	@ 0xc0
 800079c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079e:	2312      	movs	r3, #18
 80007a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007aa:	2304      	movs	r3, #4
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <HAL_I2C_MspInit+0x8c>)
 80007b6:	f001 fe1f 	bl	80023f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <HAL_I2C_MspInit+0x88>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	4a08      	ldr	r2, [pc, #32]	@ (80007e4 <HAL_I2C_MspInit+0x88>)
 80007c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <HAL_I2C_MspInit+0x88>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007d6:	bf00      	nop
 80007d8:	3728      	adds	r7, #40	@ 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40005400 	.word	0x40005400
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020400 	.word	0x40020400

080007ec <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 80007f4:	1d39      	adds	r1, r7, #4
 80007f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007fa:	2201      	movs	r2, #1
 80007fc:	4803      	ldr	r0, [pc, #12]	@ (800080c <__io_putchar+0x20>)
 80007fe:	f003 ff41 	bl	8004684 <HAL_UART_Transmit>
	return ch;
 8000802:	687b      	ldr	r3, [r7, #4]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000013c 	.word	0x2000013c

08000810 <HAL_UARTEx_RxEventCallback>:
	}
}


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a0d      	ldr	r2, [pc, #52]	@ (8000854 <HAL_UARTEx_RxEventCallback+0x44>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d113      	bne.n	800084c <HAL_UARTEx_RxEventCallback+0x3c>
    {
    	rx_num = Size;
 8000824:	887b      	ldrh	r3, [r7, #2]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <HAL_UARTEx_RxEventCallback+0x48>)
 800082a:	701a      	strb	r2, [r3, #0]
    	uart_flag = 1;
 800082c:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <HAL_UARTEx_RxEventCallback+0x4c>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer,BUF_SIZE);
 8000832:	2280      	movs	r2, #128	@ 0x80
 8000834:	490a      	ldr	r1, [pc, #40]	@ (8000860 <HAL_UARTEx_RxEventCallback+0x50>)
 8000836:	4807      	ldr	r0, [pc, #28]	@ (8000854 <HAL_UARTEx_RxEventCallback+0x44>)
 8000838:	f003 ffaf 	bl	800479a <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <HAL_UARTEx_RxEventCallback+0x54>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <HAL_UARTEx_RxEventCallback+0x54>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f022 0208 	bic.w	r2, r2, #8
 800084a:	601a      	str	r2, [r3, #0]
    }
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000013c 	.word	0x2000013c
 8000858:	20000398 	.word	0x20000398
 800085c:	200000dc 	.word	0x200000dc
 8000860:	20000298 	.word	0x20000298
 8000864:	2000022c 	.word	0x2000022c

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086c:	f001 f81a 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000870:	f000 f84e 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000874:	f7ff fe9c 	bl	80005b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000878:	f7ff fe72 	bl	8000560 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800087c:	f000 fa56 	bl	8000d2c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000880:	f000 f8aa 	bl	80009d8 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 8000884:	f000 fa7c 	bl	8000d80 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000888:	f7ff ff3a 	bl	8000700 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer,BUF_SIZE);
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	4917      	ldr	r1, [pc, #92]	@ (80008ec <main+0x84>)
 8000890:	4817      	ldr	r0, [pc, #92]	@ (80008f0 <main+0x88>)
 8000892:	f003 ff82 	bl	800479a <HAL_UARTEx_ReceiveToIdle_DMA>


  	HAL_GPIO_WritePin(I2C1_CS_GPIO_Port,I2C1_CS_Pin,GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2120      	movs	r1, #32
 800089a:	4816      	ldr	r0, [pc, #88]	@ (80008f4 <main+0x8c>)
 800089c:	f001 ff48 	bl	8002730 <HAL_GPIO_WritePin>
  	write_fault_header(&FaultHeader);
 80008a0:	4815      	ldr	r0, [pc, #84]	@ (80008f8 <main+0x90>)
 80008a2:	f000 fc4b 	bl	800113c <write_fault_header>


  	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ac:	4813      	ldr	r0, [pc, #76]	@ (80008fc <main+0x94>)
 80008ae:	f001 ff3f 	bl	8002730 <HAL_GPIO_WritePin>
  	DDSend(1,100,6,150);
 80008b2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000900 <main+0x98>
 80008b6:	2206      	movs	r2, #6
 80008b8:	2164      	movs	r1, #100	@ 0x64
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 fe44 	bl	8001548 <DDSend>
  	printf("dds send\r\n");
 80008c0:	4810      	ldr	r0, [pc, #64]	@ (8000904 <main+0x9c>)
 80008c2:	f005 f9d7 	bl	8005c74 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_13);
 80008c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ca:	480f      	ldr	r0, [pc, #60]	@ (8000908 <main+0xa0>)
 80008cc:	f001 ff49 	bl	8002762 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80008d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008d4:	f001 f858 	bl	8001988 <HAL_Delay>
//	  HAL_Delay(1000);
//	  DACAI_SEND(SwitchScreen,3);



	  if(uart_flag == 1)
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <main+0xa4>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d1f2      	bne.n	80008c6 <main+0x5e>
	  {
		  uart_flag = 0;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <main+0xa4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
		  PConectProcess();
 80008e6:	f000 fe23 	bl	8001530 <PConectProcess>
	  HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_13);
 80008ea:	e7ec      	b.n	80008c6 <main+0x5e>
 80008ec:	20000298 	.word	0x20000298
 80008f0:	2000013c 	.word	0x2000013c
 80008f4:	40020400 	.word	0x40020400
 80008f8:	2000028c 	.word	0x2000028c
 80008fc:	40020c00 	.word	0x40020c00
 8000900:	43160000 	.word	0x43160000
 8000904:	08006954 	.word	0x08006954
 8000908:	40021400 	.word	0x40021400
 800090c:	200000dc 	.word	0x200000dc

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	@ 0x50
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	2230      	movs	r2, #48	@ 0x30
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f005 fa88 	bl	8005e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <SystemClock_Config+0xb4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	4a21      	ldr	r2, [pc, #132]	@ (80009c4 <SystemClock_Config+0xb4>)
 800093e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000942:	6413      	str	r3, [r2, #64]	@ 0x40
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <SystemClock_Config+0xb4>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <SystemClock_Config+0xb8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a1b      	ldr	r2, [pc, #108]	@ (80009c8 <SystemClock_Config+0xb8>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <SystemClock_Config+0xb8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000970:	2301      	movs	r3, #1
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000974:	2310      	movs	r3, #16
 8000976:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000978:	2300      	movs	r3, #0
 800097a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	4618      	mov	r0, r3
 8000982:	f002 ff2d 	bl	80037e0 <HAL_RCC_OscConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800098c:	f000 f81e 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000990:	230f      	movs	r3, #15
 8000992:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 f990 	bl	8003cd0 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009b6:	f000 f809 	bl	80009cc <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3750      	adds	r7, #80	@ 0x50
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40007000 	.word	0x40007000

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <Error_Handler+0x8>

080009d8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80009dc:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <MX_SPI2_Init+0x64>)
 80009de:	4a18      	ldr	r2, [pc, #96]	@ (8000a40 <MX_SPI2_Init+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009e2:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <MX_SPI2_Init+0x64>)
 80009e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ea:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <MX_SPI2_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <MX_SPI2_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_SPI2_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_SPI2_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_SPI2_Init+0x64>)
 8000a04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_SPI2_Init+0x64>)
 8000a0c:	2230      	movs	r2, #48	@ 0x30
 8000a0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <MX_SPI2_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_SPI2_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <MX_SPI2_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_SPI2_Init+0x64>)
 8000a24:	220a      	movs	r2, #10
 8000a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <MX_SPI2_Init+0x64>)
 8000a2a:	f003 fb31 	bl	8004090 <HAL_SPI_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a34:	f7ff ffca 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000e0 	.word	0x200000e0
 8000a40:	40003800 	.word	0x40003800

08000a44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	@ 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a19      	ldr	r2, [pc, #100]	@ (8000ac8 <HAL_SPI_MspInit+0x84>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12c      	bne.n	8000ac0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <HAL_SPI_MspInit+0x88>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	4a17      	ldr	r2, [pc, #92]	@ (8000acc <HAL_SPI_MspInit+0x88>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <HAL_SPI_MspInit+0x88>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <HAL_SPI_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a10      	ldr	r2, [pc, #64]	@ (8000acc <HAL_SPI_MspInit+0x88>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <HAL_SPI_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a9e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab0:	2305      	movs	r3, #5
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <HAL_SPI_MspInit+0x8c>)
 8000abc:	f001 fc9c 	bl	80023f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	@ 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40003800 	.word	0x40003800
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7a:	f000 fee5 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <USART1_IRQHandler+0x10>)
 8000b8a:	f003 fe63 	bl	8004854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000013c 	.word	0x2000013c

08000b98 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <DMA2_Stream5_IRQHandler+0x10>)
 8000b9e:	f001 f9c1 	bl	8001f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000022c 	.word	0x2000022c

08000bac <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000bb0:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <DMA2_Stream7_IRQHandler+0x10>)
 8000bb2:	f001 f9b7 	bl	8001f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200001cc 	.word	0x200001cc

08000bc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00a      	b.n	8000be8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd2:	f3af 8000 	nop.w
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf0      	blt.n	8000bd2 <_read+0x12>
  }

  return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e009      	b.n	8000c20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fde9 	bl	80007ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf1      	blt.n	8000c0c <_write+0x12>
  }
  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_close>:

int _close(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_isatty>:

int _isatty(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f005 f900 	bl	8005ed0 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20020000 	.word	0x20020000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	20000138 	.word	0x20000138
 8000d04:	200004f8 	.word	0x200004f8

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <MX_USART1_UART_Init+0x50>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d64:	f003 fc3e 	bl	80045e4 <HAL_UART_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d6e:	f7ff fe2d 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000013c 	.word	0x2000013c
 8000d7c:	40011000 	.word	0x40011000

08000d80 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_USART6_UART_Init+0x4c>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	@ (8000dd0 <MX_USART6_UART_Init+0x50>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <MX_USART6_UART_Init+0x4c>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_USART6_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_USART6_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <MX_USART6_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_USART6_UART_Init+0x4c>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <MX_USART6_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_USART6_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_USART6_UART_Init+0x4c>)
 8000db8:	f003 fc14 	bl	80045e4 <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000dc2:	f7ff fe03 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000184 	.word	0x20000184
 8000dd0:	40011400 	.word	0x40011400

08000dd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	@ 0x30
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a65      	ldr	r2, [pc, #404]	@ (8000f88 <HAL_UART_MspInit+0x1b4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	f040 8092 	bne.w	8000f1c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	4b63      	ldr	r3, [pc, #396]	@ (8000f8c <HAL_UART_MspInit+0x1b8>)
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e00:	4a62      	ldr	r2, [pc, #392]	@ (8000f8c <HAL_UART_MspInit+0x1b8>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e08:	4b60      	ldr	r3, [pc, #384]	@ (8000f8c <HAL_UART_MspInit+0x1b8>)
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	4b5c      	ldr	r3, [pc, #368]	@ (8000f8c <HAL_UART_MspInit+0x1b8>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1c:	4a5b      	ldr	r2, [pc, #364]	@ (8000f8c <HAL_UART_MspInit+0x1b8>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e24:	4b59      	ldr	r3, [pc, #356]	@ (8000f8c <HAL_UART_MspInit+0x1b8>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e30:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e42:	2307      	movs	r3, #7
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4850      	ldr	r0, [pc, #320]	@ (8000f90 <HAL_UART_MspInit+0x1bc>)
 8000e4e:	f001 fad3 	bl	80023f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000e52:	4b50      	ldr	r3, [pc, #320]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000e54:	4a50      	ldr	r2, [pc, #320]	@ (8000f98 <HAL_UART_MspInit+0x1c4>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000e58:	4b4e      	ldr	r3, [pc, #312]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000e5a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e5e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e60:	4b4c      	ldr	r3, [pc, #304]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000e62:	2240      	movs	r2, #64	@ 0x40
 8000e64:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e66:	4b4b      	ldr	r3, [pc, #300]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6c:	4b49      	ldr	r3, [pc, #292]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e72:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e74:	4b47      	ldr	r3, [pc, #284]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e7a:	4b46      	ldr	r3, [pc, #280]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000e80:	4b44      	ldr	r3, [pc, #272]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e86:	4b43      	ldr	r3, [pc, #268]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e8c:	4b41      	ldr	r3, [pc, #260]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000e92:	4840      	ldr	r0, [pc, #256]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000e94:	f000 feae 	bl	8001bf4 <HAL_DMA_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000e9e:	f7ff fd95 	bl	80009cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a3b      	ldr	r2, [pc, #236]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000ea6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ea8:	4a3a      	ldr	r2, [pc, #232]	@ (8000f94 <HAL_UART_MspInit+0x1c0>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8000eae:	4b3b      	ldr	r3, [pc, #236]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000eb0:	4a3b      	ldr	r2, [pc, #236]	@ (8000fa0 <HAL_UART_MspInit+0x1cc>)
 8000eb2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000eb4:	4b39      	ldr	r3, [pc, #228]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000eb6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000eba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ebc:	4b37      	ldr	r3, [pc, #220]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec2:	4b36      	ldr	r3, [pc, #216]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec8:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000eca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ece:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed0:	4b32      	ldr	r3, [pc, #200]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ed6:	4b31      	ldr	r3, [pc, #196]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000edc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000eee:	482b      	ldr	r0, [pc, #172]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000ef0:	f000 fe80 	bl	8001bf4 <HAL_DMA_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000efa:	f7ff fd67 	bl	80009cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a26      	ldr	r2, [pc, #152]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000f02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f04:	4a25      	ldr	r2, [pc, #148]	@ (8000f9c <HAL_UART_MspInit+0x1c8>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2025      	movs	r0, #37	@ 0x25
 8000f10:	f000 fe39 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f14:	2025      	movs	r0, #37	@ 0x25
 8000f16:	f000 fe52 	bl	8001bbe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000f1a:	e030      	b.n	8000f7e <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART6)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a20      	ldr	r2, [pc, #128]	@ (8000fa4 <HAL_UART_MspInit+0x1d0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d12b      	bne.n	8000f7e <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <HAL_UART_MspInit+0x1b8>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <HAL_UART_MspInit+0x1b8>)
 8000f30:	f043 0320 	orr.w	r3, r3, #32
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_UART_MspInit+0x1b8>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f003 0320 	and.w	r3, r3, #32
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <HAL_UART_MspInit+0x1b8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a10      	ldr	r2, [pc, #64]	@ (8000f8c <HAL_UART_MspInit+0x1b8>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <HAL_UART_MspInit+0x1b8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f5e:	23c0      	movs	r3, #192	@ 0xc0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f6e:	2308      	movs	r3, #8
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <HAL_UART_MspInit+0x1d4>)
 8000f7a:	f001 fa3d 	bl	80023f8 <HAL_GPIO_Init>
}
 8000f7e:	bf00      	nop
 8000f80:	3730      	adds	r7, #48	@ 0x30
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	200001cc 	.word	0x200001cc
 8000f98:	400264b8 	.word	0x400264b8
 8000f9c:	2000022c 	.word	0x2000022c
 8000fa0:	40026488 	.word	0x40026488
 8000fa4:	40011400 	.word	0x40011400
 8000fa8:	40020800 	.word	0x40020800

08000fac <Reset_Handler>:
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fe4 <LoopFillZerobss+0xe>
 8000fb0:	f7ff feaa 	bl	8000d08 <SystemInit>
 8000fb4:	480c      	ldr	r0, [pc, #48]	@ (8000fe8 <LoopFillZerobss+0x12>)
 8000fb6:	490d      	ldr	r1, [pc, #52]	@ (8000fec <LoopFillZerobss+0x16>)
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <LoopFillZerobss+0x1a>)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:
 8000fbe:	58d4      	ldr	r4, [r2, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:
 8000fc4:	18c4      	adds	r4, r0, r3
 8000fc6:	428c      	cmp	r4, r1
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <LoopFillZerobss+0x1e>)
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff8 <LoopFillZerobss+0x22>)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:
 8000fd6:	42a2      	cmp	r2, r4
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>
 8000fda:	f004 ff7f 	bl	8005edc <__libc_init_array>
 8000fde:	f7ff fc43 	bl	8000868 <main>
 8000fe2:	4770      	bx	lr
 8000fe4:	20020000 	.word	0x20020000
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	2000006c 	.word	0x2000006c
 8000ff0:	08006a48 	.word	0x08006a48
 8000ff4:	2000006c 	.word	0x2000006c
 8000ff8:	200004f4 	.word	0x200004f4

08000ffc <ADC_IRQHandler>:
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>
	...

08001000 <time_code>:
	uint8_t time_min =  (FaultHeader.err_time & 0x00ff);
	printf("\r\nnow time:hour %d min: %d\r\n",time_hour,time_min);
}

uint16_t time_code(uint8_t hour,uint8_t min)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	460a      	mov	r2, r1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
	uint16_t time_hour =  (uint16_t)hour << 8;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	b29b      	uxth	r3, r3
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	81fb      	strh	r3, [r7, #14]
	uint16_t time_min =  (uint16_t)min;
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	81bb      	strh	r3, [r7, #12]
	uint16_t time_code =  time_hour|time_min;
 800101c:	89fa      	ldrh	r2, [r7, #14]
 800101e:	89bb      	ldrh	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	817b      	strh	r3, [r7, #10]
	printf("now time code :%4x \r\n",time_code);
 8001024:	897b      	ldrh	r3, [r7, #10]
 8001026:	4619      	mov	r1, r3
 8001028:	4803      	ldr	r0, [pc, #12]	@ (8001038 <time_code+0x38>)
 800102a:	f004 fdbb 	bl	8005ba4 <iprintf>
	return time_code;
 800102e:	897b      	ldrh	r3, [r7, #10]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	08006980 	.word	0x08006980

0800103c <data_code>:
	uint8_t data_day =  (FaultHeader.err_data & 0x001F);
	printf("\r\nnow data:year %d month: %d day: %d\r\n",data_year+1980,data_month,data_day);
}

uint16_t data_code(uint8_t year,uint8_t month,uint8_t day)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	460b      	mov	r3, r1
 8001048:	71bb      	strb	r3, [r7, #6]
 800104a:	4613      	mov	r3, r2
 800104c:	717b      	strb	r3, [r7, #5]
	year = year -1980;
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	3344      	adds	r3, #68	@ 0x44
 8001052:	71fb      	strb	r3, [r7, #7]
	uint16_t data_year =  ((uint16_t)year << 9);
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	b29b      	uxth	r3, r3
 8001058:	025b      	lsls	r3, r3, #9
 800105a:	81fb      	strh	r3, [r7, #14]
	uint16_t data_month =  (uint16_t)month << 5;
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	b29b      	uxth	r3, r3
 8001060:	015b      	lsls	r3, r3, #5
 8001062:	81bb      	strh	r3, [r7, #12]
	uint16_t data_day =  (uint16_t)day & 0x001F;
 8001064:	797b      	ldrb	r3, [r7, #5]
 8001066:	b29b      	uxth	r3, r3
 8001068:	f003 031f 	and.w	r3, r3, #31
 800106c:	817b      	strh	r3, [r7, #10]
	uint16_t data_code = data_year|data_month|data_day;
 800106e:	89fa      	ldrh	r2, [r7, #14]
 8001070:	89bb      	ldrh	r3, [r7, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	b29a      	uxth	r2, r3
 8001076:	897b      	ldrh	r3, [r7, #10]
 8001078:	4313      	orrs	r3, r2
 800107a:	813b      	strh	r3, [r7, #8]
	printf("now data code :%4x \r\n",data_code);
 800107c:	893b      	ldrh	r3, [r7, #8]
 800107e:	4619      	mov	r1, r3
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <data_code+0x54>)
 8001082:	f004 fd8f 	bl	8005ba4 <iprintf>
	return data_code;
 8001086:	893b      	ldrh	r3, [r7, #8]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	080069c0 	.word	0x080069c0

08001094 <AT24Write>:


/************************************************** AT24's main storage write and backup area read and write **************************************************/

void AT24Write(int position,void* pstruct,int index)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af04      	add	r7, sp, #16
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, AT24CXX_Write_ADDR,position,I2C_MEMADD_SIZE_8BIT, (uint8_t*)pstruct+index,1,1000);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	b299      	uxth	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010ae:	9202      	str	r2, [sp, #8]
 80010b0:	2201      	movs	r2, #1
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	460a      	mov	r2, r1
 80010ba:	21a0      	movs	r1, #160	@ 0xa0
 80010bc:	480f      	ldr	r0, [pc, #60]	@ (80010fc <AT24Write+0x68>)
 80010be:	f001 fcaf 	bl	8002a20 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f000 fc60 	bl	8001988 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, AT24CXX_Write_ADDR,128+position,I2C_MEMADD_SIZE_8BIT, (uint8_t*)pstruct+index,1,1000);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	3380      	adds	r3, #128	@ 0x80
 80010ce:	b299      	uxth	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	4413      	add	r3, r2
 80010d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010da:	9202      	str	r2, [sp, #8]
 80010dc:	2201      	movs	r2, #1
 80010de:	9201      	str	r2, [sp, #4]
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	460a      	mov	r2, r1
 80010e6:	21a0      	movs	r1, #160	@ 0xa0
 80010e8:	4804      	ldr	r0, [pc, #16]	@ (80010fc <AT24Write+0x68>)
 80010ea:	f001 fc99 	bl	8002a20 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80010ee:	200a      	movs	r0, #10
 80010f0:	f000 fc4a 	bl	8001988 <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000088 	.word	0x20000088

08001100 <AT24Read>:


void AT24Read(int position,void* pstruct,int index)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af04      	add	r7, sp, #16
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, AT24CXX_Read_ADDR,position,I2C_MEMADD_SIZE_8BIT, (uint8_t*)pstruct+index,1,1000);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	b299      	uxth	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	4413      	add	r3, r2
 8001116:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800111a:	9202      	str	r2, [sp, #8]
 800111c:	2201      	movs	r2, #1
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	460a      	mov	r2, r1
 8001126:	21a1      	movs	r1, #161	@ 0xa1
 8001128:	4803      	ldr	r0, [pc, #12]	@ (8001138 <AT24Read+0x38>)
 800112a:	f001 fd73 	bl	8002c14 <HAL_I2C_Mem_Read>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000088 	.word	0x20000088

0800113c <write_fault_header>:
	  }
}


void write_fault_header(FaultHeaderTypeDef* header)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	header->err_time = time_code(17,31);			//RTC read-time writes will then be added
 8001144:	211f      	movs	r1, #31
 8001146:	2011      	movs	r0, #17
 8001148:	f7ff ff5a 	bl	8001000 <time_code>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	801a      	strh	r2, [r3, #0]
	header->err_data = data_code(2025,3,5);
 8001154:	2205      	movs	r2, #5
 8001156:	2103      	movs	r1, #3
 8001158:	20e9      	movs	r0, #233	@ 0xe9
 800115a:	f7ff ff6f 	bl	800103c <data_code>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	805a      	strh	r2, [r3, #2]
	header->fault_count = header->fault_count;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	889a      	ldrh	r2, [r3, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	809a      	strh	r2, [r3, #4]
	header->read_addr = header->read_addr;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	88da      	ldrh	r2, [r3, #6]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	80da      	strh	r2, [r3, #6]
	header->write_addr = header->write_addr;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	891a      	ldrh	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	811a      	strh	r2, [r3, #8]
	header->CRCheck = ModBusCRC16(header,sizeof(FaultHeaderTypeDef)-2);
 800117e:	210a      	movs	r1, #10
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 fb2d 	bl	80017e0 <ModBusCRC16>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	815a      	strh	r2, [r3, #10]
	for(int j = 0;j<sizeof(FaultHeaderTypeDef);j++)
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	e007      	b.n	80011a4 <write_fault_header+0x68>
	{
		AT24Write(FaultHeader_START + j,header,j);
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f7ff ff7b 	bl	8001094 <AT24Write>
	for(int j = 0;j<sizeof(FaultHeaderTypeDef);j++)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3301      	adds	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b0b      	cmp	r3, #11
 80011a8:	d9f4      	bls.n	8001194 <write_fault_header+0x58>
	}
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <frame_send>:
  * @param	Frame head and end of frame
  * @retval	Null
  */
#define FRAME_SEND(SendSlect,CheckSlect,head,tail) frame_send(SendSlect,CheckSlect,head,tail,sizeof(head),sizeof(tail))
void frame_send(SendSlectTypeDef SendSlect,CheckSlectTypeDef CheckSlect,uint8_t* head,uint8_t* tail,uint8_t head_size,uint8_t tail_size)
{
 80011b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011b8:	b089      	sub	sp, #36	@ 0x24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60ba      	str	r2, [r7, #8]
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	460b      	mov	r3, r1
 80011c6:	73bb      	strb	r3, [r7, #14]
 80011c8:	466b      	mov	r3, sp
 80011ca:	461e      	mov	r6, r3
	uint32_t 	frame_check;
	uint8_t 	frame_size = head_size + tx_num + CheckSlect + tail_size;
 80011cc:	4b67      	ldr	r3, [pc, #412]	@ (800136c <frame_send+0x1b8>)
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80011d4:	4413      	add	r3, r2
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	4413      	add	r3, r2
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80011e2:	4413      	add	r3, r2
 80011e4:	777b      	strb	r3, [r7, #29]
	uint8_t 	frame[frame_size];
 80011e6:	7f79      	ldrb	r1, [r7, #29]
 80011e8:	460b      	mov	r3, r1
 80011ea:	3b01      	subs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	b2cb      	uxtb	r3, r1
 80011f0:	2200      	movs	r2, #0
 80011f2:	4698      	mov	r8, r3
 80011f4:	4691      	mov	r9, r2
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800120a:	b2cb      	uxtb	r3, r1
 800120c:	2200      	movs	r2, #0
 800120e:	461c      	mov	r4, r3
 8001210:	4615      	mov	r5, r2
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	00eb      	lsls	r3, r5, #3
 800121c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001220:	00e2      	lsls	r2, r4, #3
 8001222:	460b      	mov	r3, r1
 8001224:	3307      	adds	r3, #7
 8001226:	08db      	lsrs	r3, r3, #3
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	ebad 0d03 	sub.w	sp, sp, r3
 800122e:	466b      	mov	r3, sp
 8001230:	3300      	adds	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
	uint8_t 	i,j = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	77bb      	strb	r3, [r7, #30]

	/* Add a frame header */
	for(i = 0;i < head_size;i++,j++)
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
 800123c:	e00c      	b.n	8001258 <frame_send+0xa4>
	{
		frame[j] = head[i];
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	441a      	add	r2, r3
 8001244:	7fbb      	ldrb	r3, [r7, #30]
 8001246:	7811      	ldrb	r1, [r2, #0]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < head_size;i++,j++)
 800124c:	7ffb      	ldrb	r3, [r7, #31]
 800124e:	3301      	adds	r3, #1
 8001250:	77fb      	strb	r3, [r7, #31]
 8001252:	7fbb      	ldrb	r3, [r7, #30]
 8001254:	3301      	adds	r3, #1
 8001256:	77bb      	strb	r3, [r7, #30]
 8001258:	7ffa      	ldrb	r2, [r7, #31]
 800125a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800125e:	429a      	cmp	r2, r3
 8001260:	d3ed      	bcc.n	800123e <frame_send+0x8a>
	}
	/* Fill in send data */
	for(i = 0;i < tx_num;i++,j++)
 8001262:	2300      	movs	r3, #0
 8001264:	77fb      	strb	r3, [r7, #31]
 8001266:	e00b      	b.n	8001280 <frame_send+0xcc>
	{
		frame[j] = tx_buffer[i];
 8001268:	7ffa      	ldrb	r2, [r7, #31]
 800126a:	7fbb      	ldrb	r3, [r7, #30]
 800126c:	4940      	ldr	r1, [pc, #256]	@ (8001370 <frame_send+0x1bc>)
 800126e:	5c89      	ldrb	r1, [r1, r2]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < tx_num;i++,j++)
 8001274:	7ffb      	ldrb	r3, [r7, #31]
 8001276:	3301      	adds	r3, #1
 8001278:	77fb      	strb	r3, [r7, #31]
 800127a:	7fbb      	ldrb	r3, [r7, #30]
 800127c:	3301      	adds	r3, #1
 800127e:	77bb      	strb	r3, [r7, #30]
 8001280:	4b3a      	ldr	r3, [pc, #232]	@ (800136c <frame_send+0x1b8>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	7ffa      	ldrb	r2, [r7, #31]
 8001286:	429a      	cmp	r2, r3
 8001288:	d3ee      	bcc.n	8001268 <frame_send+0xb4>
	}
	/* Add verification code */
	switch (CheckSlect)
 800128a:	7bbb      	ldrb	r3, [r7, #14]
 800128c:	2b04      	cmp	r3, #4
 800128e:	d006      	beq.n	800129e <frame_send+0xea>
 8001290:	2b04      	cmp	r3, #4
 8001292:	dc37      	bgt.n	8001304 <frame_send+0x150>
 8001294:	2b01      	cmp	r3, #1
 8001296:	d024      	beq.n	80012e2 <frame_send+0x12e>
 8001298:	2b02      	cmp	r3, #2
 800129a:	d011      	beq.n	80012c0 <frame_send+0x10c>
							memcpy(&frame[j],(uint8_t*)&frame_check,MODBUSCRC16);
							j = j + 2;	break;
		case CHECKSUM8: 	frame_check = CheckSum8(tx_buffer,tx_num);
							memcpy(&frame[j],(uint8_t*)&frame_check,CHECKSUM8);
							j = j + 1;	break;
		default:			break;
 800129c:	e032      	b.n	8001304 <frame_send+0x150>
		case ETHCRC32: 		frame_check = EthCRC32(tx_buffer,tx_num);
 800129e:	4b33      	ldr	r3, [pc, #204]	@ (800136c <frame_send+0x1b8>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4832      	ldr	r0, [pc, #200]	@ (8001370 <frame_send+0x1bc>)
 80012a6:	f000 fa5b 	bl	8001760 <EthCRC32>
 80012aa:	4603      	mov	r3, r0
 80012ac:	613b      	str	r3, [r7, #16]
							memcpy(&frame[j],(uint8_t*)&frame_check,ETHCRC32);
 80012ae:	7fbb      	ldrb	r3, [r7, #30]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	4413      	add	r3, r2
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	601a      	str	r2, [r3, #0]
							j = j + 4;	break;
 80012b8:	7fbb      	ldrb	r3, [r7, #30]
 80012ba:	3304      	adds	r3, #4
 80012bc:	77bb      	strb	r3, [r7, #30]
 80012be:	e022      	b.n	8001306 <frame_send+0x152>
		case MODBUSCRC16:	frame_check = ModBusCRC16(tx_buffer,tx_num);
 80012c0:	4b2a      	ldr	r3, [pc, #168]	@ (800136c <frame_send+0x1b8>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	482a      	ldr	r0, [pc, #168]	@ (8001370 <frame_send+0x1bc>)
 80012c8:	f000 fa8a 	bl	80017e0 <ModBusCRC16>
 80012cc:	4603      	mov	r3, r0
 80012ce:	613b      	str	r3, [r7, #16]
							memcpy(&frame[j],(uint8_t*)&frame_check,MODBUSCRC16);
 80012d0:	7fbb      	ldrb	r3, [r7, #30]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4413      	add	r3, r2
 80012d6:	8a3a      	ldrh	r2, [r7, #16]
 80012d8:	801a      	strh	r2, [r3, #0]
							j = j + 2;	break;
 80012da:	7fbb      	ldrb	r3, [r7, #30]
 80012dc:	3302      	adds	r3, #2
 80012de:	77bb      	strb	r3, [r7, #30]
 80012e0:	e011      	b.n	8001306 <frame_send+0x152>
		case CHECKSUM8: 	frame_check = CheckSum8(tx_buffer,tx_num);
 80012e2:	4b22      	ldr	r3, [pc, #136]	@ (800136c <frame_send+0x1b8>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	4821      	ldr	r0, [pc, #132]	@ (8001370 <frame_send+0x1bc>)
 80012ea:	f000 fab8 	bl	800185e <CheckSum8>
 80012ee:	4603      	mov	r3, r0
 80012f0:	613b      	str	r3, [r7, #16]
							memcpy(&frame[j],(uint8_t*)&frame_check,CHECKSUM8);
 80012f2:	7fbb      	ldrb	r3, [r7, #30]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	4413      	add	r3, r2
 80012f8:	7c3a      	ldrb	r2, [r7, #16]
 80012fa:	701a      	strb	r2, [r3, #0]
							j = j + 1;	break;
 80012fc:	7fbb      	ldrb	r3, [r7, #30]
 80012fe:	3301      	adds	r3, #1
 8001300:	77bb      	strb	r3, [r7, #30]
 8001302:	e000      	b.n	8001306 <frame_send+0x152>
		default:			break;
 8001304:	bf00      	nop
	}

	/* Add end of frame */
	for(i = 0;i < tail_size;i++,j++)
 8001306:	2300      	movs	r3, #0
 8001308:	77fb      	strb	r3, [r7, #31]
 800130a:	e00c      	b.n	8001326 <frame_send+0x172>
	{
		frame[j] = tail[i];
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	441a      	add	r2, r3
 8001312:	7fbb      	ldrb	r3, [r7, #30]
 8001314:	7811      	ldrb	r1, [r2, #0]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < tail_size;i++,j++)
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	3301      	adds	r3, #1
 800131e:	77fb      	strb	r3, [r7, #31]
 8001320:	7fbb      	ldrb	r3, [r7, #30]
 8001322:	3301      	adds	r3, #1
 8001324:	77bb      	strb	r3, [r7, #30]
 8001326:	7ffa      	ldrb	r2, [r7, #31]
 8001328:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800132c:	429a      	cmp	r2, r3
 800132e:	d3ed      	bcc.n	800130c <frame_send+0x158>
	}

	/* Select the send link channel */
	switch (SendSlect)
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <frame_send+0x188>
 8001336:	2b01      	cmp	r3, #1
 8001338:	d009      	beq.n	800134e <frame_send+0x19a>
	{
		case UART: 	HAL_UART_Transmit(&URTSEND,&frame,frame_size, 0xFFFF);break;
		case SPI: 	HAL_SPI_Transmit(&SPISEND,&frame,frame_size, 0xFFFF);break;
		default:	break;
 800133a:	e011      	b.n	8001360 <frame_send+0x1ac>
		case UART: 	HAL_UART_Transmit(&URTSEND,&frame,frame_size, 0xFFFF);break;
 800133c:	7f7b      	ldrb	r3, [r7, #29]
 800133e:	b29a      	uxth	r2, r3
 8001340:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001344:	6979      	ldr	r1, [r7, #20]
 8001346:	480b      	ldr	r0, [pc, #44]	@ (8001374 <frame_send+0x1c0>)
 8001348:	f003 f99c 	bl	8004684 <HAL_UART_Transmit>
 800134c:	e008      	b.n	8001360 <frame_send+0x1ac>
		case SPI: 	HAL_SPI_Transmit(&SPISEND,&frame,frame_size, 0xFFFF);break;
 800134e:	7f7b      	ldrb	r3, [r7, #29]
 8001350:	b29a      	uxth	r2, r3
 8001352:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001356:	6979      	ldr	r1, [r7, #20]
 8001358:	4807      	ldr	r0, [pc, #28]	@ (8001378 <frame_send+0x1c4>)
 800135a:	f002 ff22 	bl	80041a2 <HAL_SPI_Transmit>
 800135e:	bf00      	nop
 8001360:	46b5      	mov	sp, r6
	}
}
 8001362:	bf00      	nop
 8001364:	3724      	adds	r7, #36	@ 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800136c:	20000399 	.word	0x20000399
 8001370:	20000318 	.word	0x20000318
 8001374:	2000013c 	.word	0x2000013c
 8001378:	200000e0 	.word	0x200000e0

0800137c <head_verification>:
  * @param	Frame header
  * @retval Verify that it was successful
  */
# define HEAD_VERIFICATION(head) head_verification(head,sizeof(head))
int head_verification(uint8_t* head,uint8_t head_size)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
	for(int i = 0;i < head_size;i++)
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e00e      	b.n	80013ac <head_verification+0x30>
	{
		if(rx_buffer[i] != head[i]){return 0;}
 800138e:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <head_verification+0x48>)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	440b      	add	r3, r1
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d001      	beq.n	80013a6 <head_verification+0x2a>
 80013a2:	2300      	movs	r3, #0
 80013a4:	e007      	b.n	80013b6 <head_verification+0x3a>
	for(int i = 0;i < head_size;i++)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dbec      	blt.n	800138e <head_verification+0x12>
	}
	return 1;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000298 	.word	0x20000298

080013c8 <tail_verification>:
  * @param	Frame tail
  * @retval	Verify that it was successful
  */
# define TIAL_VERIFICATION(tail) tail_verification(tail,sizeof(tail))
int tail_verification(uint8_t* tail,uint8_t tail_size)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
	for(int i = 0;i < tail_size;i++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e013      	b.n	8001402 <tail_verification+0x3a>
	{
		if(rx_buffer[rx_num-tail_size+i] != tail[i]){return 0;}
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <tail_verification+0x50>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	1ad2      	subs	r2, r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a0c      	ldr	r2, [pc, #48]	@ (800141c <tail_verification+0x54>)
 80013ea:	5cd2      	ldrb	r2, [r2, r3]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	440b      	add	r3, r1
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d001      	beq.n	80013fc <tail_verification+0x34>
 80013f8:	2300      	movs	r3, #0
 80013fa:	e007      	b.n	800140c <tail_verification+0x44>
	for(int i = 0;i < tail_size;i++)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbe7      	blt.n	80013da <tail_verification+0x12>
	}
	return 1;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	20000398 	.word	0x20000398
 800141c:	20000298 	.word	0x20000298

08001420 <PConectRceive>:
  * @brief	Temporary transfer storage of computer communication data
  * @param	Null
  * @retval	Null
  */
uint8_t PConectRceive(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	if(HEAD_VERIFICATION(pc_head))
 8001426:	2102      	movs	r1, #2
 8001428:	4819      	ldr	r0, [pc, #100]	@ (8001490 <PConectRceive+0x70>)
 800142a:	f7ff ffa7 	bl	800137c <head_verification>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d028      	beq.n	8001486 <PConectRceive+0x66>
	{
		if(TIAL_VERIFICATION(pc_tail))
 8001434:	2100      	movs	r1, #0
 8001436:	4817      	ldr	r0, [pc, #92]	@ (8001494 <PConectRceive+0x74>)
 8001438:	f7ff ffc6 	bl	80013c8 <tail_verification>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d021      	beq.n	8001486 <PConectRceive+0x66>
		{
			PConectTypeDef* pstruct = (PConectTypeDef*)&rx_buffer[sizeof(pc_head)];
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <PConectRceive+0x78>)
 8001444:	607b      	str	r3, [r7, #4]
			PConnect.mode = pstruct->mode;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <PConectRceive+0x7c>)
 800144c:	701a      	strb	r2, [r3, #0]
			PConnect.data_len = pstruct->data_len;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	785a      	ldrb	r2, [r3, #1]
 8001452:	4b12      	ldr	r3, [pc, #72]	@ (800149c <PConectRceive+0x7c>)
 8001454:	705a      	strb	r2, [r3, #1]
			PConnect.addr = pstruct->addr;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	885a      	ldrh	r2, [r3, #2]
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <PConectRceive+0x7c>)
 800145c:	805a      	strh	r2, [r3, #2]
			PConnect.addr_num = pstruct->addr_num;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	889a      	ldrh	r2, [r3, #4]
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <PConectRceive+0x7c>)
 8001464:	809a      	strh	r2, [r3, #4]
			PConnect.crc16 = pstruct->crc16;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	88da      	ldrh	r2, [r3, #6]
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <PConectRceive+0x7c>)
 800146c:	80da      	strh	r2, [r3, #6]

			if(pstruct->addr < 12){PConnect.addr = 0;PConnect.addr_num = 12;}
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	885b      	ldrh	r3, [r3, #2]
 8001472:	2b0b      	cmp	r3, #11
 8001474:	d805      	bhi.n	8001482 <PConectRceive+0x62>
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <PConectRceive+0x7c>)
 8001478:	2200      	movs	r2, #0
 800147a:	805a      	strh	r2, [r3, #2]
 800147c:	4b07      	ldr	r3, [pc, #28]	@ (800149c <PConectRceive+0x7c>)
 800147e:	220c      	movs	r2, #12
 8001480:	809a      	strh	r2, [r3, #4]
			return 1;
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <PConectRceive+0x68>
		}
	}
	return 0;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000004 	.word	0x20000004
 8001494:	2000039c 	.word	0x2000039c
 8001498:	2000029a 	.word	0x2000029a
 800149c:	2000039c 	.word	0x2000039c

080014a0 <PConectSend>:
  * @brief	Send the required data according to the received command of the host computer
  * @param	Null
  * @retval	Null
  */
void PConectSend(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af02      	add	r7, sp, #8
	uint16_t i;

	tx_buffer[0] = 0x81;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <PConectSend+0x74>)
 80014a8:	2281      	movs	r2, #129	@ 0x81
 80014aa:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = (PConnect.addr_num + 1+1+2+2);
 80014ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <PConectSend+0x78>)
 80014ae:	889b      	ldrh	r3, [r3, #4]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	3306      	adds	r3, #6
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <PConectSend+0x74>)
 80014b8:	705a      	strb	r2, [r3, #1]
//	tx_buffer[2] = (PConnect.addr&0x00FF);
//	tx_buffer[3] = (PConnect.addr&0xFF00)>>8;
	*(uint16_t*)&tx_buffer[2] = PConnect.addr;
 80014ba:	4b18      	ldr	r3, [pc, #96]	@ (800151c <PConectSend+0x7c>)
 80014bc:	4a16      	ldr	r2, [pc, #88]	@ (8001518 <PConectSend+0x78>)
 80014be:	8852      	ldrh	r2, [r2, #2]
 80014c0:	801a      	strh	r2, [r3, #0]


	for(i = 0;i < PConnect.addr_num;i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	80fb      	strh	r3, [r7, #6]
 80014c6:	e00c      	b.n	80014e2 <PConectSend+0x42>
	{
		AT24Read(PConnect.addr+i,&tx_buffer[4],i);
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <PConectSend+0x78>)
 80014ca:	885b      	ldrh	r3, [r3, #2]
 80014cc:	461a      	mov	r2, r3
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	4413      	add	r3, r2
 80014d2:	88fa      	ldrh	r2, [r7, #6]
 80014d4:	4912      	ldr	r1, [pc, #72]	@ (8001520 <PConectSend+0x80>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe12 	bl	8001100 <AT24Read>
	for(i = 0;i < PConnect.addr_num;i++)
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	3301      	adds	r3, #1
 80014e0:	80fb      	strh	r3, [r7, #6]
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <PConectSend+0x78>)
 80014e4:	889b      	ldrh	r3, [r3, #4]
 80014e6:	88fa      	ldrh	r2, [r7, #6]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d3ed      	bcc.n	80014c8 <PConectSend+0x28>
	}

	tx_num = tx_buffer[1]-2;
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <PConectSend+0x74>)
 80014ee:	785b      	ldrb	r3, [r3, #1]
 80014f0:	3b02      	subs	r3, #2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <PConectSend+0x84>)
 80014f6:	701a      	strb	r2, [r3, #0]
	FRAME_SEND(UART,MODBUSCRC16,pc_head,pc_tail);
 80014f8:	2300      	movs	r3, #0
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	2302      	movs	r3, #2
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <PConectSend+0x88>)
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <PConectSend+0x8c>)
 8001504:	2102      	movs	r1, #2
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fe54 	bl	80011b4 <frame_send>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000318 	.word	0x20000318
 8001518:	2000039c 	.word	0x2000039c
 800151c:	2000031a 	.word	0x2000031a
 8001520:	2000031c 	.word	0x2000031c
 8001524:	20000399 	.word	0x20000399
 8001528:	2000039c 	.word	0x2000039c
 800152c:	20000004 	.word	0x20000004

08001530 <PConectProcess>:
  * @brief	Test
  * @param	Null
  * @retval	Null
  */
void PConectProcess(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	if(PConectRceive() != 1)return 0;
 8001534:	f7ff ff74 	bl	8001420 <PConectRceive>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d102      	bne.n	8001544 <PConectProcess+0x14>
	PConectSend();
 800153e:	f7ff ffaf 	bl	80014a0 <PConectSend>
 8001542:	e000      	b.n	8001546 <PConectProcess+0x16>
	if(PConectRceive() != 1)return 0;
 8001544:	bf00      	nop
}
 8001546:	bd80      	pop	{r7, pc}

08001548 <DDSend>:
  * @brief	Null
  * @param	Null
  * @retval	Null
  */
void DDSend(uint8_t enable,uint32_t frequecy,uint8_t channel, float phase)
{
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af02      	add	r7, sp, #8
 800154e:	4603      	mov	r3, r0
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	ed87 0a01 	vstr	s0, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	4613      	mov	r3, r2
 800155a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequecy_out = (frequecy * 4294967296UL / 50000000UL);		//Frequency conversion
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2200      	movs	r2, #0
 8001560:	461c      	mov	r4, r3
 8001562:	4615      	mov	r5, r2
 8001564:	f04f 0000 	mov.w	r0, #0
 8001568:	f04f 0100 	mov.w	r1, #0
 800156c:	0021      	movs	r1, r4
 800156e:	2000      	movs	r0, #0
 8001570:	a33d      	add	r3, pc, #244	@ (adr r3, 8001668 <DDSend+0x120>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	f7fe fe7b 	bl	8000270 <__aeabi_uldivmod>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4613      	mov	r3, r2
 8001580:	617b      	str	r3, [r7, #20]

	tx_buffer[0] = 0xA5;			//Frame header
 8001582:	4b33      	ldr	r3, [pc, #204]	@ (8001650 <DDSend+0x108>)
 8001584:	22a5      	movs	r2, #165	@ 0xa5
 8001586:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = 0x12 - enable;	//DDS enable control
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	f1c3 0312 	rsb	r3, r3, #18
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b2f      	ldr	r3, [pc, #188]	@ (8001650 <DDSend+0x108>)
 8001592:	705a      	strb	r2, [r3, #1]
	*(uint32_t*)&tx_buffer[2] = CharReverse32((uint32_t)frequecy_out);
 8001594:	4c2f      	ldr	r4, [pc, #188]	@ (8001654 <DDSend+0x10c>)
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f000 f8b3 	bl	8001702 <CharReverse32>
 800159c:	4603      	mov	r3, r0
 800159e:	6023      	str	r3, [r4, #0]
	tx_buffer[6] = channel * 16 + 1;//Channel selection
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	3301      	adds	r3, #1
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b29      	ldr	r3, [pc, #164]	@ (8001650 <DDSend+0x108>)
 80015ac:	719a      	strb	r2, [r3, #6]




    if((int16_t)phase == phase)//Warning: Negative phase is not considered, and optimization is required in the future
 80015ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b6:	ee17 3a90 	vmov	r3, s15
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80015c8:	eeb4 7a67 	vcmp.f32	s14, s15
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	d10e      	bne.n	80015f0 <DDSend+0xa8>
    {
        phase = ((int16_t)phase)*2;
 80015d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015da:	ee17 3a90 	vmov	r3, s15
 80015de:	b21b      	sxth	r3, r3
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ea:	edc7 7a01 	vstr	s15, [r7, #4]
 80015ee:	e00e      	b.n	800160e <DDSend+0xc6>
    }else{
        phase = ((int16_t)phase)*2 + 1;
 80015f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f8:	ee17 3a90 	vmov	r3, s15
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	3301      	adds	r3, #1
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160a:	edc7 7a01 	vstr	s15, [r7, #4]
    }

	*(uint16_t*)&tx_buffer[7] = CharReverse16(phase);
 800160e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001616:	ee17 3a90 	vmov	r3, s15
 800161a:	b29b      	uxth	r3, r3
 800161c:	4c0e      	ldr	r4, [pc, #56]	@ (8001658 <DDSend+0x110>)
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f888 	bl	8001734 <CharReverse16>
 8001624:	4603      	mov	r3, r0
 8001626:	8023      	strh	r3, [r4, #0]

	tx_num = 1 + 1 + 4 + 1 + 2;
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <DDSend+0x114>)
 800162a:	2209      	movs	r2, #9
 800162c:	701a      	strb	r2, [r3, #0]

    FRAME_SEND(SPI,CHECKSUM8,dds_head, dds_tail);
 800162e:	2300      	movs	r3, #0
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	2300      	movs	r3, #0
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <DDSend+0x118>)
 8001638:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <DDSend+0x11c>)
 800163a:	2101      	movs	r1, #1
 800163c:	2001      	movs	r0, #1
 800163e:	f7ff fdb9 	bl	80011b4 <frame_send>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bdb0      	pop	{r4, r5, r7, pc}
 800164a:	bf00      	nop
 800164c:	f3af 8000 	nop.w
 8001650:	20000318 	.word	0x20000318
 8001654:	2000031a 	.word	0x2000031a
 8001658:	2000031f 	.word	0x2000031f
 800165c:	20000399 	.word	0x20000399
 8001660:	2000039c 	.word	0x2000039c
 8001664:	2000039c 	.word	0x2000039c
 8001668:	02faf080 	.word	0x02faf080
 800166c:	00000000 	.word	0x00000000

08001670 <BitReverse32>:
#include "SoftwareCRC.h"

uint32_t BitReverse32(uint32_t data)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	uint32_t revers = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 32; i++) {
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	e00e      	b.n	80016a0 <BitReverse32+0x30>
    	revers = revers << 1;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
    	revers = revers | (data & 0x00000001);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
        data >>= 1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 32; i++) {
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	3301      	adds	r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2b1f      	cmp	r3, #31
 80016a4:	dded      	ble.n	8001682 <BitReverse32+0x12>
    }
    return revers;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <BitReverse16>:

uint16_t BitReverse16(uint16_t data)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	80fb      	strh	r3, [r7, #6]
	uint16_t revers = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 16; i++) {
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	e012      	b.n	80016ee <BitReverse16+0x3a>
    	revers = revers << 1;
 80016c8:	89fb      	ldrh	r3, [r7, #14]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	81fb      	strh	r3, [r7, #14]
    	revers = revers | (data & 0x0001);
 80016ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016dc:	4313      	orrs	r3, r2
 80016de:	b21b      	sxth	r3, r3
 80016e0:	81fb      	strh	r3, [r7, #14]
        data >>= 1;
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < 16; i++) {
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	3301      	adds	r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	dde9      	ble.n	80016c8 <BitReverse16+0x14>
    }
    return revers;
 80016f4:	89fb      	ldrh	r3, [r7, #14]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <CharReverse32>:

uint32_t CharReverse32 (uint32_t data)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	return ((data & 0x000000ff) << 24 | (data & 0x0000ff00) << 8 | (data & 0x00ff0000) >> 8 | (data & 0xff000000) >> 24);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	061a      	lsls	r2, r3, #24
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	0e1b      	lsrs	r3, r3, #24
 8001726:	4313      	orrs	r3, r2
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <CharReverse16>:

uint16_t CharReverse16 (uint16_t data)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
	return (data & 0x00ff) << 8 | (data & 0xff00) >> 8;
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21a      	sxth	r2, r3
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	b29b      	uxth	r3, r3
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	b29b      	uxth	r3, r3
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <EthCRC32>:

uint32_t EthCRC32(uint8_t* data, uint16_t len)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
	uint32_t CRC32 = 0xFFFFFFFF;
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	617b      	str	r3, [r7, #20]
	uint32_t POLY = BitReverse32(0x04C11DB7);
 8001772:	481a      	ldr	r0, [pc, #104]	@ (80017dc <EthCRC32+0x7c>)
 8001774:	f7ff ff7c 	bl	8001670 <BitReverse32>
 8001778:	60b8      	str	r0, [r7, #8]

	for(int i = 0; i < len; i++)
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	e023      	b.n	80017c8 <EthCRC32+0x68>
	{
		CRC32 = CRC32 ^ (data[i]);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	4053      	eors	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

		for(int j = 0; j < 8; j++)  /*此处的8 -- 指每一个char类型有8bit，每bit都要处理*/
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e012      	b.n	80017bc <EthCRC32+0x5c>
		{
			if(CRC32 & 0x00000001)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <EthCRC32+0x50>
			{
				CRC32 = CRC32 >> 1;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	085b      	lsrs	r3, r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
				CRC32 = CRC32 ^ POLY;   //多项式0x04c11db7的倒序后是0xedb88320
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4053      	eors	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e002      	b.n	80017b6 <EthCRC32+0x56>
			}else{
				CRC32 = CRC32 >> 1;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	085b      	lsrs	r3, r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
		for(int j = 0; j < 8; j++)  /*此处的8 -- 指每一个char类型有8bit，每bit都要处理*/
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3301      	adds	r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b07      	cmp	r3, #7
 80017c0:	dde9      	ble.n	8001796 <EthCRC32+0x36>
	for(int i = 0; i < len; i++)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	3301      	adds	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	887b      	ldrh	r3, [r7, #2]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbd7      	blt.n	8001780 <EthCRC32+0x20>
			}
    }
  }
  return CRC32 ^ 0xFFFFFFFF;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	43db      	mvns	r3, r3
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	04c11db7 	.word	0x04c11db7

080017e0 <ModBusCRC16>:


uint16_t ModBusCRC16(uint8_t *data, uint16_t len)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
    uint16_t CRC16 = 0xFFFF;
 80017ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017f0:	82fb      	strh	r3, [r7, #22]
    uint16_t POLY = BitReverse16(0x8005);
 80017f2:	f248 0005 	movw	r0, #32773	@ 0x8005
 80017f6:	f7ff ff5d 	bl	80016b4 <BitReverse16>
 80017fa:	4603      	mov	r3, r0
 80017fc:	817b      	strh	r3, [r7, #10]

    for (int i = 0; i < len; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	e023      	b.n	800184c <ModBusCRC16+0x6c>
    {
        CRC16 = CRC16 ^ (data[i]);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	8afb      	ldrh	r3, [r7, #22]
 8001810:	4053      	eors	r3, r2
 8001812:	82fb      	strh	r3, [r7, #22]

        for (int j = 0; j < 8; j++)
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	e012      	b.n	8001840 <ModBusCRC16+0x60>
        {
            if (CRC16 & 0x0001)
 800181a:	8afb      	ldrh	r3, [r7, #22]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d007      	beq.n	8001834 <ModBusCRC16+0x54>
            {
                CRC16 = CRC16 >> 1;
 8001824:	8afb      	ldrh	r3, [r7, #22]
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	82fb      	strh	r3, [r7, #22]
                CRC16 = CRC16 ^ POLY;
 800182a:	8afa      	ldrh	r2, [r7, #22]
 800182c:	897b      	ldrh	r3, [r7, #10]
 800182e:	4053      	eors	r3, r2
 8001830:	82fb      	strh	r3, [r7, #22]
 8001832:	e002      	b.n	800183a <ModBusCRC16+0x5a>
            }else{
				CRC16 = CRC16 >> 1;
 8001834:	8afb      	ldrh	r3, [r7, #22]
 8001836:	085b      	lsrs	r3, r3, #1
 8001838:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; j++)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b07      	cmp	r3, #7
 8001844:	dde9      	ble.n	800181a <ModBusCRC16+0x3a>
    for (int i = 0; i < len; i++)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	3301      	adds	r3, #1
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbd7      	blt.n	8001804 <ModBusCRC16+0x24>
			}
        }
    }

    return CRC16;
 8001854:	8afb      	ldrh	r3, [r7, #22]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <CheckSum8>:


uint8_t CheckSum8(uint8_t *data, uint16_t len)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	807b      	strh	r3, [r7, #2]
    uint32_t SUM = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < len; i++)
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	e00a      	b.n	800188a <CheckSum8+0x2c>
    {
    	SUM = SUM + data[i];
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4413      	add	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < len; i++)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3301      	adds	r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	429a      	cmp	r2, r3
 8001890:	dbf0      	blt.n	8001874 <CheckSum8+0x16>
    }

    return SUM & 0x000000FF;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	b2db      	uxtb	r3, r3
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a8:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <HAL_Init+0x40>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <HAL_Init+0x40>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	@ (80018e4 <HAL_Init+0x40>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f94f 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	200f      	movs	r0, #15
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff f8fc 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f967 	bl	8001bda <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 f92f 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	@ (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000000 	.word	0x20000000
 8001940:	2000000c 	.word	0x2000000c
 8001944:	20000008 	.word	0x20000008

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	@ (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2000000c 	.word	0x2000000c
 800196c:	200003a4 	.word	0x200003a4

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200003a4 	.word	0x200003a4

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000000c 	.word	0x2000000c

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	@ (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f7ff ff8e 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff29 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff3e 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff8e 	bl	8001ac4 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5d 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff31 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffa2 	bl	8001b2c <SysTick_Config>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff feb6 	bl	8001970 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e099      	b.n	8001d44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c30:	e00f      	b.n	8001c52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c32:	f7ff fe9d 	bl	8001970 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d908      	bls.n	8001c52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2220      	movs	r2, #32
 8001c44:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2203      	movs	r2, #3
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e078      	b.n	8001d44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e8      	bne.n	8001c32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4b38      	ldr	r3, [pc, #224]	@ (8001d4c <HAL_DMA_Init+0x158>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d107      	bne.n	8001cbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d117      	bne.n	8001d16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00e      	beq.n	8001d16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fb01 	bl	8002300 <DMA_CheckFifoParam>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2240      	movs	r2, #64	@ 0x40
 8001d08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d12:	2301      	movs	r3, #1
 8001d14:	e016      	b.n	8001d44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fab8 	bl	8002294 <DMA_CalcBaseAndBitshift>
 8001d24:	4603      	mov	r3, r0
 8001d26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2c:	223f      	movs	r2, #63	@ 0x3f
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	f010803f 	.word	0xf010803f

08001d50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_DMA_Start_IT+0x26>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e040      	b.n	8001df8 <HAL_DMA_Start_IT+0xa8>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d12f      	bne.n	8001dea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 fa4a 	bl	8002238 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da8:	223f      	movs	r2, #63	@ 0x3f
 8001daa:	409a      	lsls	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0216 	orr.w	r2, r2, #22
 8001dbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0208 	orr.w	r2, r2, #8
 8001dd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e005      	b.n	8001df6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e0e:	f7ff fdaf 	bl	8001970 <HAL_GetTick>
 8001e12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d008      	beq.n	8001e32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2280      	movs	r2, #128	@ 0x80
 8001e24:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e052      	b.n	8001ed8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0216 	bic.w	r2, r2, #22
 8001e40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d103      	bne.n	8001e62 <HAL_DMA_Abort+0x62>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0208 	bic.w	r2, r2, #8
 8001e70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e82:	e013      	b.n	8001eac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e84:	f7ff fd74 	bl	8001970 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d90c      	bls.n	8001eac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e015      	b.n	8001ed8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1e4      	bne.n	8001e84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebe:	223f      	movs	r2, #63	@ 0x3f
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d004      	beq.n	8001efe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00c      	b.n	8001f18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2205      	movs	r2, #5
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f30:	4b8e      	ldr	r3, [pc, #568]	@ (800216c <HAL_DMA_IRQHandler+0x248>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a8e      	ldr	r2, [pc, #568]	@ (8002170 <HAL_DMA_IRQHandler+0x24c>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0a9b      	lsrs	r3, r3, #10
 8001f3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4e:	2208      	movs	r2, #8
 8001f50:	409a      	lsls	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01a      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0204 	bic.w	r2, r2, #4
 8001f76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f94:	2201      	movs	r2, #1
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d012      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbe:	f043 0202 	orr.w	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fca:	2204      	movs	r2, #4
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe8:	2204      	movs	r2, #4
 8001fea:	409a      	lsls	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff4:	f043 0204 	orr.w	r2, r3, #4
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002000:	2210      	movs	r2, #16
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d043      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d03c      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201e:	2210      	movs	r2, #16
 8002020:	409a      	lsls	r2, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d018      	beq.n	8002066 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d108      	bne.n	8002054 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d024      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
 8002052:	e01f      	b.n	8002094 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01b      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
 8002064:	e016      	b.n	8002094 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d107      	bne.n	8002084 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0208 	bic.w	r2, r2, #8
 8002082:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002098:	2220      	movs	r2, #32
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 808f 	beq.w	80021c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8087 	beq.w	80021c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ba:	2220      	movs	r2, #32
 80020bc:	409a      	lsls	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d136      	bne.n	800213c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0216 	bic.w	r2, r2, #22
 80020dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d103      	bne.n	80020fe <HAL_DMA_IRQHandler+0x1da>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0208 	bic.w	r2, r2, #8
 800210c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002112:	223f      	movs	r2, #63	@ 0x3f
 8002114:	409a      	lsls	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212e:	2b00      	cmp	r3, #0
 8002130:	d07e      	beq.n	8002230 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
        }
        return;
 800213a:	e079      	b.n	8002230 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01d      	beq.n	8002186 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10d      	bne.n	8002174 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215c:	2b00      	cmp	r3, #0
 800215e:	d031      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
 8002168:	e02c      	b.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
 800216a:	bf00      	nop
 800216c:	20000000 	.word	0x20000000
 8002170:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d023      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
 8002184:	e01e      	b.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10f      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0210 	bic.w	r2, r2, #16
 80021a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d032      	beq.n	8002232 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d022      	beq.n	800221e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2205      	movs	r2, #5
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	3301      	adds	r3, #1
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d307      	bcc.n	800220c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f2      	bne.n	80021f0 <HAL_DMA_IRQHandler+0x2cc>
 800220a:	e000      	b.n	800220e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800220c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
 800222e:	e000      	b.n	8002232 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002230:	bf00      	nop
    }
  }
}
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002254:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b40      	cmp	r3, #64	@ 0x40
 8002264:	d108      	bne.n	8002278 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002276:	e007      	b.n	8002288 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	60da      	str	r2, [r3, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	3b10      	subs	r3, #16
 80022a4:	4a14      	ldr	r2, [pc, #80]	@ (80022f8 <DMA_CalcBaseAndBitshift+0x64>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ae:	4a13      	ldr	r2, [pc, #76]	@ (80022fc <DMA_CalcBaseAndBitshift+0x68>)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d909      	bls.n	80022d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022ca:	f023 0303 	bic.w	r3, r3, #3
 80022ce:	1d1a      	adds	r2, r3, #4
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80022d4:	e007      	b.n	80022e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	aaaaaaab 	.word	0xaaaaaaab
 80022fc:	080069fc 	.word	0x080069fc

08002300 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d11f      	bne.n	800235a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d856      	bhi.n	80023ce <DMA_CheckFifoParam+0xce>
 8002320:	a201      	add	r2, pc, #4	@ (adr r2, 8002328 <DMA_CheckFifoParam+0x28>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	08002339 	.word	0x08002339
 800232c:	0800234b 	.word	0x0800234b
 8002330:	08002339 	.word	0x08002339
 8002334:	080023cf 	.word	0x080023cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d046      	beq.n	80023d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002348:	e043      	b.n	80023d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002352:	d140      	bne.n	80023d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002358:	e03d      	b.n	80023d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002362:	d121      	bne.n	80023a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d837      	bhi.n	80023da <DMA_CheckFifoParam+0xda>
 800236a:	a201      	add	r2, pc, #4	@ (adr r2, 8002370 <DMA_CheckFifoParam+0x70>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	08002381 	.word	0x08002381
 8002374:	08002387 	.word	0x08002387
 8002378:	08002381 	.word	0x08002381
 800237c:	08002399 	.word	0x08002399
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
      break;
 8002384:	e030      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d025      	beq.n	80023de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002396:	e022      	b.n	80023de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023a0:	d11f      	bne.n	80023e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023a6:	e01c      	b.n	80023e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d903      	bls.n	80023b6 <DMA_CheckFifoParam+0xb6>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d003      	beq.n	80023bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023b4:	e018      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
      break;
 80023ba:	e015      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00e      	beq.n	80023e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      break;
 80023cc:	e00b      	b.n	80023e6 <DMA_CheckFifoParam+0xe6>
      break;
 80023ce:	bf00      	nop
 80023d0:	e00a      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
 80023d4:	e008      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
 80023d8:	e006      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023da:	bf00      	nop
 80023dc:	e004      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
 80023e0:	e002      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023e6:	bf00      	nop
    }
  } 
  
  return status; 
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop

080023f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	@ 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	e16b      	b.n	80026ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002414:	2201      	movs	r2, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	f040 815a 	bne.w	80026e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d005      	beq.n	800244a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002446:	2b02      	cmp	r3, #2
 8002448:	d130      	bne.n	80024ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 0201 	and.w	r2, r3, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d017      	beq.n	80024e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d123      	bne.n	800253c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	08da      	lsrs	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	08da      	lsrs	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3208      	adds	r2, #8
 8002536:	69b9      	ldr	r1, [r7, #24]
 8002538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80b4 	beq.w	80026e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b60      	ldr	r3, [pc, #384]	@ (8002704 <HAL_GPIO_Init+0x30c>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	4a5f      	ldr	r2, [pc, #380]	@ (8002704 <HAL_GPIO_Init+0x30c>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800258c:	6453      	str	r3, [r2, #68]	@ 0x44
 800258e:	4b5d      	ldr	r3, [pc, #372]	@ (8002704 <HAL_GPIO_Init+0x30c>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259a:	4a5b      	ldr	r2, [pc, #364]	@ (8002708 <HAL_GPIO_Init+0x310>)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	220f      	movs	r2, #15
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a52      	ldr	r2, [pc, #328]	@ (800270c <HAL_GPIO_Init+0x314>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d02b      	beq.n	800261e <HAL_GPIO_Init+0x226>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a51      	ldr	r2, [pc, #324]	@ (8002710 <HAL_GPIO_Init+0x318>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d025      	beq.n	800261a <HAL_GPIO_Init+0x222>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a50      	ldr	r2, [pc, #320]	@ (8002714 <HAL_GPIO_Init+0x31c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01f      	beq.n	8002616 <HAL_GPIO_Init+0x21e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002718 <HAL_GPIO_Init+0x320>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d019      	beq.n	8002612 <HAL_GPIO_Init+0x21a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4e      	ldr	r2, [pc, #312]	@ (800271c <HAL_GPIO_Init+0x324>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_GPIO_Init+0x216>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002720 <HAL_GPIO_Init+0x328>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00d      	beq.n	800260a <HAL_GPIO_Init+0x212>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002724 <HAL_GPIO_Init+0x32c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d007      	beq.n	8002606 <HAL_GPIO_Init+0x20e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002728 <HAL_GPIO_Init+0x330>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_GPIO_Init+0x20a>
 80025fe:	2307      	movs	r3, #7
 8002600:	e00e      	b.n	8002620 <HAL_GPIO_Init+0x228>
 8002602:	2308      	movs	r3, #8
 8002604:	e00c      	b.n	8002620 <HAL_GPIO_Init+0x228>
 8002606:	2306      	movs	r3, #6
 8002608:	e00a      	b.n	8002620 <HAL_GPIO_Init+0x228>
 800260a:	2305      	movs	r3, #5
 800260c:	e008      	b.n	8002620 <HAL_GPIO_Init+0x228>
 800260e:	2304      	movs	r3, #4
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x228>
 8002612:	2303      	movs	r3, #3
 8002614:	e004      	b.n	8002620 <HAL_GPIO_Init+0x228>
 8002616:	2302      	movs	r3, #2
 8002618:	e002      	b.n	8002620 <HAL_GPIO_Init+0x228>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_GPIO_Init+0x228>
 800261e:	2300      	movs	r3, #0
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f002 0203 	and.w	r2, r2, #3
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	4093      	lsls	r3, r2
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002630:	4935      	ldr	r1, [pc, #212]	@ (8002708 <HAL_GPIO_Init+0x310>)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263e:	4b3b      	ldr	r3, [pc, #236]	@ (800272c <HAL_GPIO_Init+0x334>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002662:	4a32      	ldr	r2, [pc, #200]	@ (800272c <HAL_GPIO_Init+0x334>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002668:	4b30      	ldr	r3, [pc, #192]	@ (800272c <HAL_GPIO_Init+0x334>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800268c:	4a27      	ldr	r2, [pc, #156]	@ (800272c <HAL_GPIO_Init+0x334>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002692:	4b26      	ldr	r3, [pc, #152]	@ (800272c <HAL_GPIO_Init+0x334>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b6:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <HAL_GPIO_Init+0x334>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <HAL_GPIO_Init+0x334>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e0:	4a12      	ldr	r2, [pc, #72]	@ (800272c <HAL_GPIO_Init+0x334>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3301      	adds	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b0f      	cmp	r3, #15
 80026f0:	f67f ae90 	bls.w	8002414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3724      	adds	r7, #36	@ 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	40013800 	.word	0x40013800
 800270c:	40020000 	.word	0x40020000
 8002710:	40020400 	.word	0x40020400
 8002714:	40020800 	.word	0x40020800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40021000 	.word	0x40021000
 8002720:	40021400 	.word	0x40021400
 8002724:	40021800 	.word	0x40021800
 8002728:	40021c00 	.word	0x40021c00
 800272c:	40013c00 	.word	0x40013c00

08002730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
 800273c:	4613      	mov	r3, r2
 800273e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002740:	787b      	ldrb	r3, [r7, #1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800274c:	e003      	b.n	8002756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	041a      	lsls	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	460b      	mov	r3, r1
 800276c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002774:	887a      	ldrh	r2, [r7, #2]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4013      	ands	r3, r2
 800277a:	041a      	lsls	r2, r3, #16
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43d9      	mvns	r1, r3
 8002780:	887b      	ldrh	r3, [r7, #2]
 8002782:	400b      	ands	r3, r1
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	619a      	str	r2, [r3, #24]
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e12b      	b.n	8002a02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fd ffcc 	bl	800075c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2224      	movs	r2, #36	@ 0x24
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0201 	bic.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027fc:	f001 fc20 	bl	8004040 <HAL_RCC_GetPCLK1Freq>
 8002800:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a81      	ldr	r2, [pc, #516]	@ (8002a0c <HAL_I2C_Init+0x274>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d807      	bhi.n	800281c <HAL_I2C_Init+0x84>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a80      	ldr	r2, [pc, #512]	@ (8002a10 <HAL_I2C_Init+0x278>)
 8002810:	4293      	cmp	r3, r2
 8002812:	bf94      	ite	ls
 8002814:	2301      	movls	r3, #1
 8002816:	2300      	movhi	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e006      	b.n	800282a <HAL_I2C_Init+0x92>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a14 <HAL_I2C_Init+0x27c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	bf94      	ite	ls
 8002824:	2301      	movls	r3, #1
 8002826:	2300      	movhi	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0e7      	b.n	8002a02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4a78      	ldr	r2, [pc, #480]	@ (8002a18 <HAL_I2C_Init+0x280>)
 8002836:	fba2 2303 	umull	r2, r3, r2, r3
 800283a:	0c9b      	lsrs	r3, r3, #18
 800283c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a6a      	ldr	r2, [pc, #424]	@ (8002a0c <HAL_I2C_Init+0x274>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d802      	bhi.n	800286c <HAL_I2C_Init+0xd4>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	3301      	adds	r3, #1
 800286a:	e009      	b.n	8002880 <HAL_I2C_Init+0xe8>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	4a69      	ldr	r2, [pc, #420]	@ (8002a1c <HAL_I2C_Init+0x284>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	3301      	adds	r3, #1
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	430b      	orrs	r3, r1
 8002886:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002892:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	495c      	ldr	r1, [pc, #368]	@ (8002a0c <HAL_I2C_Init+0x274>)
 800289c:	428b      	cmp	r3, r1
 800289e:	d819      	bhi.n	80028d4 <HAL_I2C_Init+0x13c>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1e59      	subs	r1, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ae:	1c59      	adds	r1, r3, #1
 80028b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028b4:	400b      	ands	r3, r1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_I2C_Init+0x138>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e59      	subs	r1, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ce:	e051      	b.n	8002974 <HAL_I2C_Init+0x1dc>
 80028d0:	2304      	movs	r3, #4
 80028d2:	e04f      	b.n	8002974 <HAL_I2C_Init+0x1dc>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d111      	bne.n	8002900 <HAL_I2C_Init+0x168>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1e58      	subs	r0, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e012      	b.n	8002926 <HAL_I2C_Init+0x18e>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1e58      	subs	r0, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	0099      	lsls	r1, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	fbb0 f3f3 	udiv	r3, r0, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_I2C_Init+0x196>
 800292a:	2301      	movs	r3, #1
 800292c:	e022      	b.n	8002974 <HAL_I2C_Init+0x1dc>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10e      	bne.n	8002954 <HAL_I2C_Init+0x1bc>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1e58      	subs	r0, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	440b      	add	r3, r1
 8002944:	fbb0 f3f3 	udiv	r3, r0, r3
 8002948:	3301      	adds	r3, #1
 800294a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002952:	e00f      	b.n	8002974 <HAL_I2C_Init+0x1dc>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1e58      	subs	r0, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	0099      	lsls	r1, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	fbb0 f3f3 	udiv	r3, r0, r3
 800296a:	3301      	adds	r3, #1
 800296c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002970:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	6809      	ldr	r1, [r1, #0]
 8002978:	4313      	orrs	r3, r2
 800297a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6911      	ldr	r1, [r2, #16]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68d2      	ldr	r2, [r2, #12]
 80029ae:	4311      	orrs	r1, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	430b      	orrs	r3, r1
 80029b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	000186a0 	.word	0x000186a0
 8002a10:	001e847f 	.word	0x001e847f
 8002a14:	003d08ff 	.word	0x003d08ff
 8002a18:	431bde83 	.word	0x431bde83
 8002a1c:	10624dd3 	.word	0x10624dd3

08002a20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	4608      	mov	r0, r1
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	817b      	strh	r3, [r7, #10]
 8002a32:	460b      	mov	r3, r1
 8002a34:	813b      	strh	r3, [r7, #8]
 8002a36:	4613      	mov	r3, r2
 8002a38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a3a:	f7fe ff99 	bl	8001970 <HAL_GetTick>
 8002a3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	f040 80d9 	bne.w	8002c00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2319      	movs	r3, #25
 8002a54:	2201      	movs	r2, #1
 8002a56:	496d      	ldr	r1, [pc, #436]	@ (8002c0c <HAL_I2C_Mem_Write+0x1ec>)
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fc8b 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
 8002a66:	e0cc      	b.n	8002c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_I2C_Mem_Write+0x56>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e0c5      	b.n	8002c02 <HAL_I2C_Mem_Write+0x1e2>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d007      	beq.n	8002a9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2221      	movs	r2, #33	@ 0x21
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2240      	movs	r2, #64	@ 0x40
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a3a      	ldr	r2, [r7, #32]
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4a4d      	ldr	r2, [pc, #308]	@ (8002c10 <HAL_I2C_Mem_Write+0x1f0>)
 8002adc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ade:	88f8      	ldrh	r0, [r7, #6]
 8002ae0:	893a      	ldrh	r2, [r7, #8]
 8002ae2:	8979      	ldrh	r1, [r7, #10]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4603      	mov	r3, r0
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fac2 	bl	8003078 <I2C_RequestMemoryWrite>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d052      	beq.n	8002ba0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e081      	b.n	8002c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fd50 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00d      	beq.n	8002b2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d107      	bne.n	8002b26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e06b      	b.n	8002c02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d11b      	bne.n	8002ba0 <HAL_I2C_Mem_Write+0x180>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d017      	beq.n	8002ba0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1aa      	bne.n	8002afe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fd43 	bl	8003638 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d107      	bne.n	8002bd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e016      	b.n	8002c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	00100002 	.word	0x00100002
 8002c10:	ffff0000 	.word	0xffff0000

08002c14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	@ 0x30
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	4608      	mov	r0, r1
 8002c1e:	4611      	mov	r1, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	4603      	mov	r3, r0
 8002c24:	817b      	strh	r3, [r7, #10]
 8002c26:	460b      	mov	r3, r1
 8002c28:	813b      	strh	r3, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c2e:	f7fe fe9f 	bl	8001970 <HAL_GetTick>
 8002c32:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	f040 8214 	bne.w	800306a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2319      	movs	r3, #25
 8002c48:	2201      	movs	r2, #1
 8002c4a:	497b      	ldr	r1, [pc, #492]	@ (8002e38 <HAL_I2C_Mem_Read+0x224>)
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fb91 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e207      	b.n	800306c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_I2C_Mem_Read+0x56>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e200      	b.n	800306c <HAL_I2C_Mem_Read+0x458>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d007      	beq.n	8002c90 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2222      	movs	r2, #34	@ 0x22
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2240      	movs	r2, #64	@ 0x40
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a5b      	ldr	r2, [pc, #364]	@ (8002e3c <HAL_I2C_Mem_Read+0x228>)
 8002cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cd2:	88f8      	ldrh	r0, [r7, #6]
 8002cd4:	893a      	ldrh	r2, [r7, #8]
 8002cd6:	8979      	ldrh	r1, [r7, #10]
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fa5e 	bl	80031a4 <I2C_RequestMemoryRead>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e1bc      	b.n	800306c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d113      	bne.n	8002d22 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	623b      	str	r3, [r7, #32]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	623b      	str	r3, [r7, #32]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	623b      	str	r3, [r7, #32]
 8002d0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e190      	b.n	8003044 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d11b      	bne.n	8002d62 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e170      	b.n	8003044 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d11b      	bne.n	8002da2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	e150      	b.n	8003044 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002db8:	e144      	b.n	8003044 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	f200 80f1 	bhi.w	8002fa6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d123      	bne.n	8002e14 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fc79 	bl	80036c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e145      	b.n	800306c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e12:	e117      	b.n	8003044 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d14e      	bne.n	8002eba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e22:	2200      	movs	r2, #0
 8002e24:	4906      	ldr	r1, [pc, #24]	@ (8002e40 <HAL_I2C_Mem_Read+0x22c>)
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 faa4 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e11a      	b.n	800306c <HAL_I2C_Mem_Read+0x458>
 8002e36:	bf00      	nop
 8002e38:	00100002 	.word	0x00100002
 8002e3c:	ffff0000 	.word	0xffff0000
 8002e40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002eb8:	e0c4      	b.n	8003044 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	496c      	ldr	r1, [pc, #432]	@ (8003074 <HAL_I2C_Mem_Read+0x460>)
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fa55 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0cb      	b.n	800306c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4955      	ldr	r1, [pc, #340]	@ (8003074 <HAL_I2C_Mem_Read+0x460>)
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fa27 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e09d      	b.n	800306c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fa4:	e04e      	b.n	8003044 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fb8c 	bl	80036c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e058      	b.n	800306c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d124      	bne.n	8003044 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d107      	bne.n	8003012 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003010:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	f47f aeb6 	bne.w	8002dba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e000      	b.n	800306c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800306a:	2302      	movs	r3, #2
  }
}
 800306c:	4618      	mov	r0, r3
 800306e:	3728      	adds	r7, #40	@ 0x28
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	00010004 	.word	0x00010004

08003078 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	4608      	mov	r0, r1
 8003082:	4611      	mov	r1, r2
 8003084:	461a      	mov	r2, r3
 8003086:	4603      	mov	r3, r0
 8003088:	817b      	strh	r3, [r7, #10]
 800308a:	460b      	mov	r3, r1
 800308c:	813b      	strh	r3, [r7, #8]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f960 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030c8:	d103      	bne.n	80030d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e05f      	b.n	8003196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030d6:	897b      	ldrh	r3, [r7, #10]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	6a3a      	ldr	r2, [r7, #32]
 80030ea:	492d      	ldr	r1, [pc, #180]	@ (80031a0 <I2C_RequestMemoryWrite+0x128>)
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f9bb 	bl	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e04c      	b.n	8003196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003114:	6a39      	ldr	r1, [r7, #32]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fa46 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	2b04      	cmp	r3, #4
 8003128:	d107      	bne.n	800313a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003138:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e02b      	b.n	8003196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d105      	bne.n	8003150 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003144:	893b      	ldrh	r3, [r7, #8]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	611a      	str	r2, [r3, #16]
 800314e:	e021      	b.n	8003194 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003150:	893b      	ldrh	r3, [r7, #8]
 8003152:	0a1b      	lsrs	r3, r3, #8
 8003154:	b29b      	uxth	r3, r3
 8003156:	b2da      	uxtb	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800315e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003160:	6a39      	ldr	r1, [r7, #32]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fa20 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00d      	beq.n	800318a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	2b04      	cmp	r3, #4
 8003174:	d107      	bne.n	8003186 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003184:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e005      	b.n	8003196 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800318a:	893b      	ldrh	r3, [r7, #8]
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	00010002 	.word	0x00010002

080031a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	817b      	strh	r3, [r7, #10]
 80031b6:	460b      	mov	r3, r1
 80031b8:	813b      	strh	r3, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f8c2 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00d      	beq.n	8003212 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003204:	d103      	bne.n	800320e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800320c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0aa      	b.n	8003368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003212:	897b      	ldrh	r3, [r7, #10]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003220:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	6a3a      	ldr	r2, [r7, #32]
 8003226:	4952      	ldr	r1, [pc, #328]	@ (8003370 <I2C_RequestMemoryRead+0x1cc>)
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f91d 	bl	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e097      	b.n	8003368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003250:	6a39      	ldr	r1, [r7, #32]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f9a8 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00d      	beq.n	800327a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	2b04      	cmp	r3, #4
 8003264:	d107      	bne.n	8003276 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003274:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e076      	b.n	8003368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003280:	893b      	ldrh	r3, [r7, #8]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	611a      	str	r2, [r3, #16]
 800328a:	e021      	b.n	80032d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800328c:	893b      	ldrh	r3, [r7, #8]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	b29b      	uxth	r3, r3
 8003292:	b2da      	uxtb	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800329a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800329c:	6a39      	ldr	r1, [r7, #32]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f982 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00d      	beq.n	80032c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d107      	bne.n	80032c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e050      	b.n	8003368 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c6:	893b      	ldrh	r3, [r7, #8]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d2:	6a39      	ldr	r1, [r7, #32]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f967 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d107      	bne.n	80032f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e035      	b.n	8003368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800330a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	2200      	movs	r2, #0
 8003314:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f82b 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003332:	d103      	bne.n	800333c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800333a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e013      	b.n	8003368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003340:	897b      	ldrh	r3, [r7, #10]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	6a3a      	ldr	r2, [r7, #32]
 8003354:	4906      	ldr	r1, [pc, #24]	@ (8003370 <I2C_RequestMemoryRead+0x1cc>)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f886 	bl	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	00010002 	.word	0x00010002

08003374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003384:	e048      	b.n	8003418 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d044      	beq.n	8003418 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	f7fe faef 	bl	8001970 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d139      	bne.n	8003418 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d10d      	bne.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	43da      	mvns	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4013      	ands	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	e00c      	b.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	43da      	mvns	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4013      	ands	r3, r2
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d116      	bne.n	8003418 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e023      	b.n	8003460 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	0c1b      	lsrs	r3, r3, #16
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d10d      	bne.n	800343e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	43da      	mvns	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4013      	ands	r3, r2
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	e00c      	b.n	8003458 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	43da      	mvns	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4013      	ands	r3, r2
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	429a      	cmp	r2, r3
 800345c:	d093      	beq.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003476:	e071      	b.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003486:	d123      	bne.n	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003496:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	f043 0204 	orr.w	r2, r3, #4
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e067      	b.n	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d6:	d041      	beq.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d8:	f7fe fa4a 	bl	8001970 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d302      	bcc.n	80034ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d136      	bne.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d10c      	bne.n	8003512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	43da      	mvns	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4013      	ands	r3, r2
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	e00b      	b.n	800352a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	43da      	mvns	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4013      	ands	r3, r2
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e021      	b.n	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	0c1b      	lsrs	r3, r3, #16
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10c      	bne.n	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	43da      	mvns	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4013      	ands	r3, r2
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	e00b      	b.n	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	43da      	mvns	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4013      	ands	r3, r2
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	bf14      	ite	ne
 8003592:	2301      	movne	r3, #1
 8003594:	2300      	moveq	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	f47f af6d 	bne.w	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b4:	e034      	b.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f8e3 	bl	8003782 <I2C_IsAcknowledgeFailed>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e034      	b.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d028      	beq.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7fe f9cf 	bl	8001970 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11d      	bne.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ee:	2b80      	cmp	r3, #128	@ 0x80
 80035f0:	d016      	beq.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362a:	2b80      	cmp	r3, #128	@ 0x80
 800362c:	d1c3      	bne.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003644:	e034      	b.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f89b 	bl	8003782 <I2C_IsAcknowledgeFailed>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e034      	b.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d028      	beq.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365e:	f7fe f987 	bl	8001970 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	d302      	bcc.n	8003674 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d11d      	bne.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b04      	cmp	r3, #4
 8003680:	d016      	beq.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	f043 0220 	orr.w	r2, r3, #32
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e007      	b.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d1c3      	bne.n	8003646 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036d4:	e049      	b.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d119      	bne.n	8003718 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0210 	mvn.w	r2, #16
 80036ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e030      	b.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003718:	f7fe f92a 	bl	8001970 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	429a      	cmp	r2, r3
 8003726:	d302      	bcc.n	800372e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d11d      	bne.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003738:	2b40      	cmp	r3, #64	@ 0x40
 800373a:	d016      	beq.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	f043 0220 	orr.w	r2, r3, #32
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e007      	b.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003774:	2b40      	cmp	r3, #64	@ 0x40
 8003776:	d1ae      	bne.n	80036d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003798:	d11b      	bne.n	80037d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	f043 0204 	orr.w	r2, r3, #4
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e267      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d075      	beq.n	80038ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037fe:	4b88      	ldr	r3, [pc, #544]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b04      	cmp	r3, #4
 8003808:	d00c      	beq.n	8003824 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800380a:	4b85      	ldr	r3, [pc, #532]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003812:	2b08      	cmp	r3, #8
 8003814:	d112      	bne.n	800383c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003816:	4b82      	ldr	r3, [pc, #520]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800381e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003822:	d10b      	bne.n	800383c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	4b7e      	ldr	r3, [pc, #504]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d05b      	beq.n	80038e8 <HAL_RCC_OscConfig+0x108>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d157      	bne.n	80038e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e242      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003844:	d106      	bne.n	8003854 <HAL_RCC_OscConfig+0x74>
 8003846:	4b76      	ldr	r3, [pc, #472]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a75      	ldr	r2, [pc, #468]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e01d      	b.n	8003890 <HAL_RCC_OscConfig+0xb0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800385c:	d10c      	bne.n	8003878 <HAL_RCC_OscConfig+0x98>
 800385e:	4b70      	ldr	r3, [pc, #448]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a6f      	ldr	r2, [pc, #444]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a6c      	ldr	r2, [pc, #432]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e00b      	b.n	8003890 <HAL_RCC_OscConfig+0xb0>
 8003878:	4b69      	ldr	r3, [pc, #420]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a68      	ldr	r2, [pc, #416]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 800387e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	4b66      	ldr	r3, [pc, #408]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a65      	ldr	r2, [pc, #404]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 800388a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800388e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d013      	beq.n	80038c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fe f86a 	bl	8001970 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a0:	f7fe f866 	bl	8001970 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	@ 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e207      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0xc0>
 80038be:	e014      	b.n	80038ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fe f856 	bl	8001970 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fe f852 	bl	8001970 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	@ 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e1f3      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038da:	4b51      	ldr	r3, [pc, #324]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0xe8>
 80038e6:	e000      	b.n	80038ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d063      	beq.n	80039be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003902:	4b47      	ldr	r3, [pc, #284]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800390a:	2b08      	cmp	r3, #8
 800390c:	d11c      	bne.n	8003948 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390e:	4b44      	ldr	r3, [pc, #272]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d116      	bne.n	8003948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391a:	4b41      	ldr	r3, [pc, #260]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_RCC_OscConfig+0x152>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d001      	beq.n	8003932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e1c7      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003932:	4b3b      	ldr	r3, [pc, #236]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4937      	ldr	r1, [pc, #220]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	e03a      	b.n	80039be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d020      	beq.n	8003992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003950:	4b34      	ldr	r3, [pc, #208]	@ (8003a24 <HAL_RCC_OscConfig+0x244>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fe f80b 	bl	8001970 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395e:	f7fe f807 	bl	8001970 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e1a8      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003970:	4b2b      	ldr	r3, [pc, #172]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397c:	4b28      	ldr	r3, [pc, #160]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4925      	ldr	r1, [pc, #148]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]
 8003990:	e015      	b.n	80039be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003992:	4b24      	ldr	r3, [pc, #144]	@ (8003a24 <HAL_RCC_OscConfig+0x244>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd ffea 	bl	8001970 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a0:	f7fd ffe6 	bl	8001970 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e187      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d036      	beq.n	8003a38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d2:	4b15      	ldr	r3, [pc, #84]	@ (8003a28 <HAL_RCC_OscConfig+0x248>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7fd ffca 	bl	8001970 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e0:	f7fd ffc6 	bl	8001970 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e167      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <HAL_RCC_OscConfig+0x240>)
 80039f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x200>
 80039fe:	e01b      	b.n	8003a38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a00:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <HAL_RCC_OscConfig+0x248>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a06:	f7fd ffb3 	bl	8001970 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0c:	e00e      	b.n	8003a2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0e:	f7fd ffaf 	bl	8001970 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d907      	bls.n	8003a2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e150      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
 8003a20:	40023800 	.word	0x40023800
 8003a24:	42470000 	.word	0x42470000
 8003a28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a2c:	4b88      	ldr	r3, [pc, #544]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1ea      	bne.n	8003a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8097 	beq.w	8003b74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4a:	4b81      	ldr	r3, [pc, #516]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a66:	4b7a      	ldr	r3, [pc, #488]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a76:	4b77      	ldr	r3, [pc, #476]	@ (8003c54 <HAL_RCC_OscConfig+0x474>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d118      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a82:	4b74      	ldr	r3, [pc, #464]	@ (8003c54 <HAL_RCC_OscConfig+0x474>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a73      	ldr	r2, [pc, #460]	@ (8003c54 <HAL_RCC_OscConfig+0x474>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8e:	f7fd ff6f 	bl	8001970 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a96:	f7fd ff6b 	bl	8001970 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e10c      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c54 <HAL_RCC_OscConfig+0x474>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x2ea>
 8003abc:	4b64      	ldr	r3, [pc, #400]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac0:	4a63      	ldr	r2, [pc, #396]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac8:	e01c      	b.n	8003b04 <HAL_RCC_OscConfig+0x324>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x30c>
 8003ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad6:	4a5e      	ldr	r2, [pc, #376]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	f043 0304 	orr.w	r3, r3, #4
 8003adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ade:	4b5c      	ldr	r3, [pc, #368]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	4a5b      	ldr	r2, [pc, #364]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aea:	e00b      	b.n	8003b04 <HAL_RCC_OscConfig+0x324>
 8003aec:	4b58      	ldr	r3, [pc, #352]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af0:	4a57      	ldr	r2, [pc, #348]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003af2:	f023 0301 	bic.w	r3, r3, #1
 8003af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af8:	4b55      	ldr	r3, [pc, #340]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afc:	4a54      	ldr	r2, [pc, #336]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003afe:	f023 0304 	bic.w	r3, r3, #4
 8003b02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d015      	beq.n	8003b38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fd ff30 	bl	8001970 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b14:	f7fd ff2c 	bl	8001970 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e0cb      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2a:	4b49      	ldr	r3, [pc, #292]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0ee      	beq.n	8003b14 <HAL_RCC_OscConfig+0x334>
 8003b36:	e014      	b.n	8003b62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b38:	f7fd ff1a 	bl	8001970 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fd ff16 	bl	8001970 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0b5      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b56:	4b3e      	ldr	r3, [pc, #248]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1ee      	bne.n	8003b40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d105      	bne.n	8003b74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b68:	4b39      	ldr	r3, [pc, #228]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6c:	4a38      	ldr	r2, [pc, #224]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80a1 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b7e:	4b34      	ldr	r3, [pc, #208]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d05c      	beq.n	8003c44 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d141      	bne.n	8003c16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b92:	4b31      	ldr	r3, [pc, #196]	@ (8003c58 <HAL_RCC_OscConfig+0x478>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fd feea 	bl	8001970 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fd fee6 	bl	8001970 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e087      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb2:	4b27      	ldr	r3, [pc, #156]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	491b      	ldr	r1, [pc, #108]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <HAL_RCC_OscConfig+0x478>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bee:	f7fd febf 	bl	8001970 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fd febb 	bl	8001970 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e05c      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c08:	4b11      	ldr	r3, [pc, #68]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x416>
 8003c14:	e054      	b.n	8003cc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c16:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <HAL_RCC_OscConfig+0x478>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7fd fea8 	bl	8001970 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fd fea4 	bl	8001970 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e045      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <HAL_RCC_OscConfig+0x470>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x444>
 8003c42:	e03d      	b.n	8003cc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e038      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40007000 	.word	0x40007000
 8003c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ccc <HAL_RCC_OscConfig+0x4ec>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d028      	beq.n	8003cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d121      	bne.n	8003cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d11a      	bne.n	8003cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d111      	bne.n	8003cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca2:	085b      	lsrs	r3, r3, #1
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d107      	bne.n	8003cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800

08003cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0cc      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b68      	ldr	r3, [pc, #416]	@ (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d90c      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b65      	ldr	r3, [pc, #404]	@ (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b63      	ldr	r3, [pc, #396]	@ (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0b8      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d020      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d24:	4b59      	ldr	r3, [pc, #356]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a58      	ldr	r2, [pc, #352]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d3c:	4b53      	ldr	r3, [pc, #332]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a52      	ldr	r2, [pc, #328]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d48:	4b50      	ldr	r3, [pc, #320]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	494d      	ldr	r1, [pc, #308]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d044      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b47      	ldr	r3, [pc, #284]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d119      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e07f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d003      	beq.n	8003d8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e06f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e067      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dae:	4b37      	ldr	r3, [pc, #220]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f023 0203 	bic.w	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4934      	ldr	r1, [pc, #208]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dc0:	f7fd fdd6 	bl	8001970 <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc8:	f7fd fdd2 	bl	8001970 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e04f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	4b2b      	ldr	r3, [pc, #172]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 020c 	and.w	r2, r3, #12
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d1eb      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003df0:	4b25      	ldr	r3, [pc, #148]	@ (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d20c      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	4b22      	ldr	r3, [pc, #136]	@ (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e032      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4916      	ldr	r1, [pc, #88]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e42:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	490e      	ldr	r1, [pc, #56]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e56:	f000 f821 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	490a      	ldr	r1, [pc, #40]	@ (8003e90 <HAL_RCC_ClockConfig+0x1c0>)
 8003e68:	5ccb      	ldrb	r3, [r1, r3]
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	4a09      	ldr	r2, [pc, #36]	@ (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e72:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fd fd36 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023c00 	.word	0x40023c00
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	080069e4 	.word	0x080069e4
 8003e94:	20000000 	.word	0x20000000
 8003e98:	20000008 	.word	0x20000008

08003e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea0:	b090      	sub	sp, #64	@ 0x40
 8003ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb4:	4b59      	ldr	r3, [pc, #356]	@ (800401c <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d00d      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x40>
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	f200 80a1 	bhi.w	8004008 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ece:	e09b      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ed0:	4b53      	ldr	r3, [pc, #332]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ed4:	e09b      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ed6:	4b53      	ldr	r3, [pc, #332]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003eda:	e098      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003edc:	4b4f      	ldr	r3, [pc, #316]	@ (800401c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ee4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ee6:	4b4d      	ldr	r3, [pc, #308]	@ (800401c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d028      	beq.n	8003f44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800401c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	099b      	lsrs	r3, r3, #6
 8003ef8:	2200      	movs	r2, #0
 8003efa:	623b      	str	r3, [r7, #32]
 8003efc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f04:	2100      	movs	r1, #0
 8003f06:	4b47      	ldr	r3, [pc, #284]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f08:	fb03 f201 	mul.w	r2, r3, r1
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	fb00 f303 	mul.w	r3, r0, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	4a43      	ldr	r2, [pc, #268]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f16:	fba0 1202 	umull	r1, r2, r0, r2
 8003f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f1c:	460a      	mov	r2, r1
 8003f1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f22:	4413      	add	r3, r2
 8003f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f28:	2200      	movs	r2, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	61fa      	str	r2, [r7, #28]
 8003f2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f36:	f7fc f99b 	bl	8000270 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4613      	mov	r3, r2
 8003f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f42:	e053      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f44:	4b35      	ldr	r3, [pc, #212]	@ (800401c <HAL_RCC_GetSysClockFreq+0x180>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	099b      	lsrs	r3, r3, #6
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	617a      	str	r2, [r7, #20]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f56:	f04f 0b00 	mov.w	fp, #0
 8003f5a:	4652      	mov	r2, sl
 8003f5c:	465b      	mov	r3, fp
 8003f5e:	f04f 0000 	mov.w	r0, #0
 8003f62:	f04f 0100 	mov.w	r1, #0
 8003f66:	0159      	lsls	r1, r3, #5
 8003f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f6c:	0150      	lsls	r0, r2, #5
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	ebb2 080a 	subs.w	r8, r2, sl
 8003f76:	eb63 090b 	sbc.w	r9, r3, fp
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f8e:	ebb2 0408 	subs.w	r4, r2, r8
 8003f92:	eb63 0509 	sbc.w	r5, r3, r9
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	00eb      	lsls	r3, r5, #3
 8003fa0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa4:	00e2      	lsls	r2, r4, #3
 8003fa6:	4614      	mov	r4, r2
 8003fa8:	461d      	mov	r5, r3
 8003faa:	eb14 030a 	adds.w	r3, r4, sl
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	eb45 030b 	adc.w	r3, r5, fp
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	028b      	lsls	r3, r1, #10
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fcc:	4621      	mov	r1, r4
 8003fce:	028a      	lsls	r2, r1, #10
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	60fa      	str	r2, [r7, #12]
 8003fdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fe0:	f7fc f946 	bl	8000270 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4613      	mov	r3, r2
 8003fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <HAL_RCC_GetSysClockFreq+0x180>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ffc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004006:	e002      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004008:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x184>)
 800400a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800400c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800400e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004010:	4618      	mov	r0, r3
 8004012:	3740      	adds	r7, #64	@ 0x40
 8004014:	46bd      	mov	sp, r7
 8004016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	00f42400 	.word	0x00f42400
 8004024:	017d7840 	.word	0x017d7840

08004028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800402c:	4b03      	ldr	r3, [pc, #12]	@ (800403c <HAL_RCC_GetHCLKFreq+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000000 	.word	0x20000000

08004040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004044:	f7ff fff0 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 8004048:	4602      	mov	r2, r0
 800404a:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	0a9b      	lsrs	r3, r3, #10
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	4903      	ldr	r1, [pc, #12]	@ (8004064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004056:	5ccb      	ldrb	r3, [r1, r3]
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800405c:	4618      	mov	r0, r3
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	080069f4 	.word	0x080069f4

08004068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800406c:	f7ff ffdc 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0b5b      	lsrs	r3, r3, #13
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4903      	ldr	r1, [pc, #12]	@ (800408c <HAL_RCC_GetPCLK2Freq+0x24>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	080069f4 	.word	0x080069f4

08004090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e07b      	b.n	800419a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d108      	bne.n	80040bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040b2:	d009      	beq.n	80040c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	61da      	str	r2, [r3, #28]
 80040ba:	e005      	b.n	80040c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc fcae 	bl	8000a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414c:	ea42 0103 	orr.w	r1, r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	f003 0104 	and.w	r1, r3, #4
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	f003 0210 	and.w	r2, r3, #16
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004188:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b088      	sub	sp, #32
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b2:	f7fd fbdd 	bl	8001970 <HAL_GetTick>
 80041b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d001      	beq.n	80041cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80041c8:	2302      	movs	r3, #2
 80041ca:	e12a      	b.n	8004422 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_SPI_Transmit+0x36>
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e122      	b.n	8004422 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_SPI_Transmit+0x48>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e11b      	b.n	8004422 <HAL_SPI_Transmit+0x280>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2203      	movs	r2, #3
 80041f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004238:	d10f      	bne.n	800425a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004248:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004258:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004264:	2b40      	cmp	r3, #64	@ 0x40
 8004266:	d007      	beq.n	8004278 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004280:	d152      	bne.n	8004328 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_SPI_Transmit+0xee>
 800428a:	8b7b      	ldrh	r3, [r7, #26]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d145      	bne.n	800431c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004294:	881a      	ldrh	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a0:	1c9a      	adds	r2, r3, #2
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042b4:	e032      	b.n	800431c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d112      	bne.n	80042ea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c8:	881a      	ldrh	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d4:	1c9a      	adds	r2, r3, #2
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042e8:	e018      	b.n	800431c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ea:	f7fd fb41 	bl	8001970 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d803      	bhi.n	8004302 <HAL_SPI_Transmit+0x160>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d102      	bne.n	8004308 <HAL_SPI_Transmit+0x166>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e082      	b.n	8004422 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1c7      	bne.n	80042b6 <HAL_SPI_Transmit+0x114>
 8004326:	e053      	b.n	80043d0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_SPI_Transmit+0x194>
 8004330:	8b7b      	ldrh	r3, [r7, #26]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d147      	bne.n	80043c6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	330c      	adds	r3, #12
 8004340:	7812      	ldrb	r2, [r2, #0]
 8004342:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800435c:	e033      	b.n	80043c6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b02      	cmp	r3, #2
 800436a:	d113      	bne.n	8004394 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	7812      	ldrb	r2, [r2, #0]
 8004378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004392:	e018      	b.n	80043c6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004394:	f7fd faec 	bl	8001970 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d803      	bhi.n	80043ac <HAL_SPI_Transmit+0x20a>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	d102      	bne.n	80043b2 <HAL_SPI_Transmit+0x210>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e02d      	b.n	8004422 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1c6      	bne.n	800435e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	6839      	ldr	r1, [r7, #0]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f8b1 	bl	800453c <SPI_EndRxTxTransaction>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004420:	2300      	movs	r3, #0
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800443c:	f7fd fa98 	bl	8001970 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	4413      	add	r3, r2
 800444a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800444c:	f7fd fa90 	bl	8001970 <HAL_GetTick>
 8004450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004452:	4b39      	ldr	r3, [pc, #228]	@ (8004538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	015b      	lsls	r3, r3, #5
 8004458:	0d1b      	lsrs	r3, r3, #20
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	fb02 f303 	mul.w	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004462:	e054      	b.n	800450e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d050      	beq.n	800450e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800446c:	f7fd fa80 	bl	8001970 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	429a      	cmp	r2, r3
 800447a:	d902      	bls.n	8004482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d13d      	bne.n	80044fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800449a:	d111      	bne.n	80044c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a4:	d004      	beq.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ae:	d107      	bne.n	80044c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c8:	d10f      	bne.n	80044ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e017      	b.n	800452e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3b01      	subs	r3, #1
 800450c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	bf0c      	ite	eq
 800451e:	2301      	moveq	r3, #1
 8004520:	2300      	movne	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	429a      	cmp	r2, r3
 800452a:	d19b      	bne.n	8004464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000000 	.word	0x20000000

0800453c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2201      	movs	r2, #1
 8004550:	2102      	movs	r1, #2
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff ff6a 	bl	800442c <SPI_WaitFlagStateUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e032      	b.n	80045d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800456e:	4b1b      	ldr	r3, [pc, #108]	@ (80045dc <SPI_EndRxTxTransaction+0xa0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1b      	ldr	r2, [pc, #108]	@ (80045e0 <SPI_EndRxTxTransaction+0xa4>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	0d5b      	lsrs	r3, r3, #21
 800457a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800458c:	d112      	bne.n	80045b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2200      	movs	r2, #0
 8004596:	2180      	movs	r1, #128	@ 0x80
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff ff47 	bl	800442c <SPI_WaitFlagStateUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d016      	beq.n	80045d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a8:	f043 0220 	orr.w	r2, r3, #32
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e00f      	b.n	80045d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	3b01      	subs	r3, #1
 80045be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ca:	2b80      	cmp	r3, #128	@ 0x80
 80045cc:	d0f2      	beq.n	80045b4 <SPI_EndRxTxTransaction+0x78>
 80045ce:	e000      	b.n	80045d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80045d0:	bf00      	nop
  }

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000000 	.word	0x20000000
 80045e0:	165e9f81 	.word	0x165e9f81

080045e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e042      	b.n	800467c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fbe2 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	@ 0x24
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 ff85 	bl	8005538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800463c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800464c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800465c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	@ 0x28
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d175      	bne.n	8004790 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2c>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e06e      	b.n	8004792 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2221      	movs	r2, #33	@ 0x21
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046c2:	f7fd f955 	bl	8001970 <HAL_GetTick>
 80046c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	88fa      	ldrh	r2, [r7, #6]
 80046cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	88fa      	ldrh	r2, [r7, #6]
 80046d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046dc:	d108      	bne.n	80046f0 <HAL_UART_Transmit+0x6c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d104      	bne.n	80046f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e003      	b.n	80046f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046f8:	e02e      	b.n	8004758 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2180      	movs	r1, #128	@ 0x80
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fc5d 	bl	8004fc4 <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e03a      	b.n	8004792 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	3302      	adds	r3, #2
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	e007      	b.n	800474a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	3301      	adds	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1cb      	bne.n	80046fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2200      	movs	r2, #0
 800476a:	2140      	movs	r1, #64	@ 0x40
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fc29 	bl	8004fc4 <UART_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e006      	b.n	8004792 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
  }
}
 8004792:	4618      	mov	r0, r3
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b08c      	sub	sp, #48	@ 0x30
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	4613      	mov	r3, r2
 80047a6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d14a      	bne.n	800484a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e043      	b.n	800484c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	461a      	mov	r2, r3
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fc4e 	bl	8005078 <UART_Start_Receive_DMA>
 80047dc:	4603      	mov	r3, r0
 80047de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80047e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d12c      	bne.n	8004844 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d125      	bne.n	800483e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	617b      	str	r3, [r7, #20]
   return(result);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f043 0310 	orr.w	r3, r3, #16
 800481e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004828:	627a      	str	r2, [r7, #36]	@ 0x24
 800482a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	6a39      	ldr	r1, [r7, #32]
 800482e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	61fb      	str	r3, [r7, #28]
   return(result);
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e5      	bne.n	8004808 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800483c:	e002      	b.n	8004844 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004844:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004848:	e000      	b.n	800484c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800484a:	2302      	movs	r3, #2
  }
}
 800484c:	4618      	mov	r0, r3
 800484e:	3730      	adds	r7, #48	@ 0x30
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b0ba      	sub	sp, #232	@ 0xe8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800487a:	2300      	movs	r3, #0
 800487c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10f      	bne.n	80048ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_UART_IRQHandler+0x66>
 80048a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fd81 	bl	80053ba <UART_Receive_IT>
      return;
 80048b8:	e25b      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80de 	beq.w	8004a80 <HAL_UART_IRQHandler+0x22c>
 80048c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80d1 	beq.w	8004a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_UART_IRQHandler+0xae>
 80048ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fa:	f043 0201 	orr.w	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00b      	beq.n	8004926 <HAL_UART_IRQHandler+0xd2>
 800490e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491e:	f043 0202 	orr.w	r2, r3, #2
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <HAL_UART_IRQHandler+0xf6>
 8004932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004942:	f043 0204 	orr.w	r2, r3, #4
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800494a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d011      	beq.n	800497a <HAL_UART_IRQHandler+0x126>
 8004956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004972:	f043 0208 	orr.w	r2, r3, #8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 81f2 	beq.w	8004d68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_UART_IRQHandler+0x14e>
 8004990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fd0c 	bl	80053ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ac:	2b40      	cmp	r3, #64	@ 0x40
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <HAL_UART_IRQHandler+0x17a>
 80049c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d04f      	beq.n	8004a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fc14 	bl	80051fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049de:	2b40      	cmp	r3, #64	@ 0x40
 80049e0:	d141      	bne.n	8004a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3314      	adds	r3, #20
 80049e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3314      	adds	r3, #20
 8004a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1d9      	bne.n	80049e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d013      	beq.n	8004a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c34 <HAL_UART_IRQHandler+0x3e0>)
 8004a3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd fa4c 	bl	8001ee0 <HAL_DMA_Abort_IT>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d016      	beq.n	8004a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	e00e      	b.n	8004a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9a8 	bl	8004db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a64:	e00a      	b.n	8004a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9a4 	bl	8004db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	e006      	b.n	8004a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9a0 	bl	8004db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a7a:	e175      	b.n	8004d68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7c:	bf00      	nop
    return;
 8004a7e:	e173      	b.n	8004d68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	f040 814f 	bne.w	8004d28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8148 	beq.w	8004d28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8141 	beq.w	8004d28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac6:	2b40      	cmp	r3, #64	@ 0x40
 8004ac8:	f040 80b6 	bne.w	8004c38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8145 	beq.w	8004d6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aea:	429a      	cmp	r2, r3
 8004aec:	f080 813e 	bcs.w	8004d6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004af6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b02:	f000 8088 	beq.w	8004c16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1d9      	bne.n	8004b06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3314      	adds	r3, #20
 8004b58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3314      	adds	r3, #20
 8004b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e1      	bne.n	8004b52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3314      	adds	r3, #20
 8004b94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3314      	adds	r3, #20
 8004bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e3      	bne.n	8004b8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004be6:	f023 0310 	bic.w	r3, r3, #16
 8004bea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004bf8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e3      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd f8f5 	bl	8001e00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fb fdef 	bl	8000810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c32:	e09b      	b.n	8004d6c <HAL_UART_IRQHandler+0x518>
 8004c34:	080052c3 	.word	0x080052c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 808e 	beq.w	8004d70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8089 	beq.w	8004d70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c82:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e3      	bne.n	8004c5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3314      	adds	r3, #20
 8004c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cba:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e3      	bne.n	8004c96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0310 	bic.w	r3, r3, #16
 8004cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d00:	61fa      	str	r2, [r7, #28]
 8004d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e3      	bne.n	8004cdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fb fd75 	bl	8000810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d26:	e023      	b.n	8004d70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d009      	beq.n	8004d48 <HAL_UART_IRQHandler+0x4f4>
 8004d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fad2 	bl	80052ea <UART_Transmit_IT>
    return;
 8004d46:	e014      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00e      	beq.n	8004d72 <HAL_UART_IRQHandler+0x51e>
 8004d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fb12 	bl	800538a <UART_EndTransmit_IT>
    return;
 8004d66:	e004      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
    return;
 8004d68:	bf00      	nop
 8004d6a:	e002      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d6c:	bf00      	nop
 8004d6e:	e000      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d70:	bf00      	nop
  }
}
 8004d72:	37e8      	adds	r7, #232	@ 0xe8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b09c      	sub	sp, #112	@ 0x70
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d172      	bne.n	8004eca <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004de4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004de6:	2200      	movs	r2, #0
 8004de8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	330c      	adds	r3, #12
 8004df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004df4:	e853 3f00 	ldrex	r3, [r3]
 8004df8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	330c      	adds	r3, #12
 8004e08:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e0a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e0c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e5      	bne.n	8004dea <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3314      	adds	r3, #20
 8004e24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3314      	adds	r3, #20
 8004e3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e5      	bne.n	8004e1e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3314      	adds	r3, #20
 8004e58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	623b      	str	r3, [r7, #32]
   return(result);
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e68:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3314      	adds	r3, #20
 8004e70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004e72:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e5      	bne.n	8004e52 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d119      	bne.n	8004eca <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f023 0310 	bic.w	r3, r3, #16
 8004eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004eb6:	61fa      	str	r2, [r7, #28]
 8004eb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	69b9      	ldr	r1, [r7, #24]
 8004ebc:	69fa      	ldr	r2, [r7, #28]
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e5      	bne.n	8004e96 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ecc:	2200      	movs	r2, #0
 8004ece:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d106      	bne.n	8004ee6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004edc:	4619      	mov	r1, r3
 8004ede:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004ee0:	f7fb fc96 	bl	8000810 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ee4:	e002      	b.n	8004eec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004ee6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004ee8:	f7ff ff50 	bl	8004d8c <HAL_UART_RxCpltCallback>
}
 8004eec:	bf00      	nop
 8004eee:	3770      	adds	r7, #112	@ 0x70
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d108      	bne.n	8004f22 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	4619      	mov	r1, r3
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7fb fc78 	bl	8000810 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f20:	e002      	b.n	8004f28 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff ff3c 	bl	8004da0 <HAL_UART_RxHalfCpltCallback>
}
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f40:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4c:	2b80      	cmp	r3, #128	@ 0x80
 8004f4e:	bf0c      	ite	eq
 8004f50:	2301      	moveq	r3, #1
 8004f52:	2300      	movne	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b21      	cmp	r3, #33	@ 0x21
 8004f62:	d108      	bne.n	8004f76 <UART_DMAError+0x46>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004f70:	68b8      	ldr	r0, [r7, #8]
 8004f72:	f000 f91b 	bl	80051ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f80:	2b40      	cmp	r3, #64	@ 0x40
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b22      	cmp	r3, #34	@ 0x22
 8004f96:	d108      	bne.n	8004faa <UART_DMAError+0x7a>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004fa4:	68b8      	ldr	r0, [r7, #8]
 8004fa6:	f000 f929 	bl	80051fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	f043 0210 	orr.w	r2, r3, #16
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fb6:	68b8      	ldr	r0, [r7, #8]
 8004fb8:	f7ff fefc 	bl	8004db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fbc:	bf00      	nop
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd4:	e03b      	b.n	800504e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d037      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fde:	f7fc fcc7 	bl	8001970 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	6a3a      	ldr	r2, [r7, #32]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d302      	bcc.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e03a      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d023      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b80      	cmp	r3, #128	@ 0x80
 800500a:	d020      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x8a>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b40      	cmp	r3, #64	@ 0x40
 8005010:	d01d      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b08      	cmp	r3, #8
 800501e:	d116      	bne.n	800504e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f8e0 	bl	80051fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2208      	movs	r2, #8
 8005040:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e00f      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4013      	ands	r3, r2
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	429a      	cmp	r2, r3
 800505c:	bf0c      	ite	eq
 800505e:	2301      	moveq	r3, #1
 8005060:	2300      	movne	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	429a      	cmp	r2, r3
 800506a:	d0b4      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b098      	sub	sp, #96	@ 0x60
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	88fa      	ldrh	r2, [r7, #6]
 8005090:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2222      	movs	r2, #34	@ 0x22
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a4:	4a3e      	ldr	r2, [pc, #248]	@ (80051a0 <UART_Start_Receive_DMA+0x128>)
 80050a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ac:	4a3d      	ldr	r2, [pc, #244]	@ (80051a4 <UART_Start_Receive_DMA+0x12c>)
 80050ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b4:	4a3c      	ldr	r2, [pc, #240]	@ (80051a8 <UART_Start_Receive_DMA+0x130>)
 80050b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050bc:	2200      	movs	r2, #0
 80050be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80050c0:	f107 0308 	add.w	r3, r7, #8
 80050c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4619      	mov	r1, r3
 80050d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	f7fc fe3a 	bl	8001d50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d019      	beq.n	800512e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800510a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800510c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005110:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	330c      	adds	r3, #12
 8005118:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800511a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800511c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005120:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e5      	bne.n	80050fa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3314      	adds	r3, #20
 8005134:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	657b      	str	r3, [r7, #84]	@ 0x54
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3314      	adds	r3, #20
 800514c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800514e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005150:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005154:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e5      	bne.n	800512e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	617b      	str	r3, [r7, #20]
   return(result);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005178:	653b      	str	r3, [r7, #80]	@ 0x50
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005182:	627a      	str	r2, [r7, #36]	@ 0x24
 8005184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6a39      	ldr	r1, [r7, #32]
 8005188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e5      	bne.n	8005162 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3760      	adds	r7, #96	@ 0x60
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	08004dc9 	.word	0x08004dc9
 80051a4:	08004ef5 	.word	0x08004ef5
 80051a8:	08004f31 	.word	0x08004f31

080051ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b089      	sub	sp, #36	@ 0x24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	330c      	adds	r3, #12
 80051ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	61ba      	str	r2, [r7, #24]
 80051d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6979      	ldr	r1, [r7, #20]
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	613b      	str	r3, [r7, #16]
   return(result);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e5      	bne.n	80051b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80051f0:	bf00      	nop
 80051f2:	3724      	adds	r7, #36	@ 0x24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b095      	sub	sp, #84	@ 0x54
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005216:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800521a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005224:	643a      	str	r2, [r7, #64]	@ 0x40
 8005226:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800522a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3314      	adds	r3, #20
 800523e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	61fb      	str	r3, [r7, #28]
   return(result);
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f023 0301 	bic.w	r3, r3, #1
 800524e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3314      	adds	r3, #20
 8005256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005258:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800525a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800525e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e5      	bne.n	8005238 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005270:	2b01      	cmp	r3, #1
 8005272:	d119      	bne.n	80052a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	330c      	adds	r3, #12
 800527a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	60bb      	str	r3, [r7, #8]
   return(result);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f023 0310 	bic.w	r3, r3, #16
 800528a:	647b      	str	r3, [r7, #68]	@ 0x44
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005294:	61ba      	str	r2, [r7, #24]
 8005296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	6979      	ldr	r1, [r7, #20]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	e841 2300 	strex	r3, r2, [r1]
 80052a0:	613b      	str	r3, [r7, #16]
   return(result);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e5      	bne.n	8005274 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052b6:	bf00      	nop
 80052b8:	3754      	adds	r7, #84	@ 0x54
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7ff fd69 	bl	8004db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052e2:	bf00      	nop
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b21      	cmp	r3, #33	@ 0x21
 80052fc:	d13e      	bne.n	800537c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005306:	d114      	bne.n	8005332 <UART_Transmit_IT+0x48>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d110      	bne.n	8005332 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005324:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	1c9a      	adds	r2, r3, #2
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	621a      	str	r2, [r3, #32]
 8005330:	e008      	b.n	8005344 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	1c59      	adds	r1, r3, #1
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6211      	str	r1, [r2, #32]
 800533c:	781a      	ldrb	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b29b      	uxth	r3, r3
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4619      	mov	r1, r3
 8005352:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10f      	bne.n	8005378 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005366:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005376:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005378:	2300      	movs	r3, #0
 800537a:	e000      	b.n	800537e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800537c:	2302      	movs	r3, #2
  }
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff fce4 	bl	8004d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b08c      	sub	sp, #48	@ 0x30
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b22      	cmp	r3, #34	@ 0x22
 80053cc:	f040 80ae 	bne.w	800552c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053d8:	d117      	bne.n	800540a <UART_Receive_IT+0x50>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d113      	bne.n	800540a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	629a      	str	r2, [r3, #40]	@ 0x28
 8005408:	e026      	b.n	8005458 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005410:	2300      	movs	r3, #0
 8005412:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800541c:	d007      	beq.n	800542e <UART_Receive_IT+0x74>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <UART_Receive_IT+0x82>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	e008      	b.n	800544e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005448:	b2da      	uxtb	r2, r3
 800544a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29b      	uxth	r3, r3
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	4619      	mov	r1, r3
 8005466:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005468:	2b00      	cmp	r3, #0
 800546a:	d15d      	bne.n	8005528 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0220 	bic.w	r2, r2, #32
 800547a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800548a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d135      	bne.n	800551e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	613b      	str	r3, [r7, #16]
   return(result);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f023 0310 	bic.w	r3, r3, #16
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d8:	623a      	str	r2, [r7, #32]
 80054da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	69f9      	ldr	r1, [r7, #28]
 80054de:	6a3a      	ldr	r2, [r7, #32]
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e5      	bne.n	80054b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d10a      	bne.n	8005510 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fb f97a 	bl	8000810 <HAL_UARTEx_RxEventCallback>
 800551c:	e002      	b.n	8005524 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff fc34 	bl	8004d8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	e002      	b.n	800552e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	e000      	b.n	800552e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800552c:	2302      	movs	r3, #2
  }
}
 800552e:	4618      	mov	r0, r3
 8005530:	3730      	adds	r7, #48	@ 0x30
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800553c:	b0c0      	sub	sp, #256	@ 0x100
 800553e:	af00      	add	r7, sp, #0
 8005540:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005554:	68d9      	ldr	r1, [r3, #12]
 8005556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	ea40 0301 	orr.w	r3, r0, r1
 8005560:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	431a      	orrs	r2, r3
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	431a      	orrs	r2, r3
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005590:	f021 010c 	bic.w	r1, r1, #12
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800559e:	430b      	orrs	r3, r1
 80055a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b2:	6999      	ldr	r1, [r3, #24]
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	ea40 0301 	orr.w	r3, r0, r1
 80055be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4b8f      	ldr	r3, [pc, #572]	@ (8005804 <UART_SetConfig+0x2cc>)
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d005      	beq.n	80055d8 <UART_SetConfig+0xa0>
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b8d      	ldr	r3, [pc, #564]	@ (8005808 <UART_SetConfig+0x2d0>)
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d104      	bne.n	80055e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055d8:	f7fe fd46 	bl	8004068 <HAL_RCC_GetPCLK2Freq>
 80055dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055e0:	e003      	b.n	80055ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055e2:	f7fe fd2d 	bl	8004040 <HAL_RCC_GetPCLK1Freq>
 80055e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055f4:	f040 810c 	bne.w	8005810 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055fc:	2200      	movs	r2, #0
 80055fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005602:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005606:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800560a:	4622      	mov	r2, r4
 800560c:	462b      	mov	r3, r5
 800560e:	1891      	adds	r1, r2, r2
 8005610:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005612:	415b      	adcs	r3, r3
 8005614:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005616:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800561a:	4621      	mov	r1, r4
 800561c:	eb12 0801 	adds.w	r8, r2, r1
 8005620:	4629      	mov	r1, r5
 8005622:	eb43 0901 	adc.w	r9, r3, r1
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800563a:	4690      	mov	r8, r2
 800563c:	4699      	mov	r9, r3
 800563e:	4623      	mov	r3, r4
 8005640:	eb18 0303 	adds.w	r3, r8, r3
 8005644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005648:	462b      	mov	r3, r5
 800564a:	eb49 0303 	adc.w	r3, r9, r3
 800564e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800565e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005662:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005666:	460b      	mov	r3, r1
 8005668:	18db      	adds	r3, r3, r3
 800566a:	653b      	str	r3, [r7, #80]	@ 0x50
 800566c:	4613      	mov	r3, r2
 800566e:	eb42 0303 	adc.w	r3, r2, r3
 8005672:	657b      	str	r3, [r7, #84]	@ 0x54
 8005674:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005678:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800567c:	f7fa fdf8 	bl	8000270 <__aeabi_uldivmod>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4b61      	ldr	r3, [pc, #388]	@ (800580c <UART_SetConfig+0x2d4>)
 8005686:	fba3 2302 	umull	r2, r3, r3, r2
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	011c      	lsls	r4, r3, #4
 800568e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005692:	2200      	movs	r2, #0
 8005694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005698:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800569c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056a0:	4642      	mov	r2, r8
 80056a2:	464b      	mov	r3, r9
 80056a4:	1891      	adds	r1, r2, r2
 80056a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056a8:	415b      	adcs	r3, r3
 80056aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056b0:	4641      	mov	r1, r8
 80056b2:	eb12 0a01 	adds.w	sl, r2, r1
 80056b6:	4649      	mov	r1, r9
 80056b8:	eb43 0b01 	adc.w	fp, r3, r1
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056d0:	4692      	mov	sl, r2
 80056d2:	469b      	mov	fp, r3
 80056d4:	4643      	mov	r3, r8
 80056d6:	eb1a 0303 	adds.w	r3, sl, r3
 80056da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056de:	464b      	mov	r3, r9
 80056e0:	eb4b 0303 	adc.w	r3, fp, r3
 80056e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056fc:	460b      	mov	r3, r1
 80056fe:	18db      	adds	r3, r3, r3
 8005700:	643b      	str	r3, [r7, #64]	@ 0x40
 8005702:	4613      	mov	r3, r2
 8005704:	eb42 0303 	adc.w	r3, r2, r3
 8005708:	647b      	str	r3, [r7, #68]	@ 0x44
 800570a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800570e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005712:	f7fa fdad 	bl	8000270 <__aeabi_uldivmod>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4611      	mov	r1, r2
 800571c:	4b3b      	ldr	r3, [pc, #236]	@ (800580c <UART_SetConfig+0x2d4>)
 800571e:	fba3 2301 	umull	r2, r3, r3, r1
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	2264      	movs	r2, #100	@ 0x64
 8005726:	fb02 f303 	mul.w	r3, r2, r3
 800572a:	1acb      	subs	r3, r1, r3
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005732:	4b36      	ldr	r3, [pc, #216]	@ (800580c <UART_SetConfig+0x2d4>)
 8005734:	fba3 2302 	umull	r2, r3, r3, r2
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005740:	441c      	add	r4, r3
 8005742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005746:	2200      	movs	r2, #0
 8005748:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800574c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005750:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005754:	4642      	mov	r2, r8
 8005756:	464b      	mov	r3, r9
 8005758:	1891      	adds	r1, r2, r2
 800575a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800575c:	415b      	adcs	r3, r3
 800575e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005764:	4641      	mov	r1, r8
 8005766:	1851      	adds	r1, r2, r1
 8005768:	6339      	str	r1, [r7, #48]	@ 0x30
 800576a:	4649      	mov	r1, r9
 800576c:	414b      	adcs	r3, r1
 800576e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800577c:	4659      	mov	r1, fp
 800577e:	00cb      	lsls	r3, r1, #3
 8005780:	4651      	mov	r1, sl
 8005782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005786:	4651      	mov	r1, sl
 8005788:	00ca      	lsls	r2, r1, #3
 800578a:	4610      	mov	r0, r2
 800578c:	4619      	mov	r1, r3
 800578e:	4603      	mov	r3, r0
 8005790:	4642      	mov	r2, r8
 8005792:	189b      	adds	r3, r3, r2
 8005794:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005798:	464b      	mov	r3, r9
 800579a:	460a      	mov	r2, r1
 800579c:	eb42 0303 	adc.w	r3, r2, r3
 80057a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057b8:	460b      	mov	r3, r1
 80057ba:	18db      	adds	r3, r3, r3
 80057bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057be:	4613      	mov	r3, r2
 80057c0:	eb42 0303 	adc.w	r3, r2, r3
 80057c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057ce:	f7fa fd4f 	bl	8000270 <__aeabi_uldivmod>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <UART_SetConfig+0x2d4>)
 80057d8:	fba3 1302 	umull	r1, r3, r3, r2
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	2164      	movs	r1, #100	@ 0x64
 80057e0:	fb01 f303 	mul.w	r3, r1, r3
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	3332      	adds	r3, #50	@ 0x32
 80057ea:	4a08      	ldr	r2, [pc, #32]	@ (800580c <UART_SetConfig+0x2d4>)
 80057ec:	fba2 2303 	umull	r2, r3, r2, r3
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	f003 0207 	and.w	r2, r3, #7
 80057f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4422      	add	r2, r4
 80057fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005800:	e106      	b.n	8005a10 <UART_SetConfig+0x4d8>
 8005802:	bf00      	nop
 8005804:	40011000 	.word	0x40011000
 8005808:	40011400 	.word	0x40011400
 800580c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005814:	2200      	movs	r2, #0
 8005816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800581a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800581e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005822:	4642      	mov	r2, r8
 8005824:	464b      	mov	r3, r9
 8005826:	1891      	adds	r1, r2, r2
 8005828:	6239      	str	r1, [r7, #32]
 800582a:	415b      	adcs	r3, r3
 800582c:	627b      	str	r3, [r7, #36]	@ 0x24
 800582e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005832:	4641      	mov	r1, r8
 8005834:	1854      	adds	r4, r2, r1
 8005836:	4649      	mov	r1, r9
 8005838:	eb43 0501 	adc.w	r5, r3, r1
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	00eb      	lsls	r3, r5, #3
 8005846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800584a:	00e2      	lsls	r2, r4, #3
 800584c:	4614      	mov	r4, r2
 800584e:	461d      	mov	r5, r3
 8005850:	4643      	mov	r3, r8
 8005852:	18e3      	adds	r3, r4, r3
 8005854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005858:	464b      	mov	r3, r9
 800585a:	eb45 0303 	adc.w	r3, r5, r3
 800585e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800586e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800587e:	4629      	mov	r1, r5
 8005880:	008b      	lsls	r3, r1, #2
 8005882:	4621      	mov	r1, r4
 8005884:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005888:	4621      	mov	r1, r4
 800588a:	008a      	lsls	r2, r1, #2
 800588c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005890:	f7fa fcee 	bl	8000270 <__aeabi_uldivmod>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4b60      	ldr	r3, [pc, #384]	@ (8005a1c <UART_SetConfig+0x4e4>)
 800589a:	fba3 2302 	umull	r2, r3, r3, r2
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	011c      	lsls	r4, r3, #4
 80058a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058b4:	4642      	mov	r2, r8
 80058b6:	464b      	mov	r3, r9
 80058b8:	1891      	adds	r1, r2, r2
 80058ba:	61b9      	str	r1, [r7, #24]
 80058bc:	415b      	adcs	r3, r3
 80058be:	61fb      	str	r3, [r7, #28]
 80058c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058c4:	4641      	mov	r1, r8
 80058c6:	1851      	adds	r1, r2, r1
 80058c8:	6139      	str	r1, [r7, #16]
 80058ca:	4649      	mov	r1, r9
 80058cc:	414b      	adcs	r3, r1
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058dc:	4659      	mov	r1, fp
 80058de:	00cb      	lsls	r3, r1, #3
 80058e0:	4651      	mov	r1, sl
 80058e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058e6:	4651      	mov	r1, sl
 80058e8:	00ca      	lsls	r2, r1, #3
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	4603      	mov	r3, r0
 80058f0:	4642      	mov	r2, r8
 80058f2:	189b      	adds	r3, r3, r2
 80058f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058f8:	464b      	mov	r3, r9
 80058fa:	460a      	mov	r2, r1
 80058fc:	eb42 0303 	adc.w	r3, r2, r3
 8005900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800590e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800591c:	4649      	mov	r1, r9
 800591e:	008b      	lsls	r3, r1, #2
 8005920:	4641      	mov	r1, r8
 8005922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005926:	4641      	mov	r1, r8
 8005928:	008a      	lsls	r2, r1, #2
 800592a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800592e:	f7fa fc9f 	bl	8000270 <__aeabi_uldivmod>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4611      	mov	r1, r2
 8005938:	4b38      	ldr	r3, [pc, #224]	@ (8005a1c <UART_SetConfig+0x4e4>)
 800593a:	fba3 2301 	umull	r2, r3, r3, r1
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	2264      	movs	r2, #100	@ 0x64
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	1acb      	subs	r3, r1, r3
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	3332      	adds	r3, #50	@ 0x32
 800594c:	4a33      	ldr	r2, [pc, #204]	@ (8005a1c <UART_SetConfig+0x4e4>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005958:	441c      	add	r4, r3
 800595a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800595e:	2200      	movs	r2, #0
 8005960:	673b      	str	r3, [r7, #112]	@ 0x70
 8005962:	677a      	str	r2, [r7, #116]	@ 0x74
 8005964:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005968:	4642      	mov	r2, r8
 800596a:	464b      	mov	r3, r9
 800596c:	1891      	adds	r1, r2, r2
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	415b      	adcs	r3, r3
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005978:	4641      	mov	r1, r8
 800597a:	1851      	adds	r1, r2, r1
 800597c:	6039      	str	r1, [r7, #0]
 800597e:	4649      	mov	r1, r9
 8005980:	414b      	adcs	r3, r1
 8005982:	607b      	str	r3, [r7, #4]
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005990:	4659      	mov	r1, fp
 8005992:	00cb      	lsls	r3, r1, #3
 8005994:	4651      	mov	r1, sl
 8005996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800599a:	4651      	mov	r1, sl
 800599c:	00ca      	lsls	r2, r1, #3
 800599e:	4610      	mov	r0, r2
 80059a0:	4619      	mov	r1, r3
 80059a2:	4603      	mov	r3, r0
 80059a4:	4642      	mov	r2, r8
 80059a6:	189b      	adds	r3, r3, r2
 80059a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059aa:	464b      	mov	r3, r9
 80059ac:	460a      	mov	r2, r1
 80059ae:	eb42 0303 	adc.w	r3, r2, r3
 80059b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80059be:	667a      	str	r2, [r7, #100]	@ 0x64
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059cc:	4649      	mov	r1, r9
 80059ce:	008b      	lsls	r3, r1, #2
 80059d0:	4641      	mov	r1, r8
 80059d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059d6:	4641      	mov	r1, r8
 80059d8:	008a      	lsls	r2, r1, #2
 80059da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059de:	f7fa fc47 	bl	8000270 <__aeabi_uldivmod>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a1c <UART_SetConfig+0x4e4>)
 80059e8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	2164      	movs	r1, #100	@ 0x64
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	3332      	adds	r3, #50	@ 0x32
 80059fa:	4a08      	ldr	r2, [pc, #32]	@ (8005a1c <UART_SetConfig+0x4e4>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	f003 020f 	and.w	r2, r3, #15
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4422      	add	r2, r4
 8005a0e:	609a      	str	r2, [r3, #8]
}
 8005a10:	bf00      	nop
 8005a12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a16:	46bd      	mov	sp, r7
 8005a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a1c:	51eb851f 	.word	0x51eb851f

08005a20 <std>:
 8005a20:	2300      	movs	r3, #0
 8005a22:	b510      	push	{r4, lr}
 8005a24:	4604      	mov	r4, r0
 8005a26:	e9c0 3300 	strd	r3, r3, [r0]
 8005a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a2e:	6083      	str	r3, [r0, #8]
 8005a30:	8181      	strh	r1, [r0, #12]
 8005a32:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a34:	81c2      	strh	r2, [r0, #14]
 8005a36:	6183      	str	r3, [r0, #24]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	305c      	adds	r0, #92	@ 0x5c
 8005a3e:	f000 f9f9 	bl	8005e34 <memset>
 8005a42:	4b0d      	ldr	r3, [pc, #52]	@ (8005a78 <std+0x58>)
 8005a44:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a46:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <std+0x5c>)
 8005a48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <std+0x60>)
 8005a4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a84 <std+0x64>)
 8005a50:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a52:	4b0d      	ldr	r3, [pc, #52]	@ (8005a88 <std+0x68>)
 8005a54:	6224      	str	r4, [r4, #32]
 8005a56:	429c      	cmp	r4, r3
 8005a58:	d006      	beq.n	8005a68 <std+0x48>
 8005a5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a5e:	4294      	cmp	r4, r2
 8005a60:	d002      	beq.n	8005a68 <std+0x48>
 8005a62:	33d0      	adds	r3, #208	@ 0xd0
 8005a64:	429c      	cmp	r4, r3
 8005a66:	d105      	bne.n	8005a74 <std+0x54>
 8005a68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a70:	f000 ba58 	b.w	8005f24 <__retarget_lock_init_recursive>
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	bf00      	nop
 8005a78:	08005c85 	.word	0x08005c85
 8005a7c:	08005ca7 	.word	0x08005ca7
 8005a80:	08005cdf 	.word	0x08005cdf
 8005a84:	08005d03 	.word	0x08005d03
 8005a88:	200003a8 	.word	0x200003a8

08005a8c <stdio_exit_handler>:
 8005a8c:	4a02      	ldr	r2, [pc, #8]	@ (8005a98 <stdio_exit_handler+0xc>)
 8005a8e:	4903      	ldr	r1, [pc, #12]	@ (8005a9c <stdio_exit_handler+0x10>)
 8005a90:	4803      	ldr	r0, [pc, #12]	@ (8005aa0 <stdio_exit_handler+0x14>)
 8005a92:	f000 b869 	b.w	8005b68 <_fwalk_sglue>
 8005a96:	bf00      	nop
 8005a98:	20000010 	.word	0x20000010
 8005a9c:	080067c5 	.word	0x080067c5
 8005aa0:	20000020 	.word	0x20000020

08005aa4 <cleanup_stdio>:
 8005aa4:	6841      	ldr	r1, [r0, #4]
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <cleanup_stdio+0x34>)
 8005aa8:	4299      	cmp	r1, r3
 8005aaa:	b510      	push	{r4, lr}
 8005aac:	4604      	mov	r4, r0
 8005aae:	d001      	beq.n	8005ab4 <cleanup_stdio+0x10>
 8005ab0:	f000 fe88 	bl	80067c4 <_fflush_r>
 8005ab4:	68a1      	ldr	r1, [r4, #8]
 8005ab6:	4b09      	ldr	r3, [pc, #36]	@ (8005adc <cleanup_stdio+0x38>)
 8005ab8:	4299      	cmp	r1, r3
 8005aba:	d002      	beq.n	8005ac2 <cleanup_stdio+0x1e>
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 fe81 	bl	80067c4 <_fflush_r>
 8005ac2:	68e1      	ldr	r1, [r4, #12]
 8005ac4:	4b06      	ldr	r3, [pc, #24]	@ (8005ae0 <cleanup_stdio+0x3c>)
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	d004      	beq.n	8005ad4 <cleanup_stdio+0x30>
 8005aca:	4620      	mov	r0, r4
 8005acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad0:	f000 be78 	b.w	80067c4 <_fflush_r>
 8005ad4:	bd10      	pop	{r4, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200003a8 	.word	0x200003a8
 8005adc:	20000410 	.word	0x20000410
 8005ae0:	20000478 	.word	0x20000478

08005ae4 <global_stdio_init.part.0>:
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b14 <global_stdio_init.part.0+0x30>)
 8005ae8:	4c0b      	ldr	r4, [pc, #44]	@ (8005b18 <global_stdio_init.part.0+0x34>)
 8005aea:	4a0c      	ldr	r2, [pc, #48]	@ (8005b1c <global_stdio_init.part.0+0x38>)
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	4620      	mov	r0, r4
 8005af0:	2200      	movs	r2, #0
 8005af2:	2104      	movs	r1, #4
 8005af4:	f7ff ff94 	bl	8005a20 <std>
 8005af8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005afc:	2201      	movs	r2, #1
 8005afe:	2109      	movs	r1, #9
 8005b00:	f7ff ff8e 	bl	8005a20 <std>
 8005b04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b08:	2202      	movs	r2, #2
 8005b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b0e:	2112      	movs	r1, #18
 8005b10:	f7ff bf86 	b.w	8005a20 <std>
 8005b14:	200004e0 	.word	0x200004e0
 8005b18:	200003a8 	.word	0x200003a8
 8005b1c:	08005a8d 	.word	0x08005a8d

08005b20 <__sfp_lock_acquire>:
 8005b20:	4801      	ldr	r0, [pc, #4]	@ (8005b28 <__sfp_lock_acquire+0x8>)
 8005b22:	f000 ba00 	b.w	8005f26 <__retarget_lock_acquire_recursive>
 8005b26:	bf00      	nop
 8005b28:	200004e9 	.word	0x200004e9

08005b2c <__sfp_lock_release>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	@ (8005b34 <__sfp_lock_release+0x8>)
 8005b2e:	f000 b9fb 	b.w	8005f28 <__retarget_lock_release_recursive>
 8005b32:	bf00      	nop
 8005b34:	200004e9 	.word	0x200004e9

08005b38 <__sinit>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	f7ff fff0 	bl	8005b20 <__sfp_lock_acquire>
 8005b40:	6a23      	ldr	r3, [r4, #32]
 8005b42:	b11b      	cbz	r3, 8005b4c <__sinit+0x14>
 8005b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b48:	f7ff bff0 	b.w	8005b2c <__sfp_lock_release>
 8005b4c:	4b04      	ldr	r3, [pc, #16]	@ (8005b60 <__sinit+0x28>)
 8005b4e:	6223      	str	r3, [r4, #32]
 8005b50:	4b04      	ldr	r3, [pc, #16]	@ (8005b64 <__sinit+0x2c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1f5      	bne.n	8005b44 <__sinit+0xc>
 8005b58:	f7ff ffc4 	bl	8005ae4 <global_stdio_init.part.0>
 8005b5c:	e7f2      	b.n	8005b44 <__sinit+0xc>
 8005b5e:	bf00      	nop
 8005b60:	08005aa5 	.word	0x08005aa5
 8005b64:	200004e0 	.word	0x200004e0

08005b68 <_fwalk_sglue>:
 8005b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	4607      	mov	r7, r0
 8005b6e:	4688      	mov	r8, r1
 8005b70:	4614      	mov	r4, r2
 8005b72:	2600      	movs	r6, #0
 8005b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b78:	f1b9 0901 	subs.w	r9, r9, #1
 8005b7c:	d505      	bpl.n	8005b8a <_fwalk_sglue+0x22>
 8005b7e:	6824      	ldr	r4, [r4, #0]
 8005b80:	2c00      	cmp	r4, #0
 8005b82:	d1f7      	bne.n	8005b74 <_fwalk_sglue+0xc>
 8005b84:	4630      	mov	r0, r6
 8005b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8a:	89ab      	ldrh	r3, [r5, #12]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d907      	bls.n	8005ba0 <_fwalk_sglue+0x38>
 8005b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b94:	3301      	adds	r3, #1
 8005b96:	d003      	beq.n	8005ba0 <_fwalk_sglue+0x38>
 8005b98:	4629      	mov	r1, r5
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	47c0      	blx	r8
 8005b9e:	4306      	orrs	r6, r0
 8005ba0:	3568      	adds	r5, #104	@ 0x68
 8005ba2:	e7e9      	b.n	8005b78 <_fwalk_sglue+0x10>

08005ba4 <iprintf>:
 8005ba4:	b40f      	push	{r0, r1, r2, r3}
 8005ba6:	b507      	push	{r0, r1, r2, lr}
 8005ba8:	4906      	ldr	r1, [pc, #24]	@ (8005bc4 <iprintf+0x20>)
 8005baa:	ab04      	add	r3, sp, #16
 8005bac:	6808      	ldr	r0, [r1, #0]
 8005bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bb2:	6881      	ldr	r1, [r0, #8]
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	f000 fadb 	bl	8006170 <_vfiprintf_r>
 8005bba:	b003      	add	sp, #12
 8005bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bc0:	b004      	add	sp, #16
 8005bc2:	4770      	bx	lr
 8005bc4:	2000001c 	.word	0x2000001c

08005bc8 <_puts_r>:
 8005bc8:	6a03      	ldr	r3, [r0, #32]
 8005bca:	b570      	push	{r4, r5, r6, lr}
 8005bcc:	6884      	ldr	r4, [r0, #8]
 8005bce:	4605      	mov	r5, r0
 8005bd0:	460e      	mov	r6, r1
 8005bd2:	b90b      	cbnz	r3, 8005bd8 <_puts_r+0x10>
 8005bd4:	f7ff ffb0 	bl	8005b38 <__sinit>
 8005bd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bda:	07db      	lsls	r3, r3, #31
 8005bdc:	d405      	bmi.n	8005bea <_puts_r+0x22>
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	0598      	lsls	r0, r3, #22
 8005be2:	d402      	bmi.n	8005bea <_puts_r+0x22>
 8005be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005be6:	f000 f99e 	bl	8005f26 <__retarget_lock_acquire_recursive>
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	0719      	lsls	r1, r3, #28
 8005bee:	d502      	bpl.n	8005bf6 <_puts_r+0x2e>
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d135      	bne.n	8005c62 <_puts_r+0x9a>
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	f000 f8c5 	bl	8005d88 <__swsetup_r>
 8005bfe:	b380      	cbz	r0, 8005c62 <_puts_r+0x9a>
 8005c00:	f04f 35ff 	mov.w	r5, #4294967295
 8005c04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c06:	07da      	lsls	r2, r3, #31
 8005c08:	d405      	bmi.n	8005c16 <_puts_r+0x4e>
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	059b      	lsls	r3, r3, #22
 8005c0e:	d402      	bmi.n	8005c16 <_puts_r+0x4e>
 8005c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c12:	f000 f989 	bl	8005f28 <__retarget_lock_release_recursive>
 8005c16:	4628      	mov	r0, r5
 8005c18:	bd70      	pop	{r4, r5, r6, pc}
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	da04      	bge.n	8005c28 <_puts_r+0x60>
 8005c1e:	69a2      	ldr	r2, [r4, #24]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	dc17      	bgt.n	8005c54 <_puts_r+0x8c>
 8005c24:	290a      	cmp	r1, #10
 8005c26:	d015      	beq.n	8005c54 <_puts_r+0x8c>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	6022      	str	r2, [r4, #0]
 8005c2e:	7019      	strb	r1, [r3, #0]
 8005c30:	68a3      	ldr	r3, [r4, #8]
 8005c32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c36:	3b01      	subs	r3, #1
 8005c38:	60a3      	str	r3, [r4, #8]
 8005c3a:	2900      	cmp	r1, #0
 8005c3c:	d1ed      	bne.n	8005c1a <_puts_r+0x52>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da11      	bge.n	8005c66 <_puts_r+0x9e>
 8005c42:	4622      	mov	r2, r4
 8005c44:	210a      	movs	r1, #10
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 f85f 	bl	8005d0a <__swbuf_r>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d0d7      	beq.n	8005c00 <_puts_r+0x38>
 8005c50:	250a      	movs	r5, #10
 8005c52:	e7d7      	b.n	8005c04 <_puts_r+0x3c>
 8005c54:	4622      	mov	r2, r4
 8005c56:	4628      	mov	r0, r5
 8005c58:	f000 f857 	bl	8005d0a <__swbuf_r>
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d1e7      	bne.n	8005c30 <_puts_r+0x68>
 8005c60:	e7ce      	b.n	8005c00 <_puts_r+0x38>
 8005c62:	3e01      	subs	r6, #1
 8005c64:	e7e4      	b.n	8005c30 <_puts_r+0x68>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	6022      	str	r2, [r4, #0]
 8005c6c:	220a      	movs	r2, #10
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	e7ee      	b.n	8005c50 <_puts_r+0x88>
	...

08005c74 <puts>:
 8005c74:	4b02      	ldr	r3, [pc, #8]	@ (8005c80 <puts+0xc>)
 8005c76:	4601      	mov	r1, r0
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	f7ff bfa5 	b.w	8005bc8 <_puts_r>
 8005c7e:	bf00      	nop
 8005c80:	2000001c 	.word	0x2000001c

08005c84 <__sread>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	460c      	mov	r4, r1
 8005c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c8c:	f000 f8fc 	bl	8005e88 <_read_r>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	bfab      	itete	ge
 8005c94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c96:	89a3      	ldrhlt	r3, [r4, #12]
 8005c98:	181b      	addge	r3, r3, r0
 8005c9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c9e:	bfac      	ite	ge
 8005ca0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ca2:	81a3      	strhlt	r3, [r4, #12]
 8005ca4:	bd10      	pop	{r4, pc}

08005ca6 <__swrite>:
 8005ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005caa:	461f      	mov	r7, r3
 8005cac:	898b      	ldrh	r3, [r1, #12]
 8005cae:	05db      	lsls	r3, r3, #23
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	d505      	bpl.n	8005cc4 <__swrite+0x1e>
 8005cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f000 f8d0 	bl	8005e64 <_lseek_r>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cce:	81a3      	strh	r3, [r4, #12]
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cda:	f000 b8e7 	b.w	8005eac <_write_r>

08005cde <__sseek>:
 8005cde:	b510      	push	{r4, lr}
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce6:	f000 f8bd 	bl	8005e64 <_lseek_r>
 8005cea:	1c43      	adds	r3, r0, #1
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	bf15      	itete	ne
 8005cf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cfa:	81a3      	strheq	r3, [r4, #12]
 8005cfc:	bf18      	it	ne
 8005cfe:	81a3      	strhne	r3, [r4, #12]
 8005d00:	bd10      	pop	{r4, pc}

08005d02 <__sclose>:
 8005d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d06:	f000 b89d 	b.w	8005e44 <_close_r>

08005d0a <__swbuf_r>:
 8005d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0c:	460e      	mov	r6, r1
 8005d0e:	4614      	mov	r4, r2
 8005d10:	4605      	mov	r5, r0
 8005d12:	b118      	cbz	r0, 8005d1c <__swbuf_r+0x12>
 8005d14:	6a03      	ldr	r3, [r0, #32]
 8005d16:	b90b      	cbnz	r3, 8005d1c <__swbuf_r+0x12>
 8005d18:	f7ff ff0e 	bl	8005b38 <__sinit>
 8005d1c:	69a3      	ldr	r3, [r4, #24]
 8005d1e:	60a3      	str	r3, [r4, #8]
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	071a      	lsls	r2, r3, #28
 8005d24:	d501      	bpl.n	8005d2a <__swbuf_r+0x20>
 8005d26:	6923      	ldr	r3, [r4, #16]
 8005d28:	b943      	cbnz	r3, 8005d3c <__swbuf_r+0x32>
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f000 f82b 	bl	8005d88 <__swsetup_r>
 8005d32:	b118      	cbz	r0, 8005d3c <__swbuf_r+0x32>
 8005d34:	f04f 37ff 	mov.w	r7, #4294967295
 8005d38:	4638      	mov	r0, r7
 8005d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	6922      	ldr	r2, [r4, #16]
 8005d40:	1a98      	subs	r0, r3, r2
 8005d42:	6963      	ldr	r3, [r4, #20]
 8005d44:	b2f6      	uxtb	r6, r6
 8005d46:	4283      	cmp	r3, r0
 8005d48:	4637      	mov	r7, r6
 8005d4a:	dc05      	bgt.n	8005d58 <__swbuf_r+0x4e>
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 fd38 	bl	80067c4 <_fflush_r>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d1ed      	bne.n	8005d34 <__swbuf_r+0x2a>
 8005d58:	68a3      	ldr	r3, [r4, #8]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	60a3      	str	r3, [r4, #8]
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	6022      	str	r2, [r4, #0]
 8005d64:	701e      	strb	r6, [r3, #0]
 8005d66:	6962      	ldr	r2, [r4, #20]
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d004      	beq.n	8005d78 <__swbuf_r+0x6e>
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	07db      	lsls	r3, r3, #31
 8005d72:	d5e1      	bpl.n	8005d38 <__swbuf_r+0x2e>
 8005d74:	2e0a      	cmp	r6, #10
 8005d76:	d1df      	bne.n	8005d38 <__swbuf_r+0x2e>
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f000 fd22 	bl	80067c4 <_fflush_r>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d0d9      	beq.n	8005d38 <__swbuf_r+0x2e>
 8005d84:	e7d6      	b.n	8005d34 <__swbuf_r+0x2a>
	...

08005d88 <__swsetup_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4b29      	ldr	r3, [pc, #164]	@ (8005e30 <__swsetup_r+0xa8>)
 8005d8c:	4605      	mov	r5, r0
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	460c      	mov	r4, r1
 8005d92:	b118      	cbz	r0, 8005d9c <__swsetup_r+0x14>
 8005d94:	6a03      	ldr	r3, [r0, #32]
 8005d96:	b90b      	cbnz	r3, 8005d9c <__swsetup_r+0x14>
 8005d98:	f7ff fece 	bl	8005b38 <__sinit>
 8005d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da0:	0719      	lsls	r1, r3, #28
 8005da2:	d422      	bmi.n	8005dea <__swsetup_r+0x62>
 8005da4:	06da      	lsls	r2, r3, #27
 8005da6:	d407      	bmi.n	8005db8 <__swsetup_r+0x30>
 8005da8:	2209      	movs	r2, #9
 8005daa:	602a      	str	r2, [r5, #0]
 8005dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005db0:	81a3      	strh	r3, [r4, #12]
 8005db2:	f04f 30ff 	mov.w	r0, #4294967295
 8005db6:	e033      	b.n	8005e20 <__swsetup_r+0x98>
 8005db8:	0758      	lsls	r0, r3, #29
 8005dba:	d512      	bpl.n	8005de2 <__swsetup_r+0x5a>
 8005dbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005dbe:	b141      	cbz	r1, 8005dd2 <__swsetup_r+0x4a>
 8005dc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005dc4:	4299      	cmp	r1, r3
 8005dc6:	d002      	beq.n	8005dce <__swsetup_r+0x46>
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f000 f8af 	bl	8005f2c <_free_r>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005dd8:	81a3      	strh	r3, [r4, #12]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6063      	str	r3, [r4, #4]
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	f043 0308 	orr.w	r3, r3, #8
 8005de8:	81a3      	strh	r3, [r4, #12]
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	b94b      	cbnz	r3, 8005e02 <__swsetup_r+0x7a>
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005df8:	d003      	beq.n	8005e02 <__swsetup_r+0x7a>
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f000 fd2f 	bl	8006860 <__smakebuf_r>
 8005e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e06:	f013 0201 	ands.w	r2, r3, #1
 8005e0a:	d00a      	beq.n	8005e22 <__swsetup_r+0x9a>
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	60a2      	str	r2, [r4, #8]
 8005e10:	6962      	ldr	r2, [r4, #20]
 8005e12:	4252      	negs	r2, r2
 8005e14:	61a2      	str	r2, [r4, #24]
 8005e16:	6922      	ldr	r2, [r4, #16]
 8005e18:	b942      	cbnz	r2, 8005e2c <__swsetup_r+0xa4>
 8005e1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e1e:	d1c5      	bne.n	8005dac <__swsetup_r+0x24>
 8005e20:	bd38      	pop	{r3, r4, r5, pc}
 8005e22:	0799      	lsls	r1, r3, #30
 8005e24:	bf58      	it	pl
 8005e26:	6962      	ldrpl	r2, [r4, #20]
 8005e28:	60a2      	str	r2, [r4, #8]
 8005e2a:	e7f4      	b.n	8005e16 <__swsetup_r+0x8e>
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	e7f7      	b.n	8005e20 <__swsetup_r+0x98>
 8005e30:	2000001c 	.word	0x2000001c

08005e34 <memset>:
 8005e34:	4402      	add	r2, r0
 8005e36:	4603      	mov	r3, r0
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <memset+0xa>
 8005e3c:	4770      	bx	lr
 8005e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e42:	e7f9      	b.n	8005e38 <memset+0x4>

08005e44 <_close_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d06      	ldr	r5, [pc, #24]	@ (8005e60 <_close_r+0x1c>)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	602b      	str	r3, [r5, #0]
 8005e50:	f7fa feef 	bl	8000c32 <_close>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_close_r+0x1a>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_close_r+0x1a>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	200004e4 	.word	0x200004e4

08005e64 <_lseek_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4d07      	ldr	r5, [pc, #28]	@ (8005e84 <_lseek_r+0x20>)
 8005e68:	4604      	mov	r4, r0
 8005e6a:	4608      	mov	r0, r1
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	2200      	movs	r2, #0
 8005e70:	602a      	str	r2, [r5, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f7fa ff04 	bl	8000c80 <_lseek>
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	d102      	bne.n	8005e82 <_lseek_r+0x1e>
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	b103      	cbz	r3, 8005e82 <_lseek_r+0x1e>
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	bd38      	pop	{r3, r4, r5, pc}
 8005e84:	200004e4 	.word	0x200004e4

08005e88 <_read_r>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	4d07      	ldr	r5, [pc, #28]	@ (8005ea8 <_read_r+0x20>)
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	4608      	mov	r0, r1
 8005e90:	4611      	mov	r1, r2
 8005e92:	2200      	movs	r2, #0
 8005e94:	602a      	str	r2, [r5, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	f7fa fe92 	bl	8000bc0 <_read>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d102      	bne.n	8005ea6 <_read_r+0x1e>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	b103      	cbz	r3, 8005ea6 <_read_r+0x1e>
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	bd38      	pop	{r3, r4, r5, pc}
 8005ea8:	200004e4 	.word	0x200004e4

08005eac <_write_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4d07      	ldr	r5, [pc, #28]	@ (8005ecc <_write_r+0x20>)
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	4608      	mov	r0, r1
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	602a      	str	r2, [r5, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f7fa fe9d 	bl	8000bfa <_write>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_write_r+0x1e>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_write_r+0x1e>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	200004e4 	.word	0x200004e4

08005ed0 <__errno>:
 8005ed0:	4b01      	ldr	r3, [pc, #4]	@ (8005ed8 <__errno+0x8>)
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	2000001c 	.word	0x2000001c

08005edc <__libc_init_array>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	4d0d      	ldr	r5, [pc, #52]	@ (8005f14 <__libc_init_array+0x38>)
 8005ee0:	4c0d      	ldr	r4, [pc, #52]	@ (8005f18 <__libc_init_array+0x3c>)
 8005ee2:	1b64      	subs	r4, r4, r5
 8005ee4:	10a4      	asrs	r4, r4, #2
 8005ee6:	2600      	movs	r6, #0
 8005ee8:	42a6      	cmp	r6, r4
 8005eea:	d109      	bne.n	8005f00 <__libc_init_array+0x24>
 8005eec:	4d0b      	ldr	r5, [pc, #44]	@ (8005f1c <__libc_init_array+0x40>)
 8005eee:	4c0c      	ldr	r4, [pc, #48]	@ (8005f20 <__libc_init_array+0x44>)
 8005ef0:	f000 fd24 	bl	800693c <_init>
 8005ef4:	1b64      	subs	r4, r4, r5
 8005ef6:	10a4      	asrs	r4, r4, #2
 8005ef8:	2600      	movs	r6, #0
 8005efa:	42a6      	cmp	r6, r4
 8005efc:	d105      	bne.n	8005f0a <__libc_init_array+0x2e>
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f04:	4798      	blx	r3
 8005f06:	3601      	adds	r6, #1
 8005f08:	e7ee      	b.n	8005ee8 <__libc_init_array+0xc>
 8005f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f0e:	4798      	blx	r3
 8005f10:	3601      	adds	r6, #1
 8005f12:	e7f2      	b.n	8005efa <__libc_init_array+0x1e>
 8005f14:	08006a40 	.word	0x08006a40
 8005f18:	08006a40 	.word	0x08006a40
 8005f1c:	08006a40 	.word	0x08006a40
 8005f20:	08006a44 	.word	0x08006a44

08005f24 <__retarget_lock_init_recursive>:
 8005f24:	4770      	bx	lr

08005f26 <__retarget_lock_acquire_recursive>:
 8005f26:	4770      	bx	lr

08005f28 <__retarget_lock_release_recursive>:
 8005f28:	4770      	bx	lr
	...

08005f2c <_free_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4605      	mov	r5, r0
 8005f30:	2900      	cmp	r1, #0
 8005f32:	d041      	beq.n	8005fb8 <_free_r+0x8c>
 8005f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f38:	1f0c      	subs	r4, r1, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bfb8      	it	lt
 8005f3e:	18e4      	addlt	r4, r4, r3
 8005f40:	f000 f8e0 	bl	8006104 <__malloc_lock>
 8005f44:	4a1d      	ldr	r2, [pc, #116]	@ (8005fbc <_free_r+0x90>)
 8005f46:	6813      	ldr	r3, [r2, #0]
 8005f48:	b933      	cbnz	r3, 8005f58 <_free_r+0x2c>
 8005f4a:	6063      	str	r3, [r4, #4]
 8005f4c:	6014      	str	r4, [r2, #0]
 8005f4e:	4628      	mov	r0, r5
 8005f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f54:	f000 b8dc 	b.w	8006110 <__malloc_unlock>
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	d908      	bls.n	8005f6e <_free_r+0x42>
 8005f5c:	6820      	ldr	r0, [r4, #0]
 8005f5e:	1821      	adds	r1, r4, r0
 8005f60:	428b      	cmp	r3, r1
 8005f62:	bf01      	itttt	eq
 8005f64:	6819      	ldreq	r1, [r3, #0]
 8005f66:	685b      	ldreq	r3, [r3, #4]
 8005f68:	1809      	addeq	r1, r1, r0
 8005f6a:	6021      	streq	r1, [r4, #0]
 8005f6c:	e7ed      	b.n	8005f4a <_free_r+0x1e>
 8005f6e:	461a      	mov	r2, r3
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	b10b      	cbz	r3, 8005f78 <_free_r+0x4c>
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	d9fa      	bls.n	8005f6e <_free_r+0x42>
 8005f78:	6811      	ldr	r1, [r2, #0]
 8005f7a:	1850      	adds	r0, r2, r1
 8005f7c:	42a0      	cmp	r0, r4
 8005f7e:	d10b      	bne.n	8005f98 <_free_r+0x6c>
 8005f80:	6820      	ldr	r0, [r4, #0]
 8005f82:	4401      	add	r1, r0
 8005f84:	1850      	adds	r0, r2, r1
 8005f86:	4283      	cmp	r3, r0
 8005f88:	6011      	str	r1, [r2, #0]
 8005f8a:	d1e0      	bne.n	8005f4e <_free_r+0x22>
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	6053      	str	r3, [r2, #4]
 8005f92:	4408      	add	r0, r1
 8005f94:	6010      	str	r0, [r2, #0]
 8005f96:	e7da      	b.n	8005f4e <_free_r+0x22>
 8005f98:	d902      	bls.n	8005fa0 <_free_r+0x74>
 8005f9a:	230c      	movs	r3, #12
 8005f9c:	602b      	str	r3, [r5, #0]
 8005f9e:	e7d6      	b.n	8005f4e <_free_r+0x22>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	1821      	adds	r1, r4, r0
 8005fa4:	428b      	cmp	r3, r1
 8005fa6:	bf04      	itt	eq
 8005fa8:	6819      	ldreq	r1, [r3, #0]
 8005faa:	685b      	ldreq	r3, [r3, #4]
 8005fac:	6063      	str	r3, [r4, #4]
 8005fae:	bf04      	itt	eq
 8005fb0:	1809      	addeq	r1, r1, r0
 8005fb2:	6021      	streq	r1, [r4, #0]
 8005fb4:	6054      	str	r4, [r2, #4]
 8005fb6:	e7ca      	b.n	8005f4e <_free_r+0x22>
 8005fb8:	bd38      	pop	{r3, r4, r5, pc}
 8005fba:	bf00      	nop
 8005fbc:	200004f0 	.word	0x200004f0

08005fc0 <sbrk_aligned>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	4e0f      	ldr	r6, [pc, #60]	@ (8006000 <sbrk_aligned+0x40>)
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	6831      	ldr	r1, [r6, #0]
 8005fc8:	4605      	mov	r5, r0
 8005fca:	b911      	cbnz	r1, 8005fd2 <sbrk_aligned+0x12>
 8005fcc:	f000 fca6 	bl	800691c <_sbrk_r>
 8005fd0:	6030      	str	r0, [r6, #0]
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	f000 fca1 	bl	800691c <_sbrk_r>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d103      	bne.n	8005fe6 <sbrk_aligned+0x26>
 8005fde:	f04f 34ff 	mov.w	r4, #4294967295
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	bd70      	pop	{r4, r5, r6, pc}
 8005fe6:	1cc4      	adds	r4, r0, #3
 8005fe8:	f024 0403 	bic.w	r4, r4, #3
 8005fec:	42a0      	cmp	r0, r4
 8005fee:	d0f8      	beq.n	8005fe2 <sbrk_aligned+0x22>
 8005ff0:	1a21      	subs	r1, r4, r0
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f000 fc92 	bl	800691c <_sbrk_r>
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d1f2      	bne.n	8005fe2 <sbrk_aligned+0x22>
 8005ffc:	e7ef      	b.n	8005fde <sbrk_aligned+0x1e>
 8005ffe:	bf00      	nop
 8006000:	200004ec 	.word	0x200004ec

08006004 <_malloc_r>:
 8006004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006008:	1ccd      	adds	r5, r1, #3
 800600a:	f025 0503 	bic.w	r5, r5, #3
 800600e:	3508      	adds	r5, #8
 8006010:	2d0c      	cmp	r5, #12
 8006012:	bf38      	it	cc
 8006014:	250c      	movcc	r5, #12
 8006016:	2d00      	cmp	r5, #0
 8006018:	4606      	mov	r6, r0
 800601a:	db01      	blt.n	8006020 <_malloc_r+0x1c>
 800601c:	42a9      	cmp	r1, r5
 800601e:	d904      	bls.n	800602a <_malloc_r+0x26>
 8006020:	230c      	movs	r3, #12
 8006022:	6033      	str	r3, [r6, #0]
 8006024:	2000      	movs	r0, #0
 8006026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800602a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006100 <_malloc_r+0xfc>
 800602e:	f000 f869 	bl	8006104 <__malloc_lock>
 8006032:	f8d8 3000 	ldr.w	r3, [r8]
 8006036:	461c      	mov	r4, r3
 8006038:	bb44      	cbnz	r4, 800608c <_malloc_r+0x88>
 800603a:	4629      	mov	r1, r5
 800603c:	4630      	mov	r0, r6
 800603e:	f7ff ffbf 	bl	8005fc0 <sbrk_aligned>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	4604      	mov	r4, r0
 8006046:	d158      	bne.n	80060fa <_malloc_r+0xf6>
 8006048:	f8d8 4000 	ldr.w	r4, [r8]
 800604c:	4627      	mov	r7, r4
 800604e:	2f00      	cmp	r7, #0
 8006050:	d143      	bne.n	80060da <_malloc_r+0xd6>
 8006052:	2c00      	cmp	r4, #0
 8006054:	d04b      	beq.n	80060ee <_malloc_r+0xea>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	4639      	mov	r1, r7
 800605a:	4630      	mov	r0, r6
 800605c:	eb04 0903 	add.w	r9, r4, r3
 8006060:	f000 fc5c 	bl	800691c <_sbrk_r>
 8006064:	4581      	cmp	r9, r0
 8006066:	d142      	bne.n	80060ee <_malloc_r+0xea>
 8006068:	6821      	ldr	r1, [r4, #0]
 800606a:	1a6d      	subs	r5, r5, r1
 800606c:	4629      	mov	r1, r5
 800606e:	4630      	mov	r0, r6
 8006070:	f7ff ffa6 	bl	8005fc0 <sbrk_aligned>
 8006074:	3001      	adds	r0, #1
 8006076:	d03a      	beq.n	80060ee <_malloc_r+0xea>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	442b      	add	r3, r5
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	f8d8 3000 	ldr.w	r3, [r8]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	bb62      	cbnz	r2, 80060e0 <_malloc_r+0xdc>
 8006086:	f8c8 7000 	str.w	r7, [r8]
 800608a:	e00f      	b.n	80060ac <_malloc_r+0xa8>
 800608c:	6822      	ldr	r2, [r4, #0]
 800608e:	1b52      	subs	r2, r2, r5
 8006090:	d420      	bmi.n	80060d4 <_malloc_r+0xd0>
 8006092:	2a0b      	cmp	r2, #11
 8006094:	d917      	bls.n	80060c6 <_malloc_r+0xc2>
 8006096:	1961      	adds	r1, r4, r5
 8006098:	42a3      	cmp	r3, r4
 800609a:	6025      	str	r5, [r4, #0]
 800609c:	bf18      	it	ne
 800609e:	6059      	strne	r1, [r3, #4]
 80060a0:	6863      	ldr	r3, [r4, #4]
 80060a2:	bf08      	it	eq
 80060a4:	f8c8 1000 	streq.w	r1, [r8]
 80060a8:	5162      	str	r2, [r4, r5]
 80060aa:	604b      	str	r3, [r1, #4]
 80060ac:	4630      	mov	r0, r6
 80060ae:	f000 f82f 	bl	8006110 <__malloc_unlock>
 80060b2:	f104 000b 	add.w	r0, r4, #11
 80060b6:	1d23      	adds	r3, r4, #4
 80060b8:	f020 0007 	bic.w	r0, r0, #7
 80060bc:	1ac2      	subs	r2, r0, r3
 80060be:	bf1c      	itt	ne
 80060c0:	1a1b      	subne	r3, r3, r0
 80060c2:	50a3      	strne	r3, [r4, r2]
 80060c4:	e7af      	b.n	8006026 <_malloc_r+0x22>
 80060c6:	6862      	ldr	r2, [r4, #4]
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	bf0c      	ite	eq
 80060cc:	f8c8 2000 	streq.w	r2, [r8]
 80060d0:	605a      	strne	r2, [r3, #4]
 80060d2:	e7eb      	b.n	80060ac <_malloc_r+0xa8>
 80060d4:	4623      	mov	r3, r4
 80060d6:	6864      	ldr	r4, [r4, #4]
 80060d8:	e7ae      	b.n	8006038 <_malloc_r+0x34>
 80060da:	463c      	mov	r4, r7
 80060dc:	687f      	ldr	r7, [r7, #4]
 80060de:	e7b6      	b.n	800604e <_malloc_r+0x4a>
 80060e0:	461a      	mov	r2, r3
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	d1fb      	bne.n	80060e0 <_malloc_r+0xdc>
 80060e8:	2300      	movs	r3, #0
 80060ea:	6053      	str	r3, [r2, #4]
 80060ec:	e7de      	b.n	80060ac <_malloc_r+0xa8>
 80060ee:	230c      	movs	r3, #12
 80060f0:	6033      	str	r3, [r6, #0]
 80060f2:	4630      	mov	r0, r6
 80060f4:	f000 f80c 	bl	8006110 <__malloc_unlock>
 80060f8:	e794      	b.n	8006024 <_malloc_r+0x20>
 80060fa:	6005      	str	r5, [r0, #0]
 80060fc:	e7d6      	b.n	80060ac <_malloc_r+0xa8>
 80060fe:	bf00      	nop
 8006100:	200004f0 	.word	0x200004f0

08006104 <__malloc_lock>:
 8006104:	4801      	ldr	r0, [pc, #4]	@ (800610c <__malloc_lock+0x8>)
 8006106:	f7ff bf0e 	b.w	8005f26 <__retarget_lock_acquire_recursive>
 800610a:	bf00      	nop
 800610c:	200004e8 	.word	0x200004e8

08006110 <__malloc_unlock>:
 8006110:	4801      	ldr	r0, [pc, #4]	@ (8006118 <__malloc_unlock+0x8>)
 8006112:	f7ff bf09 	b.w	8005f28 <__retarget_lock_release_recursive>
 8006116:	bf00      	nop
 8006118:	200004e8 	.word	0x200004e8

0800611c <__sfputc_r>:
 800611c:	6893      	ldr	r3, [r2, #8]
 800611e:	3b01      	subs	r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	b410      	push	{r4}
 8006124:	6093      	str	r3, [r2, #8]
 8006126:	da08      	bge.n	800613a <__sfputc_r+0x1e>
 8006128:	6994      	ldr	r4, [r2, #24]
 800612a:	42a3      	cmp	r3, r4
 800612c:	db01      	blt.n	8006132 <__sfputc_r+0x16>
 800612e:	290a      	cmp	r1, #10
 8006130:	d103      	bne.n	800613a <__sfputc_r+0x1e>
 8006132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006136:	f7ff bde8 	b.w	8005d0a <__swbuf_r>
 800613a:	6813      	ldr	r3, [r2, #0]
 800613c:	1c58      	adds	r0, r3, #1
 800613e:	6010      	str	r0, [r2, #0]
 8006140:	7019      	strb	r1, [r3, #0]
 8006142:	4608      	mov	r0, r1
 8006144:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006148:	4770      	bx	lr

0800614a <__sfputs_r>:
 800614a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614c:	4606      	mov	r6, r0
 800614e:	460f      	mov	r7, r1
 8006150:	4614      	mov	r4, r2
 8006152:	18d5      	adds	r5, r2, r3
 8006154:	42ac      	cmp	r4, r5
 8006156:	d101      	bne.n	800615c <__sfputs_r+0x12>
 8006158:	2000      	movs	r0, #0
 800615a:	e007      	b.n	800616c <__sfputs_r+0x22>
 800615c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006160:	463a      	mov	r2, r7
 8006162:	4630      	mov	r0, r6
 8006164:	f7ff ffda 	bl	800611c <__sfputc_r>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d1f3      	bne.n	8006154 <__sfputs_r+0xa>
 800616c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006170 <_vfiprintf_r>:
 8006170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	460d      	mov	r5, r1
 8006176:	b09d      	sub	sp, #116	@ 0x74
 8006178:	4614      	mov	r4, r2
 800617a:	4698      	mov	r8, r3
 800617c:	4606      	mov	r6, r0
 800617e:	b118      	cbz	r0, 8006188 <_vfiprintf_r+0x18>
 8006180:	6a03      	ldr	r3, [r0, #32]
 8006182:	b90b      	cbnz	r3, 8006188 <_vfiprintf_r+0x18>
 8006184:	f7ff fcd8 	bl	8005b38 <__sinit>
 8006188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800618a:	07d9      	lsls	r1, r3, #31
 800618c:	d405      	bmi.n	800619a <_vfiprintf_r+0x2a>
 800618e:	89ab      	ldrh	r3, [r5, #12]
 8006190:	059a      	lsls	r2, r3, #22
 8006192:	d402      	bmi.n	800619a <_vfiprintf_r+0x2a>
 8006194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006196:	f7ff fec6 	bl	8005f26 <__retarget_lock_acquire_recursive>
 800619a:	89ab      	ldrh	r3, [r5, #12]
 800619c:	071b      	lsls	r3, r3, #28
 800619e:	d501      	bpl.n	80061a4 <_vfiprintf_r+0x34>
 80061a0:	692b      	ldr	r3, [r5, #16]
 80061a2:	b99b      	cbnz	r3, 80061cc <_vfiprintf_r+0x5c>
 80061a4:	4629      	mov	r1, r5
 80061a6:	4630      	mov	r0, r6
 80061a8:	f7ff fdee 	bl	8005d88 <__swsetup_r>
 80061ac:	b170      	cbz	r0, 80061cc <_vfiprintf_r+0x5c>
 80061ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061b0:	07dc      	lsls	r4, r3, #31
 80061b2:	d504      	bpl.n	80061be <_vfiprintf_r+0x4e>
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	b01d      	add	sp, #116	@ 0x74
 80061ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061be:	89ab      	ldrh	r3, [r5, #12]
 80061c0:	0598      	lsls	r0, r3, #22
 80061c2:	d4f7      	bmi.n	80061b4 <_vfiprintf_r+0x44>
 80061c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061c6:	f7ff feaf 	bl	8005f28 <__retarget_lock_release_recursive>
 80061ca:	e7f3      	b.n	80061b4 <_vfiprintf_r+0x44>
 80061cc:	2300      	movs	r3, #0
 80061ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80061d0:	2320      	movs	r3, #32
 80061d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80061da:	2330      	movs	r3, #48	@ 0x30
 80061dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800638c <_vfiprintf_r+0x21c>
 80061e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061e4:	f04f 0901 	mov.w	r9, #1
 80061e8:	4623      	mov	r3, r4
 80061ea:	469a      	mov	sl, r3
 80061ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061f0:	b10a      	cbz	r2, 80061f6 <_vfiprintf_r+0x86>
 80061f2:	2a25      	cmp	r2, #37	@ 0x25
 80061f4:	d1f9      	bne.n	80061ea <_vfiprintf_r+0x7a>
 80061f6:	ebba 0b04 	subs.w	fp, sl, r4
 80061fa:	d00b      	beq.n	8006214 <_vfiprintf_r+0xa4>
 80061fc:	465b      	mov	r3, fp
 80061fe:	4622      	mov	r2, r4
 8006200:	4629      	mov	r1, r5
 8006202:	4630      	mov	r0, r6
 8006204:	f7ff ffa1 	bl	800614a <__sfputs_r>
 8006208:	3001      	adds	r0, #1
 800620a:	f000 80a7 	beq.w	800635c <_vfiprintf_r+0x1ec>
 800620e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006210:	445a      	add	r2, fp
 8006212:	9209      	str	r2, [sp, #36]	@ 0x24
 8006214:	f89a 3000 	ldrb.w	r3, [sl]
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 809f 	beq.w	800635c <_vfiprintf_r+0x1ec>
 800621e:	2300      	movs	r3, #0
 8006220:	f04f 32ff 	mov.w	r2, #4294967295
 8006224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006228:	f10a 0a01 	add.w	sl, sl, #1
 800622c:	9304      	str	r3, [sp, #16]
 800622e:	9307      	str	r3, [sp, #28]
 8006230:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006234:	931a      	str	r3, [sp, #104]	@ 0x68
 8006236:	4654      	mov	r4, sl
 8006238:	2205      	movs	r2, #5
 800623a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800623e:	4853      	ldr	r0, [pc, #332]	@ (800638c <_vfiprintf_r+0x21c>)
 8006240:	f7f9 ffc6 	bl	80001d0 <memchr>
 8006244:	9a04      	ldr	r2, [sp, #16]
 8006246:	b9d8      	cbnz	r0, 8006280 <_vfiprintf_r+0x110>
 8006248:	06d1      	lsls	r1, r2, #27
 800624a:	bf44      	itt	mi
 800624c:	2320      	movmi	r3, #32
 800624e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006252:	0713      	lsls	r3, r2, #28
 8006254:	bf44      	itt	mi
 8006256:	232b      	movmi	r3, #43	@ 0x2b
 8006258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800625c:	f89a 3000 	ldrb.w	r3, [sl]
 8006260:	2b2a      	cmp	r3, #42	@ 0x2a
 8006262:	d015      	beq.n	8006290 <_vfiprintf_r+0x120>
 8006264:	9a07      	ldr	r2, [sp, #28]
 8006266:	4654      	mov	r4, sl
 8006268:	2000      	movs	r0, #0
 800626a:	f04f 0c0a 	mov.w	ip, #10
 800626e:	4621      	mov	r1, r4
 8006270:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006274:	3b30      	subs	r3, #48	@ 0x30
 8006276:	2b09      	cmp	r3, #9
 8006278:	d94b      	bls.n	8006312 <_vfiprintf_r+0x1a2>
 800627a:	b1b0      	cbz	r0, 80062aa <_vfiprintf_r+0x13a>
 800627c:	9207      	str	r2, [sp, #28]
 800627e:	e014      	b.n	80062aa <_vfiprintf_r+0x13a>
 8006280:	eba0 0308 	sub.w	r3, r0, r8
 8006284:	fa09 f303 	lsl.w	r3, r9, r3
 8006288:	4313      	orrs	r3, r2
 800628a:	9304      	str	r3, [sp, #16]
 800628c:	46a2      	mov	sl, r4
 800628e:	e7d2      	b.n	8006236 <_vfiprintf_r+0xc6>
 8006290:	9b03      	ldr	r3, [sp, #12]
 8006292:	1d19      	adds	r1, r3, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	9103      	str	r1, [sp, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	bfbb      	ittet	lt
 800629c:	425b      	neglt	r3, r3
 800629e:	f042 0202 	orrlt.w	r2, r2, #2
 80062a2:	9307      	strge	r3, [sp, #28]
 80062a4:	9307      	strlt	r3, [sp, #28]
 80062a6:	bfb8      	it	lt
 80062a8:	9204      	strlt	r2, [sp, #16]
 80062aa:	7823      	ldrb	r3, [r4, #0]
 80062ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80062ae:	d10a      	bne.n	80062c6 <_vfiprintf_r+0x156>
 80062b0:	7863      	ldrb	r3, [r4, #1]
 80062b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80062b4:	d132      	bne.n	800631c <_vfiprintf_r+0x1ac>
 80062b6:	9b03      	ldr	r3, [sp, #12]
 80062b8:	1d1a      	adds	r2, r3, #4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	9203      	str	r2, [sp, #12]
 80062be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062c2:	3402      	adds	r4, #2
 80062c4:	9305      	str	r3, [sp, #20]
 80062c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800639c <_vfiprintf_r+0x22c>
 80062ca:	7821      	ldrb	r1, [r4, #0]
 80062cc:	2203      	movs	r2, #3
 80062ce:	4650      	mov	r0, sl
 80062d0:	f7f9 ff7e 	bl	80001d0 <memchr>
 80062d4:	b138      	cbz	r0, 80062e6 <_vfiprintf_r+0x176>
 80062d6:	9b04      	ldr	r3, [sp, #16]
 80062d8:	eba0 000a 	sub.w	r0, r0, sl
 80062dc:	2240      	movs	r2, #64	@ 0x40
 80062de:	4082      	lsls	r2, r0
 80062e0:	4313      	orrs	r3, r2
 80062e2:	3401      	adds	r4, #1
 80062e4:	9304      	str	r3, [sp, #16]
 80062e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ea:	4829      	ldr	r0, [pc, #164]	@ (8006390 <_vfiprintf_r+0x220>)
 80062ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062f0:	2206      	movs	r2, #6
 80062f2:	f7f9 ff6d 	bl	80001d0 <memchr>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d03f      	beq.n	800637a <_vfiprintf_r+0x20a>
 80062fa:	4b26      	ldr	r3, [pc, #152]	@ (8006394 <_vfiprintf_r+0x224>)
 80062fc:	bb1b      	cbnz	r3, 8006346 <_vfiprintf_r+0x1d6>
 80062fe:	9b03      	ldr	r3, [sp, #12]
 8006300:	3307      	adds	r3, #7
 8006302:	f023 0307 	bic.w	r3, r3, #7
 8006306:	3308      	adds	r3, #8
 8006308:	9303      	str	r3, [sp, #12]
 800630a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800630c:	443b      	add	r3, r7
 800630e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006310:	e76a      	b.n	80061e8 <_vfiprintf_r+0x78>
 8006312:	fb0c 3202 	mla	r2, ip, r2, r3
 8006316:	460c      	mov	r4, r1
 8006318:	2001      	movs	r0, #1
 800631a:	e7a8      	b.n	800626e <_vfiprintf_r+0xfe>
 800631c:	2300      	movs	r3, #0
 800631e:	3401      	adds	r4, #1
 8006320:	9305      	str	r3, [sp, #20]
 8006322:	4619      	mov	r1, r3
 8006324:	f04f 0c0a 	mov.w	ip, #10
 8006328:	4620      	mov	r0, r4
 800632a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800632e:	3a30      	subs	r2, #48	@ 0x30
 8006330:	2a09      	cmp	r2, #9
 8006332:	d903      	bls.n	800633c <_vfiprintf_r+0x1cc>
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0c6      	beq.n	80062c6 <_vfiprintf_r+0x156>
 8006338:	9105      	str	r1, [sp, #20]
 800633a:	e7c4      	b.n	80062c6 <_vfiprintf_r+0x156>
 800633c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006340:	4604      	mov	r4, r0
 8006342:	2301      	movs	r3, #1
 8006344:	e7f0      	b.n	8006328 <_vfiprintf_r+0x1b8>
 8006346:	ab03      	add	r3, sp, #12
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	462a      	mov	r2, r5
 800634c:	4b12      	ldr	r3, [pc, #72]	@ (8006398 <_vfiprintf_r+0x228>)
 800634e:	a904      	add	r1, sp, #16
 8006350:	4630      	mov	r0, r6
 8006352:	f3af 8000 	nop.w
 8006356:	4607      	mov	r7, r0
 8006358:	1c78      	adds	r0, r7, #1
 800635a:	d1d6      	bne.n	800630a <_vfiprintf_r+0x19a>
 800635c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800635e:	07d9      	lsls	r1, r3, #31
 8006360:	d405      	bmi.n	800636e <_vfiprintf_r+0x1fe>
 8006362:	89ab      	ldrh	r3, [r5, #12]
 8006364:	059a      	lsls	r2, r3, #22
 8006366:	d402      	bmi.n	800636e <_vfiprintf_r+0x1fe>
 8006368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800636a:	f7ff fddd 	bl	8005f28 <__retarget_lock_release_recursive>
 800636e:	89ab      	ldrh	r3, [r5, #12]
 8006370:	065b      	lsls	r3, r3, #25
 8006372:	f53f af1f 	bmi.w	80061b4 <_vfiprintf_r+0x44>
 8006376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006378:	e71e      	b.n	80061b8 <_vfiprintf_r+0x48>
 800637a:	ab03      	add	r3, sp, #12
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	462a      	mov	r2, r5
 8006380:	4b05      	ldr	r3, [pc, #20]	@ (8006398 <_vfiprintf_r+0x228>)
 8006382:	a904      	add	r1, sp, #16
 8006384:	4630      	mov	r0, r6
 8006386:	f000 f879 	bl	800647c <_printf_i>
 800638a:	e7e4      	b.n	8006356 <_vfiprintf_r+0x1e6>
 800638c:	08006a04 	.word	0x08006a04
 8006390:	08006a0e 	.word	0x08006a0e
 8006394:	00000000 	.word	0x00000000
 8006398:	0800614b 	.word	0x0800614b
 800639c:	08006a0a 	.word	0x08006a0a

080063a0 <_printf_common>:
 80063a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a4:	4616      	mov	r6, r2
 80063a6:	4698      	mov	r8, r3
 80063a8:	688a      	ldr	r2, [r1, #8]
 80063aa:	690b      	ldr	r3, [r1, #16]
 80063ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063b0:	4293      	cmp	r3, r2
 80063b2:	bfb8      	it	lt
 80063b4:	4613      	movlt	r3, r2
 80063b6:	6033      	str	r3, [r6, #0]
 80063b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063bc:	4607      	mov	r7, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	b10a      	cbz	r2, 80063c6 <_printf_common+0x26>
 80063c2:	3301      	adds	r3, #1
 80063c4:	6033      	str	r3, [r6, #0]
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	0699      	lsls	r1, r3, #26
 80063ca:	bf42      	ittt	mi
 80063cc:	6833      	ldrmi	r3, [r6, #0]
 80063ce:	3302      	addmi	r3, #2
 80063d0:	6033      	strmi	r3, [r6, #0]
 80063d2:	6825      	ldr	r5, [r4, #0]
 80063d4:	f015 0506 	ands.w	r5, r5, #6
 80063d8:	d106      	bne.n	80063e8 <_printf_common+0x48>
 80063da:	f104 0a19 	add.w	sl, r4, #25
 80063de:	68e3      	ldr	r3, [r4, #12]
 80063e0:	6832      	ldr	r2, [r6, #0]
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	42ab      	cmp	r3, r5
 80063e6:	dc26      	bgt.n	8006436 <_printf_common+0x96>
 80063e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	3b00      	subs	r3, #0
 80063f0:	bf18      	it	ne
 80063f2:	2301      	movne	r3, #1
 80063f4:	0692      	lsls	r2, r2, #26
 80063f6:	d42b      	bmi.n	8006450 <_printf_common+0xb0>
 80063f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063fc:	4641      	mov	r1, r8
 80063fe:	4638      	mov	r0, r7
 8006400:	47c8      	blx	r9
 8006402:	3001      	adds	r0, #1
 8006404:	d01e      	beq.n	8006444 <_printf_common+0xa4>
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	6922      	ldr	r2, [r4, #16]
 800640a:	f003 0306 	and.w	r3, r3, #6
 800640e:	2b04      	cmp	r3, #4
 8006410:	bf02      	ittt	eq
 8006412:	68e5      	ldreq	r5, [r4, #12]
 8006414:	6833      	ldreq	r3, [r6, #0]
 8006416:	1aed      	subeq	r5, r5, r3
 8006418:	68a3      	ldr	r3, [r4, #8]
 800641a:	bf0c      	ite	eq
 800641c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006420:	2500      	movne	r5, #0
 8006422:	4293      	cmp	r3, r2
 8006424:	bfc4      	itt	gt
 8006426:	1a9b      	subgt	r3, r3, r2
 8006428:	18ed      	addgt	r5, r5, r3
 800642a:	2600      	movs	r6, #0
 800642c:	341a      	adds	r4, #26
 800642e:	42b5      	cmp	r5, r6
 8006430:	d11a      	bne.n	8006468 <_printf_common+0xc8>
 8006432:	2000      	movs	r0, #0
 8006434:	e008      	b.n	8006448 <_printf_common+0xa8>
 8006436:	2301      	movs	r3, #1
 8006438:	4652      	mov	r2, sl
 800643a:	4641      	mov	r1, r8
 800643c:	4638      	mov	r0, r7
 800643e:	47c8      	blx	r9
 8006440:	3001      	adds	r0, #1
 8006442:	d103      	bne.n	800644c <_printf_common+0xac>
 8006444:	f04f 30ff 	mov.w	r0, #4294967295
 8006448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800644c:	3501      	adds	r5, #1
 800644e:	e7c6      	b.n	80063de <_printf_common+0x3e>
 8006450:	18e1      	adds	r1, r4, r3
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	2030      	movs	r0, #48	@ 0x30
 8006456:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800645a:	4422      	add	r2, r4
 800645c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006460:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006464:	3302      	adds	r3, #2
 8006466:	e7c7      	b.n	80063f8 <_printf_common+0x58>
 8006468:	2301      	movs	r3, #1
 800646a:	4622      	mov	r2, r4
 800646c:	4641      	mov	r1, r8
 800646e:	4638      	mov	r0, r7
 8006470:	47c8      	blx	r9
 8006472:	3001      	adds	r0, #1
 8006474:	d0e6      	beq.n	8006444 <_printf_common+0xa4>
 8006476:	3601      	adds	r6, #1
 8006478:	e7d9      	b.n	800642e <_printf_common+0x8e>
	...

0800647c <_printf_i>:
 800647c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006480:	7e0f      	ldrb	r7, [r1, #24]
 8006482:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006484:	2f78      	cmp	r7, #120	@ 0x78
 8006486:	4691      	mov	r9, r2
 8006488:	4680      	mov	r8, r0
 800648a:	460c      	mov	r4, r1
 800648c:	469a      	mov	sl, r3
 800648e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006492:	d807      	bhi.n	80064a4 <_printf_i+0x28>
 8006494:	2f62      	cmp	r7, #98	@ 0x62
 8006496:	d80a      	bhi.n	80064ae <_printf_i+0x32>
 8006498:	2f00      	cmp	r7, #0
 800649a:	f000 80d2 	beq.w	8006642 <_printf_i+0x1c6>
 800649e:	2f58      	cmp	r7, #88	@ 0x58
 80064a0:	f000 80b9 	beq.w	8006616 <_printf_i+0x19a>
 80064a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064ac:	e03a      	b.n	8006524 <_printf_i+0xa8>
 80064ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064b2:	2b15      	cmp	r3, #21
 80064b4:	d8f6      	bhi.n	80064a4 <_printf_i+0x28>
 80064b6:	a101      	add	r1, pc, #4	@ (adr r1, 80064bc <_printf_i+0x40>)
 80064b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064bc:	08006515 	.word	0x08006515
 80064c0:	08006529 	.word	0x08006529
 80064c4:	080064a5 	.word	0x080064a5
 80064c8:	080064a5 	.word	0x080064a5
 80064cc:	080064a5 	.word	0x080064a5
 80064d0:	080064a5 	.word	0x080064a5
 80064d4:	08006529 	.word	0x08006529
 80064d8:	080064a5 	.word	0x080064a5
 80064dc:	080064a5 	.word	0x080064a5
 80064e0:	080064a5 	.word	0x080064a5
 80064e4:	080064a5 	.word	0x080064a5
 80064e8:	08006629 	.word	0x08006629
 80064ec:	08006553 	.word	0x08006553
 80064f0:	080065e3 	.word	0x080065e3
 80064f4:	080064a5 	.word	0x080064a5
 80064f8:	080064a5 	.word	0x080064a5
 80064fc:	0800664b 	.word	0x0800664b
 8006500:	080064a5 	.word	0x080064a5
 8006504:	08006553 	.word	0x08006553
 8006508:	080064a5 	.word	0x080064a5
 800650c:	080064a5 	.word	0x080064a5
 8006510:	080065eb 	.word	0x080065eb
 8006514:	6833      	ldr	r3, [r6, #0]
 8006516:	1d1a      	adds	r2, r3, #4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6032      	str	r2, [r6, #0]
 800651c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006520:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006524:	2301      	movs	r3, #1
 8006526:	e09d      	b.n	8006664 <_printf_i+0x1e8>
 8006528:	6833      	ldr	r3, [r6, #0]
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	1d19      	adds	r1, r3, #4
 800652e:	6031      	str	r1, [r6, #0]
 8006530:	0606      	lsls	r6, r0, #24
 8006532:	d501      	bpl.n	8006538 <_printf_i+0xbc>
 8006534:	681d      	ldr	r5, [r3, #0]
 8006536:	e003      	b.n	8006540 <_printf_i+0xc4>
 8006538:	0645      	lsls	r5, r0, #25
 800653a:	d5fb      	bpl.n	8006534 <_printf_i+0xb8>
 800653c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006540:	2d00      	cmp	r5, #0
 8006542:	da03      	bge.n	800654c <_printf_i+0xd0>
 8006544:	232d      	movs	r3, #45	@ 0x2d
 8006546:	426d      	negs	r5, r5
 8006548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800654c:	4859      	ldr	r0, [pc, #356]	@ (80066b4 <_printf_i+0x238>)
 800654e:	230a      	movs	r3, #10
 8006550:	e011      	b.n	8006576 <_printf_i+0xfa>
 8006552:	6821      	ldr	r1, [r4, #0]
 8006554:	6833      	ldr	r3, [r6, #0]
 8006556:	0608      	lsls	r0, r1, #24
 8006558:	f853 5b04 	ldr.w	r5, [r3], #4
 800655c:	d402      	bmi.n	8006564 <_printf_i+0xe8>
 800655e:	0649      	lsls	r1, r1, #25
 8006560:	bf48      	it	mi
 8006562:	b2ad      	uxthmi	r5, r5
 8006564:	2f6f      	cmp	r7, #111	@ 0x6f
 8006566:	4853      	ldr	r0, [pc, #332]	@ (80066b4 <_printf_i+0x238>)
 8006568:	6033      	str	r3, [r6, #0]
 800656a:	bf14      	ite	ne
 800656c:	230a      	movne	r3, #10
 800656e:	2308      	moveq	r3, #8
 8006570:	2100      	movs	r1, #0
 8006572:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006576:	6866      	ldr	r6, [r4, #4]
 8006578:	60a6      	str	r6, [r4, #8]
 800657a:	2e00      	cmp	r6, #0
 800657c:	bfa2      	ittt	ge
 800657e:	6821      	ldrge	r1, [r4, #0]
 8006580:	f021 0104 	bicge.w	r1, r1, #4
 8006584:	6021      	strge	r1, [r4, #0]
 8006586:	b90d      	cbnz	r5, 800658c <_printf_i+0x110>
 8006588:	2e00      	cmp	r6, #0
 800658a:	d04b      	beq.n	8006624 <_printf_i+0x1a8>
 800658c:	4616      	mov	r6, r2
 800658e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006592:	fb03 5711 	mls	r7, r3, r1, r5
 8006596:	5dc7      	ldrb	r7, [r0, r7]
 8006598:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800659c:	462f      	mov	r7, r5
 800659e:	42bb      	cmp	r3, r7
 80065a0:	460d      	mov	r5, r1
 80065a2:	d9f4      	bls.n	800658e <_printf_i+0x112>
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d10b      	bne.n	80065c0 <_printf_i+0x144>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	07df      	lsls	r7, r3, #31
 80065ac:	d508      	bpl.n	80065c0 <_printf_i+0x144>
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	6861      	ldr	r1, [r4, #4]
 80065b2:	4299      	cmp	r1, r3
 80065b4:	bfde      	ittt	le
 80065b6:	2330      	movle	r3, #48	@ 0x30
 80065b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065c0:	1b92      	subs	r2, r2, r6
 80065c2:	6122      	str	r2, [r4, #16]
 80065c4:	f8cd a000 	str.w	sl, [sp]
 80065c8:	464b      	mov	r3, r9
 80065ca:	aa03      	add	r2, sp, #12
 80065cc:	4621      	mov	r1, r4
 80065ce:	4640      	mov	r0, r8
 80065d0:	f7ff fee6 	bl	80063a0 <_printf_common>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d14a      	bne.n	800666e <_printf_i+0x1f2>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	b004      	add	sp, #16
 80065de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	f043 0320 	orr.w	r3, r3, #32
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	4833      	ldr	r0, [pc, #204]	@ (80066b8 <_printf_i+0x23c>)
 80065ec:	2778      	movs	r7, #120	@ 0x78
 80065ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	6831      	ldr	r1, [r6, #0]
 80065f6:	061f      	lsls	r7, r3, #24
 80065f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80065fc:	d402      	bmi.n	8006604 <_printf_i+0x188>
 80065fe:	065f      	lsls	r7, r3, #25
 8006600:	bf48      	it	mi
 8006602:	b2ad      	uxthmi	r5, r5
 8006604:	6031      	str	r1, [r6, #0]
 8006606:	07d9      	lsls	r1, r3, #31
 8006608:	bf44      	itt	mi
 800660a:	f043 0320 	orrmi.w	r3, r3, #32
 800660e:	6023      	strmi	r3, [r4, #0]
 8006610:	b11d      	cbz	r5, 800661a <_printf_i+0x19e>
 8006612:	2310      	movs	r3, #16
 8006614:	e7ac      	b.n	8006570 <_printf_i+0xf4>
 8006616:	4827      	ldr	r0, [pc, #156]	@ (80066b4 <_printf_i+0x238>)
 8006618:	e7e9      	b.n	80065ee <_printf_i+0x172>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	f023 0320 	bic.w	r3, r3, #32
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	e7f6      	b.n	8006612 <_printf_i+0x196>
 8006624:	4616      	mov	r6, r2
 8006626:	e7bd      	b.n	80065a4 <_printf_i+0x128>
 8006628:	6833      	ldr	r3, [r6, #0]
 800662a:	6825      	ldr	r5, [r4, #0]
 800662c:	6961      	ldr	r1, [r4, #20]
 800662e:	1d18      	adds	r0, r3, #4
 8006630:	6030      	str	r0, [r6, #0]
 8006632:	062e      	lsls	r6, r5, #24
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	d501      	bpl.n	800663c <_printf_i+0x1c0>
 8006638:	6019      	str	r1, [r3, #0]
 800663a:	e002      	b.n	8006642 <_printf_i+0x1c6>
 800663c:	0668      	lsls	r0, r5, #25
 800663e:	d5fb      	bpl.n	8006638 <_printf_i+0x1bc>
 8006640:	8019      	strh	r1, [r3, #0]
 8006642:	2300      	movs	r3, #0
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	4616      	mov	r6, r2
 8006648:	e7bc      	b.n	80065c4 <_printf_i+0x148>
 800664a:	6833      	ldr	r3, [r6, #0]
 800664c:	1d1a      	adds	r2, r3, #4
 800664e:	6032      	str	r2, [r6, #0]
 8006650:	681e      	ldr	r6, [r3, #0]
 8006652:	6862      	ldr	r2, [r4, #4]
 8006654:	2100      	movs	r1, #0
 8006656:	4630      	mov	r0, r6
 8006658:	f7f9 fdba 	bl	80001d0 <memchr>
 800665c:	b108      	cbz	r0, 8006662 <_printf_i+0x1e6>
 800665e:	1b80      	subs	r0, r0, r6
 8006660:	6060      	str	r0, [r4, #4]
 8006662:	6863      	ldr	r3, [r4, #4]
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	2300      	movs	r3, #0
 8006668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800666c:	e7aa      	b.n	80065c4 <_printf_i+0x148>
 800666e:	6923      	ldr	r3, [r4, #16]
 8006670:	4632      	mov	r2, r6
 8006672:	4649      	mov	r1, r9
 8006674:	4640      	mov	r0, r8
 8006676:	47d0      	blx	sl
 8006678:	3001      	adds	r0, #1
 800667a:	d0ad      	beq.n	80065d8 <_printf_i+0x15c>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	079b      	lsls	r3, r3, #30
 8006680:	d413      	bmi.n	80066aa <_printf_i+0x22e>
 8006682:	68e0      	ldr	r0, [r4, #12]
 8006684:	9b03      	ldr	r3, [sp, #12]
 8006686:	4298      	cmp	r0, r3
 8006688:	bfb8      	it	lt
 800668a:	4618      	movlt	r0, r3
 800668c:	e7a6      	b.n	80065dc <_printf_i+0x160>
 800668e:	2301      	movs	r3, #1
 8006690:	4632      	mov	r2, r6
 8006692:	4649      	mov	r1, r9
 8006694:	4640      	mov	r0, r8
 8006696:	47d0      	blx	sl
 8006698:	3001      	adds	r0, #1
 800669a:	d09d      	beq.n	80065d8 <_printf_i+0x15c>
 800669c:	3501      	adds	r5, #1
 800669e:	68e3      	ldr	r3, [r4, #12]
 80066a0:	9903      	ldr	r1, [sp, #12]
 80066a2:	1a5b      	subs	r3, r3, r1
 80066a4:	42ab      	cmp	r3, r5
 80066a6:	dcf2      	bgt.n	800668e <_printf_i+0x212>
 80066a8:	e7eb      	b.n	8006682 <_printf_i+0x206>
 80066aa:	2500      	movs	r5, #0
 80066ac:	f104 0619 	add.w	r6, r4, #25
 80066b0:	e7f5      	b.n	800669e <_printf_i+0x222>
 80066b2:	bf00      	nop
 80066b4:	08006a15 	.word	0x08006a15
 80066b8:	08006a26 	.word	0x08006a26

080066bc <__sflush_r>:
 80066bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c4:	0716      	lsls	r6, r2, #28
 80066c6:	4605      	mov	r5, r0
 80066c8:	460c      	mov	r4, r1
 80066ca:	d454      	bmi.n	8006776 <__sflush_r+0xba>
 80066cc:	684b      	ldr	r3, [r1, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	dc02      	bgt.n	80066d8 <__sflush_r+0x1c>
 80066d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	dd48      	ble.n	800676a <__sflush_r+0xae>
 80066d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066da:	2e00      	cmp	r6, #0
 80066dc:	d045      	beq.n	800676a <__sflush_r+0xae>
 80066de:	2300      	movs	r3, #0
 80066e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80066e4:	682f      	ldr	r7, [r5, #0]
 80066e6:	6a21      	ldr	r1, [r4, #32]
 80066e8:	602b      	str	r3, [r5, #0]
 80066ea:	d030      	beq.n	800674e <__sflush_r+0x92>
 80066ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	0759      	lsls	r1, r3, #29
 80066f2:	d505      	bpl.n	8006700 <__sflush_r+0x44>
 80066f4:	6863      	ldr	r3, [r4, #4]
 80066f6:	1ad2      	subs	r2, r2, r3
 80066f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066fa:	b10b      	cbz	r3, 8006700 <__sflush_r+0x44>
 80066fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	2300      	movs	r3, #0
 8006702:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006704:	6a21      	ldr	r1, [r4, #32]
 8006706:	4628      	mov	r0, r5
 8006708:	47b0      	blx	r6
 800670a:	1c43      	adds	r3, r0, #1
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	d106      	bne.n	800671e <__sflush_r+0x62>
 8006710:	6829      	ldr	r1, [r5, #0]
 8006712:	291d      	cmp	r1, #29
 8006714:	d82b      	bhi.n	800676e <__sflush_r+0xb2>
 8006716:	4a2a      	ldr	r2, [pc, #168]	@ (80067c0 <__sflush_r+0x104>)
 8006718:	410a      	asrs	r2, r1
 800671a:	07d6      	lsls	r6, r2, #31
 800671c:	d427      	bmi.n	800676e <__sflush_r+0xb2>
 800671e:	2200      	movs	r2, #0
 8006720:	6062      	str	r2, [r4, #4]
 8006722:	04d9      	lsls	r1, r3, #19
 8006724:	6922      	ldr	r2, [r4, #16]
 8006726:	6022      	str	r2, [r4, #0]
 8006728:	d504      	bpl.n	8006734 <__sflush_r+0x78>
 800672a:	1c42      	adds	r2, r0, #1
 800672c:	d101      	bne.n	8006732 <__sflush_r+0x76>
 800672e:	682b      	ldr	r3, [r5, #0]
 8006730:	b903      	cbnz	r3, 8006734 <__sflush_r+0x78>
 8006732:	6560      	str	r0, [r4, #84]	@ 0x54
 8006734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006736:	602f      	str	r7, [r5, #0]
 8006738:	b1b9      	cbz	r1, 800676a <__sflush_r+0xae>
 800673a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800673e:	4299      	cmp	r1, r3
 8006740:	d002      	beq.n	8006748 <__sflush_r+0x8c>
 8006742:	4628      	mov	r0, r5
 8006744:	f7ff fbf2 	bl	8005f2c <_free_r>
 8006748:	2300      	movs	r3, #0
 800674a:	6363      	str	r3, [r4, #52]	@ 0x34
 800674c:	e00d      	b.n	800676a <__sflush_r+0xae>
 800674e:	2301      	movs	r3, #1
 8006750:	4628      	mov	r0, r5
 8006752:	47b0      	blx	r6
 8006754:	4602      	mov	r2, r0
 8006756:	1c50      	adds	r0, r2, #1
 8006758:	d1c9      	bne.n	80066ee <__sflush_r+0x32>
 800675a:	682b      	ldr	r3, [r5, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0c6      	beq.n	80066ee <__sflush_r+0x32>
 8006760:	2b1d      	cmp	r3, #29
 8006762:	d001      	beq.n	8006768 <__sflush_r+0xac>
 8006764:	2b16      	cmp	r3, #22
 8006766:	d11e      	bne.n	80067a6 <__sflush_r+0xea>
 8006768:	602f      	str	r7, [r5, #0]
 800676a:	2000      	movs	r0, #0
 800676c:	e022      	b.n	80067b4 <__sflush_r+0xf8>
 800676e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006772:	b21b      	sxth	r3, r3
 8006774:	e01b      	b.n	80067ae <__sflush_r+0xf2>
 8006776:	690f      	ldr	r7, [r1, #16]
 8006778:	2f00      	cmp	r7, #0
 800677a:	d0f6      	beq.n	800676a <__sflush_r+0xae>
 800677c:	0793      	lsls	r3, r2, #30
 800677e:	680e      	ldr	r6, [r1, #0]
 8006780:	bf08      	it	eq
 8006782:	694b      	ldreq	r3, [r1, #20]
 8006784:	600f      	str	r7, [r1, #0]
 8006786:	bf18      	it	ne
 8006788:	2300      	movne	r3, #0
 800678a:	eba6 0807 	sub.w	r8, r6, r7
 800678e:	608b      	str	r3, [r1, #8]
 8006790:	f1b8 0f00 	cmp.w	r8, #0
 8006794:	dde9      	ble.n	800676a <__sflush_r+0xae>
 8006796:	6a21      	ldr	r1, [r4, #32]
 8006798:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800679a:	4643      	mov	r3, r8
 800679c:	463a      	mov	r2, r7
 800679e:	4628      	mov	r0, r5
 80067a0:	47b0      	blx	r6
 80067a2:	2800      	cmp	r0, #0
 80067a4:	dc08      	bgt.n	80067b8 <__sflush_r+0xfc>
 80067a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067ae:	81a3      	strh	r3, [r4, #12]
 80067b0:	f04f 30ff 	mov.w	r0, #4294967295
 80067b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b8:	4407      	add	r7, r0
 80067ba:	eba8 0800 	sub.w	r8, r8, r0
 80067be:	e7e7      	b.n	8006790 <__sflush_r+0xd4>
 80067c0:	dfbffffe 	.word	0xdfbffffe

080067c4 <_fflush_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	690b      	ldr	r3, [r1, #16]
 80067c8:	4605      	mov	r5, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	b913      	cbnz	r3, 80067d4 <_fflush_r+0x10>
 80067ce:	2500      	movs	r5, #0
 80067d0:	4628      	mov	r0, r5
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	b118      	cbz	r0, 80067de <_fflush_r+0x1a>
 80067d6:	6a03      	ldr	r3, [r0, #32]
 80067d8:	b90b      	cbnz	r3, 80067de <_fflush_r+0x1a>
 80067da:	f7ff f9ad 	bl	8005b38 <__sinit>
 80067de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0f3      	beq.n	80067ce <_fflush_r+0xa>
 80067e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067e8:	07d0      	lsls	r0, r2, #31
 80067ea:	d404      	bmi.n	80067f6 <_fflush_r+0x32>
 80067ec:	0599      	lsls	r1, r3, #22
 80067ee:	d402      	bmi.n	80067f6 <_fflush_r+0x32>
 80067f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067f2:	f7ff fb98 	bl	8005f26 <__retarget_lock_acquire_recursive>
 80067f6:	4628      	mov	r0, r5
 80067f8:	4621      	mov	r1, r4
 80067fa:	f7ff ff5f 	bl	80066bc <__sflush_r>
 80067fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006800:	07da      	lsls	r2, r3, #31
 8006802:	4605      	mov	r5, r0
 8006804:	d4e4      	bmi.n	80067d0 <_fflush_r+0xc>
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	059b      	lsls	r3, r3, #22
 800680a:	d4e1      	bmi.n	80067d0 <_fflush_r+0xc>
 800680c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800680e:	f7ff fb8b 	bl	8005f28 <__retarget_lock_release_recursive>
 8006812:	e7dd      	b.n	80067d0 <_fflush_r+0xc>

08006814 <__swhatbuf_r>:
 8006814:	b570      	push	{r4, r5, r6, lr}
 8006816:	460c      	mov	r4, r1
 8006818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681c:	2900      	cmp	r1, #0
 800681e:	b096      	sub	sp, #88	@ 0x58
 8006820:	4615      	mov	r5, r2
 8006822:	461e      	mov	r6, r3
 8006824:	da0d      	bge.n	8006842 <__swhatbuf_r+0x2e>
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800682c:	f04f 0100 	mov.w	r1, #0
 8006830:	bf14      	ite	ne
 8006832:	2340      	movne	r3, #64	@ 0x40
 8006834:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006838:	2000      	movs	r0, #0
 800683a:	6031      	str	r1, [r6, #0]
 800683c:	602b      	str	r3, [r5, #0]
 800683e:	b016      	add	sp, #88	@ 0x58
 8006840:	bd70      	pop	{r4, r5, r6, pc}
 8006842:	466a      	mov	r2, sp
 8006844:	f000 f848 	bl	80068d8 <_fstat_r>
 8006848:	2800      	cmp	r0, #0
 800684a:	dbec      	blt.n	8006826 <__swhatbuf_r+0x12>
 800684c:	9901      	ldr	r1, [sp, #4]
 800684e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006852:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006856:	4259      	negs	r1, r3
 8006858:	4159      	adcs	r1, r3
 800685a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800685e:	e7eb      	b.n	8006838 <__swhatbuf_r+0x24>

08006860 <__smakebuf_r>:
 8006860:	898b      	ldrh	r3, [r1, #12]
 8006862:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006864:	079d      	lsls	r5, r3, #30
 8006866:	4606      	mov	r6, r0
 8006868:	460c      	mov	r4, r1
 800686a:	d507      	bpl.n	800687c <__smakebuf_r+0x1c>
 800686c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	6123      	str	r3, [r4, #16]
 8006874:	2301      	movs	r3, #1
 8006876:	6163      	str	r3, [r4, #20]
 8006878:	b003      	add	sp, #12
 800687a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687c:	ab01      	add	r3, sp, #4
 800687e:	466a      	mov	r2, sp
 8006880:	f7ff ffc8 	bl	8006814 <__swhatbuf_r>
 8006884:	9f00      	ldr	r7, [sp, #0]
 8006886:	4605      	mov	r5, r0
 8006888:	4639      	mov	r1, r7
 800688a:	4630      	mov	r0, r6
 800688c:	f7ff fbba 	bl	8006004 <_malloc_r>
 8006890:	b948      	cbnz	r0, 80068a6 <__smakebuf_r+0x46>
 8006892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006896:	059a      	lsls	r2, r3, #22
 8006898:	d4ee      	bmi.n	8006878 <__smakebuf_r+0x18>
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	f043 0302 	orr.w	r3, r3, #2
 80068a2:	81a3      	strh	r3, [r4, #12]
 80068a4:	e7e2      	b.n	800686c <__smakebuf_r+0xc>
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	6020      	str	r0, [r4, #0]
 80068aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ae:	81a3      	strh	r3, [r4, #12]
 80068b0:	9b01      	ldr	r3, [sp, #4]
 80068b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80068b6:	b15b      	cbz	r3, 80068d0 <__smakebuf_r+0x70>
 80068b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068bc:	4630      	mov	r0, r6
 80068be:	f000 f81d 	bl	80068fc <_isatty_r>
 80068c2:	b128      	cbz	r0, 80068d0 <__smakebuf_r+0x70>
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	81a3      	strh	r3, [r4, #12]
 80068d0:	89a3      	ldrh	r3, [r4, #12]
 80068d2:	431d      	orrs	r5, r3
 80068d4:	81a5      	strh	r5, [r4, #12]
 80068d6:	e7cf      	b.n	8006878 <__smakebuf_r+0x18>

080068d8 <_fstat_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4d07      	ldr	r5, [pc, #28]	@ (80068f8 <_fstat_r+0x20>)
 80068dc:	2300      	movs	r3, #0
 80068de:	4604      	mov	r4, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	602b      	str	r3, [r5, #0]
 80068e6:	f7fa f9b0 	bl	8000c4a <_fstat>
 80068ea:	1c43      	adds	r3, r0, #1
 80068ec:	d102      	bne.n	80068f4 <_fstat_r+0x1c>
 80068ee:	682b      	ldr	r3, [r5, #0]
 80068f0:	b103      	cbz	r3, 80068f4 <_fstat_r+0x1c>
 80068f2:	6023      	str	r3, [r4, #0]
 80068f4:	bd38      	pop	{r3, r4, r5, pc}
 80068f6:	bf00      	nop
 80068f8:	200004e4 	.word	0x200004e4

080068fc <_isatty_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4d06      	ldr	r5, [pc, #24]	@ (8006918 <_isatty_r+0x1c>)
 8006900:	2300      	movs	r3, #0
 8006902:	4604      	mov	r4, r0
 8006904:	4608      	mov	r0, r1
 8006906:	602b      	str	r3, [r5, #0]
 8006908:	f7fa f9af 	bl	8000c6a <_isatty>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d102      	bne.n	8006916 <_isatty_r+0x1a>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	b103      	cbz	r3, 8006916 <_isatty_r+0x1a>
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	200004e4 	.word	0x200004e4

0800691c <_sbrk_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4d06      	ldr	r5, [pc, #24]	@ (8006938 <_sbrk_r+0x1c>)
 8006920:	2300      	movs	r3, #0
 8006922:	4604      	mov	r4, r0
 8006924:	4608      	mov	r0, r1
 8006926:	602b      	str	r3, [r5, #0]
 8006928:	f7fa f9b8 	bl	8000c9c <_sbrk>
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	d102      	bne.n	8006936 <_sbrk_r+0x1a>
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	b103      	cbz	r3, 8006936 <_sbrk_r+0x1a>
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	200004e4 	.word	0x200004e4

0800693c <_init>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	bf00      	nop
 8006940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006942:	bc08      	pop	{r3}
 8006944:	469e      	mov	lr, r3
 8006946:	4770      	bx	lr

08006948 <_fini>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	bf00      	nop
 800694c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694e:	bc08      	pop	{r3}
 8006950:	469e      	mov	lr, r3
 8006952:	4770      	bx	lr
